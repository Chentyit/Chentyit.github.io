<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翼叶知秋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chentyit.com/"/>
  <updated>2019-09-26T12:08:26.547Z</updated>
  <id>https://www.chentyit.com/</id>
  
  <author>
    <name>Chen Tianyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SparkStreaming入门</title>
    <link href="https://www.chentyit.com/2019/09/26/SparkStreaming%E5%85%A5%E9%97%A8/"/>
    <id>https://www.chentyit.com/2019/09/26/SparkStreaming入门/</id>
    <published>2019-09-26T12:01:16.000Z</published>
    <updated>2019-09-26T12:08:26.547Z</updated>
    
    <content type="html"><![CDATA[<ul><li>概述</li><li>应用场景</li><li>案例测试</li><li>工作原理</li></ul><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>将不同的数据源的数据经过 Spark Streaming 处理之后将结果输出到外部文件系统</p><p><strong>特点：</strong></p><ul><li>低延迟</li><li>能从错误中高效地恢复</li><li>能够运行在成百上千的节点</li><li>能够将批处理，机器学习，图计算等子框架和 Spark Streaming 综合起来使用</li></ul><p><img src="http://spark.apache.org/docs/2.2.0/img/streaming-flow.png" alt="streaming-flow"></p><p>输入进来的数据会被 Spark Streaming 处理成为 “批次”，然后由 Spark 引擎继续处理得到最终的数据流</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>实时金融欺诈检测</li><li>实时访问电子传感器的检测</li><li>电商行业信息推荐</li></ul><h2 id="SparkStreaming-例子测试"><a href="#SparkStreaming-例子测试" class="headerlink" title="SparkStreaming 例子测试"></a>SparkStreaming 例子测试</h2><ol><li><p>spark-submit 提交（词频分析）</p><p>启动命令（监听 hadoop000 的 9999 端口）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spark-submit --master local[2] --class org.apache.spark.examples.streaming.NetworkWordCount --name NetworkWordCount /home/hadoop/app/spark-2.2.0-bin-2.6.0-cdh5.7.0/examples/jars/spark-examples_2.11-2.2.0.jar hadoop000 9999</span><br></pre></td></tr></table></figure><p>官方测试代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">NetworkWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">System</span>.err.println(<span class="string">"Usage: NetworkWordCount &lt;hostname&gt; &lt;port&gt;"</span>)</span><br><span class="line">            <span class="type">System</span>.exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamingExamples</span>.setStreamingLogLevels()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"NetworkWordCount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> lines = ssc.socketTextStream(args(<span class="number">0</span>), args(<span class="number">1</span>).toInt, <span class="type">StorageLevel</span>.<span class="type">MEMORY_AND_DISK_SER</span>)</span><br><span class="line">        <span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">val</span> wordCounts = words.map(x =&gt; (x, <span class="number">1</span>)).reduceByKey(_ + _)</span><br><span class="line">        wordCounts.print()</span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spark-shell 提交（词频分析）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"hadoop000"</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"><span class="keyword">val</span> wordCounts = words.map(x =&gt; (x, <span class="number">1</span>)).reduceByKey(_ + _)</span><br><span class="line">wordCounts.print()</span><br><span class="line">ssc.start()</span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></table></figure></li></ol><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="粗粒度"><a href="#粗粒度" class="headerlink" title="粗粒度"></a>粗粒度</h3><p>Spark Streaming 接收到实时数据流，把数据按照指定的时间段切成一片片小的数据块，然后把小的数据块传给 Spark Engine 处理</p><h3 id="细粒度"><a href="#细粒度" class="headerlink" title="细粒度"></a>细粒度</h3><p><img src="/2019/09/26/SparkStreaming入门/细粒度.png" alt="细粒度"></p><ol><li>Spark 应用程序运行在 Driver 端，应用程序中有 StreamingContext 和 SparkContext</li><li>Driver 命令在 Executor 上启动接收器</li><li>接收器启动后，将收到的数据拆分成 block 并存放到内存中，如果设置多副本就拷贝到其他机器中</li><li>Receiver 将 block 的信息返回给 StreamingContext，一定时间周期后，通知 SparkContext 启动 Jobs</li><li>SparkContext 将 Jobs 分发到 Executor 上执行</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;li&gt;案例测试&lt;/li&gt;
&lt;li&gt;工作原理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Spark" scheme="https://www.chentyit.com/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>分布式消息队列 Kafka</title>
    <link href="https://www.chentyit.com/2019/09/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-Kafka/"/>
    <id>https://www.chentyit.com/2019/09/25/分布式消息队列-Kafka/</id>
    <published>2019-09-25T08:45:01.000Z</published>
    <updated>2019-09-25T10:39:27.866Z</updated>
    
    <content type="html"><![CDATA[<ul><li>概述</li><li>下载</li><li>架构及核心概念</li><li>部署及使用</li><li>容错性测试</li><li>API 编程</li><li>Flume &amp; Kafka 整合</li><li>踩坑</li></ul><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">官网</a></p><ul><li>将数据流变成一个消息系统</li><li>高效处理数据流（近乎实时处理）</li><li>安全，多副本存储于分布式系统中</li></ul><p><em>消息中间件：生产者和消费者</em></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">官网</a></p><p>建议 0.8.0 到 0.10.1</p><p>0.8.0 —— 看老师使用过</p><p>0.9.0 —— 实验环境运行成功</p><p>0.10.1 —— 学习环境运行成功</p><ul><li>配置环境变量就可以开始运行</li></ul><h2 id="架构及核心概念"><a href="#架构及核心概念" class="headerlink" title="架构及核心概念"></a>架构及核心概念</h2><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><ul><li>producer：生产者 —— 生产馒头</li><li>consumer：消费者 —— 吃馒头</li><li>broker：篮子</li><li>topic：主题，相当于馒头的标签，标志消费者吃那个标签下的馒头</li></ul><h3 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h3><ul><li><p>Kafka is run as a cluster on one or more servers that can span multiple datacenters.</p><p>（Kafka在一个或多个可以跨越多个数据中心的服务器上作为集群运行）</p></li><li><p>The Kafka cluster stores streams of <em>records</em> in categories called <em>topics</em>.</p><p>（Kafka群集将记录流存储在称为主题的类别中）</p></li><li><p>Each record consists of a key, a value, and a timestamp.</p><p>（每个记录由一个键，一个值和一个时间戳组成）</p></li></ul><h3 id="四个核心-API"><a href="#四个核心-API" class="headerlink" title="四个核心 API"></a>四个核心 API</h3><ul><li><strong>Producer API</strong> 发布消息到 1 和或多个 topic</li><li><strong>Consumer API</strong> 订阅一个或多个 topic，并处理产生的消息</li><li><strong>Stream API</strong> 充当一个流处理器，从 1 个或多个 topic 消费输出流，产生一个输出流到 1 个或多个输出 topic，有效将输入流转换到输出流</li><li><strong>Connector API</strong> 允许侯建或运行可重复使用的生产者或消费者，将 topic 连接到现有的应用程序或数据系统。</li></ul><h3 id="主题和日志"><a href="#主题和日志" class="headerlink" title="主题和日志"></a>主题和日志</h3><p><strong>Topic</strong> 是发布的消息或者种子的名字。对于每个 Topic，Kafka 集群维护这一个分区的 log</p><p>每个分区都是一个有序不可变的队列，且可以持续添加<strong>（只是局部有序，全局无序，如果要全局有序就只能有一个分区）</strong></p><p>分区中以唯一的偏移量标记每个消息</p><p>消费者持有和操作的都是偏移值，好处是不会影响到其他消费者，也更加自由灵活读取消息</p><p><strong>分区设计目的</strong></p><ul><li>处理更多消息，不受单台服务器的限制</li><li>分区可以作为并行处理单元</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>Log 的分区被分布式到集群中的多个服务器上，每个服务器处理它分到的分区。根据配置每个分区，还可以复制到其他服务器作为<strong>备份容错</strong>（下面有测试）</p><p> 每个分区有一个 leader，0 个或多个 follower，Leader 处理此分区的读写请求，follower 被动复制数据，如果 leader 宕机，follower 被推举为新 leader（下面测试有体现）</p><p>一个 leader 也有可能是其他分区的 follower，目的是为了负载均衡</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>向某个 Topic 发布消息，也负责选择发布到 Topic 上的哪个分区</p><p>选择算法：轮流选择，权重选择等（由开发者决定）</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>消费模型有两种：<strong>队列</strong>和<strong>发布-订阅</strong></p><ul><li>队列：一组消费者从服务器读取消息，一条消息只有其中一个消费者处理</li><li>发布-订阅：消息被广播给所有消费者，接收到消息的消费者都可以处理此消息</li></ul><h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><p>Kafka 为消费者模型提供的单一消费者凑相关模型</p><p>所有消费者在一个组中就是队列模型</p><p>不在一个组中就是发布-订阅模型</p><h2 id="部署及使用"><a href="#部署及使用" class="headerlink" title="部署及使用"></a>部署及使用</h2><ul><li><p>单节点单 Broker 部署及使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 配置 $KAFKA_HOME/config/server.properties 下的文件</span><br><span class="line">broker.id=0</span><br><span class="line">listeners</span><br><span class="line">log.dirs（不能是tmp，重启之后会消失）</span><br><span class="line">zookeeper.connect</span><br><span class="line"></span><br><span class="line"># 启动 Kafka</span><br><span class="line">kafka-server-start.sh config/server.properties</span><br><span class="line"></span><br><span class="line"># 创建 topic</span><br><span class="line">kafka-topics.sh --create --zookeeper hadoop000:2181 --replication-factor 1 --partitions 1 --topic cty_topic</span><br><span class="line"></span><br><span class="line"># 查看所有 topic</span><br><span class="line">kafka-topics.sh --list --zookeeper hadoop000:2181</span><br><span class="line"></span><br><span class="line"># 发送信息（生产馒头）</span><br><span class="line">kafka-console-producer.sh --broker-list hadoop000:9092 --topic cty_topic</span><br><span class="line"></span><br><span class="line"># 消费消息（吃馒头）</span><br><span class="line"># 写 --from-beginning（从第一个馒头开始吃）</span><br><span class="line"># 不写就是从新蒸好的馒头开始吃</span><br><span class="line">kafka-console-consumer.sh --zookeeper hadoop000:2181 --topic cty_topic --from-beginning</span><br><span class="line"></span><br><span class="line"># 查看所有 topic 的详细信息</span><br><span class="line">kafka-topics.sh --describe --zookeeper hadoop000:2181</span><br><span class="line"># 查看指定 topic 的详细信息</span><br><span class="line">kafka-topics.sh --describe --zookeeper hadoop000:2181 --topic cty_topic</span><br></pre></td></tr></table></figure></li><li><p>单节点多 Broker 部署及使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 这是官网复制的</span><br><span class="line"># 在同一台主机上部署多 Broker（按需求改）</span><br><span class="line">config/server-1.properties:</span><br><span class="line">    broker.id=1</span><br><span class="line">    port=9093</span><br><span class="line">    log.dir=/tmp/kafka-logs-1</span><br><span class="line"></span><br><span class="line">config/server-2.properties:</span><br><span class="line">    broker.id=2</span><br><span class="line">    port=9094</span><br><span class="line">    log.dir=/tmp/kafka-logs-2</span><br><span class="line"></span><br><span class="line"># 启动多个 Broker</span><br><span class="line"># daemon（守护进程）</span><br><span class="line">kafka-server-start.sh -daemon config/server-1.properties &amp;</span><br><span class="line">kafka-server-start.sh -daemon config/server-2.properties &amp;</span><br><span class="line"></span><br><span class="line"># jps（这里是启动了三个）</span><br><span class="line">22915 Kafka</span><br><span class="line">23109 Jps</span><br><span class="line">22981 Kafka</span><br><span class="line">21829 QuorumPeerMain</span><br><span class="line">23048 Kafka</span><br><span class="line"></span><br><span class="line"># 创建 topic</span><br><span class="line">kafka-topics.sh --create --zookeeper hadoop000:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic-cty</span><br><span class="line"></span><br><span class="line"># 查看 topic 详细信息</span><br><span class="line">kafka-topics.sh --describe --zookeeper hadoop000:2181 --topic my-replicated-topic-cty</span><br><span class="line"># PartitionCount 分区数</span><br><span class="line"># ReplicationFactor 副本数</span><br><span class="line"># Leader 领导者</span><br><span class="line"># Replicas 副本顺序</span><br><span class="line"># Isr 存活节点</span><br><span class="line">Topic:my-replicated-topic-ctyPartitionCount:1ReplicationFactor:3Configs:</span><br><span class="line">Topic: my-replicated-topic-ctyPartition: 0Leader: 1Replicas: 1,3,2Isr: 1,3,2</span><br></pre></td></tr></table></figure></li><li><p>多节点多 Broker 部署及使用（使用方法和<strong>单节点多 Broker</strong> 一样只不过分发到其他机器上了）</p></li></ul><h2 id="容错性测试"><a href="#容错性测试" class="headerlink" title="容错性测试"></a>容错性测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 先删除一个 Broker 查看是否还能继续生产馒头和吃馒头</span><br><span class="line"># 使用 kill -9 pid 强制关闭一个 Broker</span><br><span class="line">[hadoop@hadoop000 kafka_2.11-0.9.0.0]$ jps -m</span><br><span class="line">22915 Kafka config/server-1.properties</span><br><span class="line">22981 Kafka config/server-2.properties</span><br><span class="line">23048 Kafka config/server-3.properties</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop000 kafka_2.11-0.9.0.0]$ kull -9 22981</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop000 kafka_2.11-0.9.0.0]$ jps -m</span><br><span class="line">22915 Kafka config/server-1.properties</span><br><span class="line">23048 Kafka config/server-3.properties</span><br><span class="line"></span><br><span class="line"># 查看 topic 的信息（还剩 1 和 3 存活，且能继续生产馒头和吃馒头）</span><br><span class="line">Topic:my-replicated-topic-ctyPartitionCount:1ReplicationFactor:3Configs:</span><br><span class="line">Topic: my-replicated-topic-ctyPartition: 0Leader: 1Replicas: 1,3,2Isr: 1,3</span><br><span class="line"></span><br><span class="line"># 让 Leader 嗝屁（还是能继续生产馒头和吃馒头）</span><br><span class="line"># 注意：主节点嗝屁后，消费者会去找新的主节点，找的过程中会有报错</span><br><span class="line"># 就是找不到蒸馒头的人了，等新人一来就又继续吃了</span><br><span class="line">Topic:my-replicated-topic-ctyPartitionCount:1ReplicationFactor:3Configs:</span><br><span class="line">Topic: my-replicated-topic-ctyPartition: 0Leader: 3Replicas: 1,3,2Isr: 3</span><br></pre></td></tr></table></figure><h2 id="API-编程"><a href="#API-编程" class="headerlink" title="API 编程"></a>API 编程</h2><p><strong>KafkaProperties.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/25 14:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 设置一些参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK = <span class="string">"192.168.43.169:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"cty_topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROKER_LIST = <span class="string">"192.168.43.169:9092"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_ID = <span class="string">"test_group1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KafkaProducer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/25 14:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Kafka 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> Producer&lt;Integer, String&gt; producer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaProducer</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于保存参数</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        properties.put(<span class="string">"metadata.broker.list"</span>,KafkaProperties.BROKER_LIST);</span><br><span class="line">        properties.put(<span class="string">"serializer.class"</span>,<span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">        properties.put(<span class="string">"request.required.acks"</span>,<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化一个生产者</span></span><br><span class="line">        producer = <span class="keyword">new</span> Producer&lt;Integer, String&gt;(<span class="keyword">new</span> ProducerConfig(properties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发送的数据</span></span><br><span class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 构建发送的数据</span></span><br><span class="line">            String message = <span class="string">"message_"</span> + messageNo;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> KeyedMessage&lt;Integer, String&gt;(topic, message));</span><br><span class="line">            <span class="comment">// 打印消息</span></span><br><span class="line">            System.out.println(<span class="string">"Sent: "</span> + message);</span><br><span class="line">            messageNo ++ ;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KafkaConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/25 15:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消费者（吃馒头）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConsumerConnector <span class="title">createConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用于保存参数</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="comment">// 不设置 group.id 会报错</span></span><br><span class="line">        properties.put(<span class="string">"zookeeper.connect"</span>, KafkaProperties.ZK);</span><br><span class="line">        properties.put(<span class="string">"group.id"</span>, KafkaProperties.GROUP_ID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个消费者</span></span><br><span class="line">        <span class="keyword">return</span> Consumer.createJavaConsumerConnector(<span class="keyword">new</span> ConsumerConfig(properties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取一个消费者实例</span></span><br><span class="line">        ConsumerConnector consumer = createConnector();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存 topic</span></span><br><span class="line">        Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        topicCountMap.put(topic, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个 String：topic</span></span><br><span class="line">        <span class="comment">// List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt; 对应的数据流</span></span><br><span class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; messageStream = consumer.createMessageStreams(topicCountMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取我们每次接受到的数据</span></span><br><span class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = messageStream.get(topic).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用迭代器获取数据</span></span><br><span class="line">        <span class="keyword">for</span> (kafka.message.MessageAndMetadata&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; messageAndMetadata : stream) &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(messageAndMetadata.message());</span><br><span class="line">            System.out.println(<span class="string">"rec:"</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KafkaClientApp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/25 15:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaClientApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动两个线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> KafkaProducer(KafkaProperties.TOPIC).start();</span><br><span class="line">        <span class="keyword">new</span> KafkaConsumer(KafkaProperties.TOPIC).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flume-amp-Kafka-整合"><a href="#Flume-amp-Kafka-整合" class="headerlink" title="Flume &amp; Kafka 整合"></a>Flume &amp; Kafka 整合</h2><p><img src="/2019/09/25/分布式消息队列-Kafka/Flume&amp;Kafka.png" alt="Flume&amp;Kafka"></p><p><strong>avro-memory-kafka.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">avro-memory-kafka.sources = avro-source</span><br><span class="line">avro-memory-kafka.sinks = kafka-sink</span><br><span class="line">avro-memory-kafka.channels = memory-channel</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sources.avro-source.type = avro</span><br><span class="line">avro-memory-kafka.sources.avro-source.bind = hadoop000</span><br><span class="line">avro-memory-kafka.sources.avro-source.port = 44444</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.brokerList = hadoop000:9092</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.topic = cty_topic</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.batchSize = 5</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.requiredAcks = 1</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sources.avro-source.channels = memory-channel</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.channel = memory-channel</span><br></pre></td></tr></table></figure><p><strong>avro-memory-logger.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">avro-memory-logger.sources = avro-source</span><br><span class="line">avro-memory-logger.sinks = logger-sink</span><br><span class="line">avro-memory-logger.channels = memory-channel</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.type = avro</span><br><span class="line">avro-memory-logger.sources.avro-source.bind = hadoop000</span><br><span class="line">avro-memory-logger.sources.avro-source.port = 44444</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sinks.logger-sink.type = logger</span><br><span class="line"></span><br><span class="line">avro-memory-logger.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.channels = memory-channel</span><br><span class="line">avro-memory-logger.sinks.logger-sink.channel = memory-channel</span><br></pre></td></tr></table></figure><p><strong>先启动 avro-memory-kafka.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name avro-memory-kafka  \</span><br><span class="line">--conf $FLUME_HOME/conf  \</span><br><span class="line">--conf-file $FLUME_HOME/conf/avro-memory-kafka.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><strong>再启动 exec-memory-avro</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name exec-memory-avro  \</span><br><span class="line">--conf $FLUME_HOME/conf  \</span><br><span class="line">--conf-file $FLUME_HOME/conf/exec-memory-avro.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><strong>最后启动 Kafka</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p><strong>在终端查看消费者信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --zookeeper hadoop000:2181 --topic cty_topic</span><br></pre></td></tr></table></figure><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li><p>在 server.properties 中的 listeners 用于外网访问 Kafka 集群，如果需要在本地调试传消息到 Kafka 集群，就需要这个参数，而且 listeners 的参数必须规范，后面的 IPv4 地址必须要按照规范来，不能用主机名代替，不然外部无法连接，设置规范</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listeners=PLAINTEXT://192.168.43.169:9092</span><br></pre></td></tr></table></figure></li><li><p>Flume 下沉到 Kafka 需要看官网，下沉的版本号有要求，比如 flume1.6 只支持 kafka 0.9 以上版本</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;下载&lt;/li&gt;
&lt;li&gt;架构及核心概念&lt;/li&gt;
&lt;li&gt;部署及使用&lt;/li&gt;
&lt;li&gt;容错性测试&lt;/li&gt;
&lt;li&gt;API 编程&lt;/li&gt;
&lt;li&gt;Flume &amp;amp; Kafka 整合&lt;/li&gt;
&lt;li&gt;踩坑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Kafka" scheme="https://www.chentyit.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>分布式日志收集框架 Flume</title>
    <link href="https://www.chentyit.com/2019/09/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%A1%86%E6%9E%B6-Flume/"/>
    <id>https://www.chentyit.com/2019/09/25/分布式日志收集框架-Flume/</id>
    <published>2019-09-25T03:20:35.000Z</published>
    <updated>2019-09-25T03:22:25.189Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Flume 概述</li><li>安装</li><li>Flume 架构及核心组件</li><li>Flume 配置文件描述</li><li>监控一个文件实时采集新增的数据输出到控制台</li><li>跨服务采集日志</li></ul><a id="more"></a><h2 id="Flume-概述"><a href="#Flume-概述" class="headerlink" title="Flume 概述"></a>Flume 概述</h2><p><a href="http://flume.apache.org/" target="_blank" rel="noopener">官网</a></p><p>FLume 是有 Cloudera 提供的一个<strong>分布式，高可靠，高可用</strong>的服务，用于分布式的海量日志的高效收集、聚合、移动系统</p><p>设计目标：可靠性，扩展性，管理性</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>安装 JDK</p></li><li><p>下载 flume 安装包</p></li><li><p>解压安装包</p></li><li><p>更改配置文件</p><p>修改 conf 下的 flume-env.sh.template 复制一份到 flume-env.sh 并修改文件中的 JAVA_HOME 为 jdk 的真实路径</p></li></ul><h2 id="Flume-架构及核心组件"><a href="#Flume-架构及核心组件" class="headerlink" title="Flume 架构及核心组件"></a>Flume 架构及核心组件</h2><ul><li><p>Source：收集</p><p>指定数据的来源</p></li><li><p>Channel：聚集</p><p>为数据提供一个临时缓存的地方</p></li><li><p>Sink：输出</p><p>从 Channel 中将数据读取出来，输出到指定位置</p></li></ul><h2 id="Flume-配置文件描述"><a href="#Flume-配置文件描述" class="headerlink" title="Flume 配置文件描述"></a>Flume 配置文件描述</h2><ul><li>a1：agent 名称</li><li>r1：source 的名称</li><li>k1：sink 的名称</li><li>c1：channle 的名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 组件类型为 netcat</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line"># 要绑定的主机名或IP地址</span><br><span class="line">a1.sources.r1.bind = hadoop000</span><br><span class="line"># 要绑定的端口号</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 需要记录组件类型名称</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 组件类型名称，必须是内存</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 通道中存储的最大事件数</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 每次通道从源或汇给接收器的最大事件数</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><strong>启动命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --name a1 --conf conf --conf-file conf/example.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><strong>接收到的消息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Event: &#123; headers:&#123;&#125; body: 68 65 6C 6C 6F 0D     hello. &#125;</span><br></pre></td></tr></table></figure><p>Event 是 Flume 数据传输的基本单元</p><p>Event = 可选的 header + byte array</p><h2 id="监控一个文件实时采集新增的数据输出到控制台"><a href="#监控一个文件实时采集新增的数据输出到控制台" class="headerlink" title="监控一个文件实时采集新增的数据输出到控制台"></a>监控一个文件实时采集新增的数据输出到控制台</h2><p><strong>Agent 选型：</strong>exec source + Memory Channel + Logger Sink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 组件类型名称为 exec </span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/hadoop/data/data.log</span><br><span class="line">a1.sources.r1.shell = /bin/sh -c</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 需要记录组件类型名称</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 组件类型名称，必须是内存</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 通道中存储的最大事件数</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 每次通道从源或汇给接收器的最大事件数</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h2 id="跨服务采集日志"><a href="#跨服务采集日志" class="headerlink" title="跨服务采集日志"></a>跨服务采集日志</h2><p><strong>技术选型：</strong></p><ul><li>exec source + memory channel + avro sink</li><li>avro source + memory channel + logger sink</li></ul><p><strong>exec-memory-avro.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">exec-memory-avro.sources = exec-source</span><br><span class="line">exec-memory-avro.sinks = avro-sink</span><br><span class="line">exec-memory-avro.channels = memory-channel</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sources.exec-source.type = exec</span><br><span class="line">exec-memory-avro.sources.exec-source.command = tail -F /home/hadoop/data/data.log</span><br><span class="line">exec-memory-avro.sources.exec-source.shell = /bin/sh -c</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sinks.avro-sink.type = avro</span><br><span class="line">exec-memory-avro.sinks.avro-sink.hostname = hadoop000</span><br><span class="line">exec-memory-avro.sinks.avro-sink.port = 44444</span><br><span class="line"></span><br><span class="line">exec-memory-avro.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sources.exec-source.channels = memory-channel</span><br><span class="line">exec-memory-avro.sinks.avro-sink.channel = memory-channel</span><br></pre></td></tr></table></figure><p><strong>avro-memory-logger.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">avro-memory-logger.sources = avro-source</span><br><span class="line">avro-memory-logger.sinks = logger-sink</span><br><span class="line">avro-memory-logger.channels = memory-channel</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.type = avro</span><br><span class="line">avro-memory-logger.sources.avro-source.bind = hadoop000</span><br><span class="line">avro-memory-logger.sources.avro-source.port = 44444</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sinks.logger-sink.type = logger</span><br><span class="line"></span><br><span class="line">avro-memory-logger.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.channels = memory-channel</span><br><span class="line">avro-memory-logger.sinks.logger-sink.channel = memory-channel</span><br></pre></td></tr></table></figure><p><strong>先启动 avro-memory-logger</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name avro-memory-logger  \</span><br><span class="line">--conf $FLUME_HOME/conf  \</span><br><span class="line">--conf-file $FLUME_HOME/conf/avro-memory-logger.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><strong>再启动 exec-memory-avro</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name exec-memory-avro  \</span><br><span class="line">--conf $FLUME_HOME/conf  \</span><br><span class="line">--conf-file $FLUME_HOME/conf/exec-memory-avro.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Flume 概述&lt;/li&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;li&gt;Flume 架构及核心组件&lt;/li&gt;
&lt;li&gt;Flume 配置文件描述&lt;/li&gt;
&lt;li&gt;监控一个文件实时采集新增的数据输出到控制台&lt;/li&gt;
&lt;li&gt;跨服务采集日志&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Flume" scheme="https://www.chentyit.com/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题02</title>
    <link href="https://www.chentyit.com/2019/09/24/Java%E9%9D%A2%E8%AF%95%E9%A2%9802/"/>
    <id>https://www.chentyit.com/2019/09/24/Java面试题02/</id>
    <published>2019-09-24T00:18:18.000Z</published>
    <updated>2019-09-25T10:56:09.791Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java 多线程模块</li><li>Java 反射模块</li></ul><p>题库来源于 <a href="https://www.javazhiyin.com/42272.html" target="_blank" rel="noopener">Java知音</a></p><a id="more"></a><h2 id="Java多线程模块"><a href="#Java多线程模块" class="headerlink" title="Java多线程模块"></a>Java多线程模块</h2><h3 id="51-ThreadLocal-是什么？有哪些使用场景"><a href="#51-ThreadLocal-是什么？有哪些使用场景" class="headerlink" title="51. ThreadLocal 是什么？有哪些使用场景"></a>51. ThreadLocal 是什么？有哪些使用场景</h3><p>ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本而不会影响其它线程所对应的的副本</p><p>ThreadLocal 使用场景：数据库连接和 session 管理等</p><h3 id="52-synchronized-底层实现原理"><a href="#52-synchronized-底层实现原理" class="headerlink" title="52. synchronized 底层实现原理"></a>52. synchronized 底层实现原理</h3><p>synchronized 是由一对 monitorenter / monitorexit 指令实现的，monitor 对象时同步的基本实现单元，在 Java 6 之前，monitor 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作，性能也很低。</p><p>Java 6 的时候，JVM 虚拟机提供了三种不同的 monitor 实现： 偏向锁，轻量级锁和重量级锁，用于改进其性能</p><h3 id="53-synchronized-和-volatile-的区别是什么？"><a href="#53-synchronized-和-volatile-的区别是什么？" class="headerlink" title="53.synchronized 和 volatile 的区别是什么？"></a>53.synchronized 和 volatile 的区别是什么？</h3><ul><li>volatile 是<strong>变量</strong>修饰符；synchronized 是修饰<strong>类、方法、代码块</strong></li><li>volatile 仅能实现变量的修改可见性，不能保证原子性；synchronized 则可以保证变量的修改可见性和原子性</li><li>volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞</li></ul><h3 id="54-synchronized-和-Lock-有什么区别？"><a href="#54-synchronized-和-Lock-有什么区别？" class="headerlink" title="54. synchronized 和 Lock 有什么区别？"></a>54. synchronized 和 Lock 有什么区别？</h3><ul><li>synchronized 可以给类、方法、代码块加锁；Lock 只能给代码块加锁</li><li>synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；Lock 需要自己加锁和释放锁，如果使用不当，没有 unLock() 释放锁，就会造成死锁</li><li>通过 Lock 可以指导有没有成功获取锁，synchronized 无法知道</li></ul><h3 id="55-synchronized-和-ReentrantLock-区别是什么？"><a href="#55-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="55. synchronized 和 ReentrantLock 区别是什么？"></a>55. synchronized 和 ReentrantLock 区别是什么？</h3><ul><li>ReentrantLock 使用起来比较灵活，但是必须有释放锁配合动作</li><li>ReentrantLock 必须手动获取与释放锁；synchronized 不需要手动释放和开启锁</li><li>ReentrantLock 只使用于代码块锁；synchronized 可用于修饰方法、代码块等</li><li>ReentrantLock 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化</li></ul><h3 id="56-atomic-原理"><a href="#56-atomic-原理" class="headerlink" title="56. atomic 原理"></a>56. atomic 原理</h3><p>atomic 主要利用 CAS（Compare And Swap）和 volatile 和 native 方法俩保证原子操作，从而避免 synchronized 的高开销，执行效率提升</p><h2 id="Java-反射模块"><a href="#Java-反射模块" class="headerlink" title="Java 反射模块"></a>Java 反射模块</h2><h3 id="57-什么是反射？"><a href="#57-什么是反射？" class="headerlink" title="57.什么是反射？"></a>57.什么是反射？</h3><p>反射是在运行状态中，对任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制</p><h3 id="58-什么是-Java-序列化？什么情况下需要序列化？"><a href="#58-什么是-Java-序列化？什么情况下需要序列化？" class="headerlink" title="58. 什么是 Java 序列化？什么情况下需要序列化？"></a>58. 什么是 Java 序列化？什么情况下需要序列化？</h3><p>Java 序列化是为了保存各种对象在内存中的状态，并且可以把保存的对象状态再读出来</p><ul><li>想把内存中的对象保存到一个文件中或者数据库中的时候</li><li>想用套接字在网络上传送对象的时候</li><li>想通过 RMI（远程方法调用）传输对象的时候</li></ul><h3 id="59-动态代理是什么？有哪些应用？"><a href="#59-动态代理是什么？有哪些应用？" class="headerlink" title="59. 动态代理是什么？有哪些应用？"></a>59. 动态代理是什么？有哪些应用？</h3><p>动态代理是运行时动态生成的代理类</p><p>动态代理的应用有 spring aop，hibernate 数据查询，RPC，Java 注解对象获取等</p><h3 id="60-怎么实现动态代理？"><a href="#60-怎么实现动态代理？" class="headerlink" title="60. 怎么实现动态代理？"></a>60. 怎么实现动态代理？</h3><p>JDK 原生动态代理和 cglib 动态代理：</p><ul><li>JDK 原生动态代理是基于接口实现的</li><li>cglib 是基于继承当前类的子类实现的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Java 多线程模块&lt;/li&gt;
&lt;li&gt;Java 反射模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题库来源于 &lt;a href=&quot;https://www.javazhiyin.com/42272.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java知音&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="面试" scheme="https://www.chentyit.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题01</title>
    <link href="https://www.chentyit.com/2019/09/20/Java%E9%9D%A2%E8%AF%95%E9%A2%9801/"/>
    <id>https://www.chentyit.com/2019/09/20/Java面试题01/</id>
    <published>2019-09-20T07:33:47.000Z</published>
    <updated>2019-09-23T00:32:11.271Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java 基础模块</li><li>Java 容器模块</li><li>Java多线程模块</li></ul><p>题库来源于 <a href="https://www.javazhiyin.com/42272.html" target="_blank" rel="noopener">Java知音</a></p><a id="more"></a><h2 id="Java-基础模块"><a href="#Java-基础模块" class="headerlink" title="Java 基础模块"></a>Java 基础模块</h2><h3 id="1-JDK-和-JRE-的区别"><a href="#1-JDK-和-JRE-的区别" class="headerlink" title="1. JDK 和 JRE 的区别"></a>1. JDK 和 JRE 的区别</h3><ul><li>JDK（Java Development Kit），Java 开发工具包，提供了 Java 开发环境和运行环境</li><li>JRE（Java Runtime Environment），Java 运行环境，为 Java 的运行提供了运行时所需要的环境</li></ul><p>JDK 包含了 JRE，同时包含了编译 Java 编码的编译器 Javac，包含了很多 Java 程序调试和分析的工具</p><h3 id="2-和-equals-的区别"><a href="#2-和-equals-的区别" class="headerlink" title="2. == 和 equals 的区别"></a>2. == 和 equals 的区别</h3><ul><li><p>==：对于基本类型和引用类型，效果是不同的</p><p>基本类型：比较值是否相同</p><p>引用类型：比较引用是否相同</p></li><li><p>equals：本质就是 ==，只不过 String 和 Integer 等类重写了 equals 方法，变成了值比较</p><p><strong>Object 中的 equals</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String 中重写了 equals</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先判断两个对象的地址是否相同，相同直接返回 true，否则继续判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断另一个对象到底是不是字符串</span></span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="comment">// 转化为字符串类型</span></span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="comment">// 判断两个字符串的长度</span></span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 字符串长度相等就一个一个的判断字符串中每个字符是否相等</span></span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true-吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true-吗？" class="headerlink" title="3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true 吗？"></a>3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true 吗？</h3><p>两个对象的 hashCode 相同，equals() 不一定相同</p><p>hashCode 相同表示两个键值对的哈希值相同，哈希值相等并不代表键值对相等d</p><h3 id="4-final-在-Java-中有什么作用？"><a href="#4-final-在-Java-中有什么作用？" class="headerlink" title="4. final 在 Java 中有什么作用？"></a>4. final 在 Java 中有什么作用？</h3><ul><li>修饰的类叫做最终类</li><li>修饰的方法不能被重写</li><li>修饰的变量叫常量，常量必须初始化，初始化后值不能被修改</li></ul><h3 id="5-Java-中的-Math-round-1-5-等于多少？"><a href="#5-Java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5. Java 中的 Math.round(-1, 5) 等于多少？"></a>5. Java 中的 Math.round(-1, 5) 等于多少？</h3><p>等于 -1，round() 是四舍五入（直接理解成向上取整）</p><h3 id="6-String-属于基础数据类型吗？"><a href="#6-String-属于基础数据类型吗？" class="headerlink" title="6. String 属于基础数据类型吗？"></a>6. String 属于基础数据类型吗？</h3><p>不属于，基础类型只有 8 种：bit，short，int，long，float，double，char，boolean</p><h3 id="7-Java-中操作字符串的都有哪些类？有什么区别？"><a href="#7-Java-中操作字符串的都有哪些类？有什么区别？" class="headerlink" title="7. Java 中操作字符串的都有哪些类？有什么区别？"></a>7. Java 中操作字符串的都有哪些类？有什么区别？</h3><ul><li>String</li><li>StringBuilder</li><li>StringBuffer</li></ul><p>StringBuilder 和 StringBuffer 都继承抽象列 AbstractStringBuilder</p><p>String 声明的是不可变的对象，每次操作都会生成新的对象，然后向指正指向新的对象</p><p>StringBuilder 和 StringBuffer 存储数据的字符数组没有被 final 修饰，值可以修改，AbstractStringBuilder 提供了一个自动扩容机制（默认初始长度为 16）长度不够的时候会自动扩容，扩展容量为原来的2倍加2，拼接字符串的效率比 Stirng 高</p><p>StringBuilder 执行效率高，但是线程不安全</p><p>StringBuffer 每个方法都用 synchronize 修饰，加锁和释放锁消耗资源，效率比 StringBuilder 低，但是线程安全</p><p>三者执行速度比较：StringBuilder &gt; StringBuffer &gt; String</p><h3 id="8-String-str-“i”-与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-“i”-与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8. String str = “i” 与 String str = new String(“i”) 一样吗？"></a>8. String str = “i” 与 String str = new String(“i”) 一样吗？</h3><p>不一样，因为内存分配方式不一样</p><p><strong>String str = “i”：</strong>Java 虚拟机会将其分配到常量池中，如果池中有 “i” 就直接返回地址，没有就创建再返回地址</p><p><strong>String str = new String(“i”) ：</strong>直接在堆内存中开辟新空间</p><h3 id="9-字符串反转"><a href="#9-字符串反转" class="headerlink" title="9. 字符串反转"></a>9. 字符串反转</h3><p>使用 StringBuilder 或者 StringBuffer 的 reverse() 方法</p><h3 id="10-String-类的常用方法都有哪些？"><a href="#10-String-类的常用方法都有哪些？" class="headerlink" title="10. String 类的常用方法都有哪些？"></a>10. String 类的常用方法都有哪些？</h3><ul><li>indexOf()：返回指定字符的索引</li><li>charAt()：返回指定索引的字符</li><li>replace()：字符串替换</li><li>trim()：取出字符串两端空白</li><li>split()：分割字符串，返回一个分割后的字符串数组</li><li>getBytes()：返回字符串的 byte 类型数组</li><li>length()：返回字符串长度</li><li>toLowerCase()：将字符串转成小写字母</li><li>toUpperCase()：将字符串转成大小字母</li><li>substring()：截取字符串</li><li>equals()：字符串比较</li></ul><h3 id="11-抽象类必须有抽象方法吗？"><a href="#11-抽象类必须有抽象方法吗？" class="headerlink" title="11. 抽象类必须有抽象方法吗？"></a>11. 抽象类必须有抽象方法吗？</h3><p>不一定，但是包含抽象方法的<strong>类</strong>一定是抽象类</p><h3 id="12-普通类和抽象类有什么区别？"><a href="#12-普通类和抽象类有什么区别？" class="headerlink" title="12. 普通类和抽象类有什么区别？"></a>12. 普通类和抽象类有什么区别？</h3><ol><li>普通类不能有抽象方法，抽象类有抽象方法</li><li>抽象类不能被实例化，普通类可以</li><li>一个类继承抽象类，必须要重写抽象方法，如果不重写，说明子类也是抽象类</li></ol><h3 id="13-抽象类能用-final-修饰吗？"><a href="#13-抽象类能用-final-修饰吗？" class="headerlink" title="13. 抽象类能用 final 修饰吗？"></a>13. 抽象类能用 final 修饰吗？</h3><p>抽象类被定义就是用来被继承实现的，被 final 修饰的类不能被继承，所以 abstract 和 final 不能共存于一个类中，抽象类不能用 final 修饰</p><h3 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14. 接口和抽象类有什么区别？"></a>14. 接口和抽象类有什么区别？</h3><ul><li>结构：抽象类用 abstract 修饰；接口用 interface 修饰</li><li>继承：抽象类可以继承抽象类，实现接口，继承普通类（前提是被继承的类必须要有构造方法）；接口只能继承接口</li><li>实现：抽象类的子类使用 extends 继承；接口使用 implement 实现</li><li>构造方法：抽象类可以有构造方法；接口没有</li><li>实现数量：抽象类只能单继承；接口可以多实现</li><li>变量：抽象类中的变量可以是普通变量；接口里面的变量只能是公共静态变量</li><li>方法类型：抽象类中的方法可以有实现，也可以是抽象方法；接口的只能是抽象方法</li><li>访问修饰符：接口中的方法默认使用 public abstract；抽象类的方法可以使用 public 和 protected 修饰，如果用 private 就会报错</li></ul><p><strong>接口是设计的结果，抽象类是重构的结果</strong></p><h3 id="15-Java-中的-IO-流分为几种"><a href="#15-Java-中的-IO-流分为几种" class="headerlink" title="15. Java 中的 IO 流分为几种"></a>15. Java 中的 IO 流分为几种</h3><ul><li><p>按功能分：<strong>输入流</strong>和<strong>输出流</strong></p></li><li><p>按类型分：<strong>字节流</strong>和<strong>字符流</strong></p><p>区别是字节流按 8 位二进制字节为单位传输，字符流以 16 为二进制字符为单位传输</p></li></ul><h3 id="16-BIO、NIO-和-AIO-有什么区别？"><a href="#16-BIO、NIO-和-AIO-有什么区别？" class="headerlink" title="16. BIO、NIO 和 AIO 有什么区别？"></a>16. BIO、NIO 和 AIO 有什么区别？</h3><ul><li><strong>BIO：</strong>Block IO 同步阻塞式 IO，传统 IO，模式简单使用方便，并发处理能力低</li><li><strong>NIO：</strong>New IO 同步非阻塞式 IO，BIO 升级，客户端和服务端通过 Channel 通讯，实现多路复用</li><li><strong>AIO：</strong>Asynchronous IO 是 BIO 升级，也叫 NIO2，异步非阻塞 IO，异步 IO 的操作基于事件和回调机制</li></ul><h3 id="17-Files-的常用方法都有哪些"><a href="#17-Files-的常用方法都有哪些" class="headerlink" title="17. Files 的常用方法都有哪些"></a>17. Files 的常用方法都有哪些</h3><ul><li>Files.exists()：检测文件路径是否存在</li><li>Files.createFile()：创建文件</li><li>Files.createDirectory()：创建文件夹</li><li>Files.delete()：删除一个文件或目录</li><li>Files.copy()：复制文件</li><li>Files.move()：移动文件</li><li>Files.size()：查看文件个数</li><li>Files.read()：读取文件</li><li>Files.write()：写入文件</li></ul><h2 id="Java-容器模块"><a href="#Java-容器模块" class="headerlink" title="Java 容器模块"></a>Java 容器模块</h2><h3 id="18-Java-容器都有哪些？"><a href="#18-Java-容器都有哪些？" class="headerlink" title="18. Java 容器都有哪些？"></a>18. Java 容器都有哪些？</h3><p>Java 容器分为 Collection 和 Map 两大类：</p><ul><li>Collection：<ul><li>List</li><li>ArrayList</li><li>LinkedList</li><li>Vector</li><li>Stack</li><li>Set</li><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ul></li><li>Map:<ul><li>HashMap</li><li>LinkedHasMap</li><li>TreeMap</li><li>ConcurrentHashMap</li><li>Hashtable</li></ul></li></ul><h3 id="19-Collection-和-Collections-有什么区别？"><a href="#19-Collection-和-Collections-有什么区别？" class="headerlink" title="19. Collection 和 Collections 有什么区别？"></a>19. Collection 和 Collections 有什么区别？</h3><p>Collection 是一个集合接口，提供了对集合对象进行基本操作的通用接口</p><p>Collections 是一个包装类，包含了很多静态方法，不能被实例化，是一个工具类，时间对集合的查找、排序、替换、线程安全化等操作</p><h3 id="20-List、Set、Map-之间的区别是什么？"><a href="#20-List、Set、Map-之间的区别是什么？" class="headerlink" title="20. List、Set、Map 之间的区别是什么？"></a>20. List、Set、Map 之间的区别是什么？</h3><p>List、Set、Map 的区别主要体现在连个方面：元素是否有序，是否允许元素重复</p><table><thead><tr><th><strong>比较</strong></th><th><strong>List</strong></th><th><strong>Set</strong></th><th><strong>Map</strong></th></tr></thead><tbody><tr><td>继承接口</td><td>Collection</td><td>Collection</td><td></td></tr><tr><td>常见实现类</td><td>AbstractList(其常用子类有ArrayList、LinkedList、Vector)</td><td>AbstractSet(其常用子类有HashSet、LinkedHashSet、TreeSet)</td><td>HashMap、HashTable</td></tr><tr><td>常见方法</td><td>add( )、remove( )、clear( )、get( )、contains( )、size( )</td><td>add( )、remove( )、clear( )、contains( )、size( )</td><td>put( )、get( )、remove( )、clear( )、containsKey( )、containsValue( )、keySet( )、values( )、size( )</td></tr><tr><td>元素</td><td>可重复</td><td>不可重复(用<code>equals()</code>判断)</td><td>不可重复</td></tr><tr><td>顺序</td><td>有序</td><td>无序(实际上由HashCode决定)</td><td></td></tr><tr><td>线程安全</td><td>Vector线程安全</td><td></td><td>Hashtable线程安全</td></tr></tbody></table><h3 id="21-HashMap-和-Hashtable-有什么区别？"><a href="#21-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="21. HashMap 和 Hashtable 有什么区别？"></a>21. HashMap 和 Hashtable 有什么区别？</h3><p>HashMap 是继承自 AbstractMap 类，HashTable 是继承自 Dictionary 类，不过他们都实现了 map，Cloneable（可复制），Serializable（可序列化）三个接口</p><p>HashTable 比 HashMap 多提供了 elments() 和 contains() 两个方法</p><p><strong>底层结构：</strong></p><ul><li>HashMap：底层是哈希表数据结构，是线程不同步的，可以存储 null-null 键值对，替代了 HashTable，正因为可以存储 null-null 键值对，当使用 get 获取到 value 的值为 null 时，无法判断是不存在 key，还是这个 key 本身就是 null，所以不能通过 get 来判断 HashMap 中是否存在某个键，应该使用 containsKey() 方法来判断</li><li>Hashtable：底层是哈希表结构，是线程同步的，只支持 key-value 键值对</li></ul><p><strong>容量以及扩容：</strong></p><ul><li>Hashtable：初始容量是 11，每次扩充为原来的 2n + 1</li><li>HashMap：初始容量为 16，每次扩容为 2n</li></ul><p><strong>存储结构的哈希值：</strong></p><ul><li>HashTable：直接使用对象的 hasCode，hashCode 是 JDK 根据对象的地址或者字符串或者数字算出来的 int 类型的额数值（<a href="https://www.cnblogs.com/williamjie/p/9099141.html" target="_blank" rel="noopener">知识点链接</a>）</li><li>HashMap：哈希表 + 链表（<strong>可能会转化为红黑树</strong>）</li></ul><h3 id="22-如何决定使用-HashMap-还是-TreeMap？"><a href="#22-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="22. 如何决定使用 HashMap 还是 TreeMap？"></a>22. 如何决定使用 HashMap 还是 TreeMap？</h3><ul><li>HashMap：在 Map 中插入、删除、定位一个元素这类操作</li><li>TreeMap：对一个 key 集合进行有序遍历</li></ul><h3 id="23-HashMap-实现原理"><a href="#23-HashMap-实现原理" class="headerlink" title="23. HashMap 实现原理"></a>23. HashMap 实现原理</h3><p>HashMap 基于 Hash 算法实现，通过 put(key, value) 存储，get(key) 来获取</p><p>当传入 key 值时，HashMap 会根据 key.hashCode()  计算出 hash 值，根据 hash 值将 value 保存在 buket 里，如果哈希值相同（哈希冲突），当 hash 冲突个数比较小的时候，就用链表，多的话自动转化为红黑树</p><h3 id="24-HashSet-实现原理"><a href="#24-HashSet-实现原理" class="headerlink" title="24. HashSet 实现原理"></a>24. HashSet 实现原理</h3><p>HashSet 基于 HashMap 实现的，HashSet 底层使用 HashMap 来保存元素，相关操作直接调用底层 HashMap 的相关方法实现，HashSet 不允许有重复值出现</p><h3 id="25-ArrayList-和-LinkedList-的区别是什么？"><a href="#25-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="25. ArrayList 和 LinkedList 的区别是什么？"></a>25. ArrayList 和 LinkedList 的区别是什么？</h3><p><strong>数据结构实现：</strong></p><ul><li>ArrayList：是动态数组的数据结构实现</li><li>LinkedList：是双向链表的数据结构实现</li></ul><p><strong>随机访问效率：</strong></p><p>ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储结构，每次访问的时间复杂度都是  O(n)</p><p><strong>删除和增加效率：</strong></p><p>在非首尾的增加和删除操作，LinkedList 比 ArrayList 效率高，因为 ArrayList 增加后删除操作要移动被操作位置以后的元素</p><p><strong>总结：</strong></p><p>频繁读取使用 ArrayList，频繁更改使用 LinkedList</p><h3 id="26-如何实现数组和-List-之间的转换？"><a href="#26-如何实现数组和-List-之间的转换？" class="headerlink" title="26. 如何实现数组和 List 之间的转换？"></a>26. 如何实现数组和 List 之间的转换？</h3><p>数组转 List：使用 <strong>Arrays.asList(array)</strong> 进行转化</p><p>List 转数组：使用 List 自带的 <strong>toArray()</strong> 方法</p><h3 id="27-ArrayList-和-Vector-的区别是什么？"><a href="#27-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="27.ArrayList 和 Vector 的区别是什么？"></a>27.ArrayList 和 Vector 的区别是什么？</h3><p><strong>线程安全：</strong></p><ul><li>Vector 使用了 Synchronized 来实现线程同步，线程是安全的</li><li>ArrayList 是非线程安全的</li></ul><p><strong>性能：</strong></p><p>ArrayList 性能要优于 Vector</p><p><strong>扩容：</strong></p><p>ArrayList 和 Vector 都会根据实际的需要动态调整容量，Vector 会增加 1 倍，ArrayList 会增加 50%</p><h3 id="28-Array-和-ArrayList-有什么区别？"><a href="#28-Array-和-ArrayList-有什么区别？" class="headerlink" title="28. Array 和 ArrayList 有什么区别？"></a>28. Array 和 ArrayList 有什么区别？</h3><p>Array 可以存储基本数据类型和对象，ArrayList 只能存储对象</p><p>Array 有固定大小，ArrayList 可以自动扩展</p><p>ArrayList 的内置方法比 Array 多</p><h3 id="29-在-Queue-中-poll-和-remove-有什么区别？"><a href="#29-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="29. 在 Queue 中 poll() 和 remove() 有什么区别？"></a>29. 在 Queue 中 poll() 和 remove() 有什么区别？</h3><p><strong>相同点：</strong>都是返回第一个元素，并在队列中删除返回的对象</p><p><strong>不同点：</strong>如果没有元素，remove() 会直接抛出 NoSuchElementException 异常，poll() 会返回 null</p><h3 id="30-哪些集合类是线程安全的？"><a href="#30-哪些集合类是线程安全的？" class="headerlink" title="30. 哪些集合类是线程安全的？"></a>30. 哪些集合类是线程安全的？</h3><p>线程安全：Vector，Hashtable，Stack</p><p>线程不安全：HashMap（在 JDK 1.5 后，Java.util.concurrent 并发包中有了对应的安全类 ConcurrentHashMap）</p><h3 id="31-迭代器-Iterator-是什么？"><a href="#31-迭代器-Iterator-是什么？" class="headerlink" title="31. 迭代器 Iterator 是什么？"></a>31. 迭代器 Iterator 是什么？</h3><p>Iterator 接口提供任何 Collection 的接口，可以从一个 Collection 中使用迭代器方法来获取迭代器实例</p><p>迭代器取代了 Java 集合框架中的 Enumeration，允许调用者在迭代过程中移除元素</p><h3 id="32-Iterator-怎么使用？有什么特点？"><a href="#32-Iterator-怎么使用？有什么特点？" class="headerlink" title="32. Iterator 怎么使用？有什么特点？"></a>32. Iterator 怎么使用？有什么特点？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    String obj = it.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：更加安全，可以确保在当前遍历的集合元素被更改的时候，会抛出 ConcurrentModificationException 异常</p><h3 id="33-Iterator-和-Listlterator"><a href="#33-Iterator-和-Listlterator" class="headerlink" title="33. Iterator 和 Listlterator"></a>33. Iterator 和 Listlterator</h3><ul><li>Iterator 可以遍历 Set 和 List 集合，ListIterator 只能遍历 List</li><li>Iterator 只能单向遍历，而 ListIterator 可以双向遍历</li><li>ListIterator 实现 Iterator，然后添加了一些额外的功能，比如添加，替换，获取前后节点索引</li></ul><h3 id="34-怎么确保一个集合不能被修改"><a href="#34-怎么确保一个集合不能被修改" class="headerlink" title="34. 怎么确保一个集合不能被修改"></a>34. 怎么确保一个集合不能被修改</h3><p>可以使用 Collection.unmodifiableCollection(Collection c) 方法来创建一个只读集合，一旦发生改变，就会抛出 Java.lang.UnsupportedOperationException 异常</p><h2 id="Java-多线程模块"><a href="#Java-多线程模块" class="headerlink" title="Java 多线程模块"></a>Java 多线程模块</h2><h3 id="35-并行和并发有什么区别？"><a href="#35-并行和并发有什么区别？" class="headerlink" title="35. 并行和并发有什么区别？"></a>35. 并行和并发有什么区别？</h3><p><strong>并行：</strong>多个处理器或多核处理器同时处理多个任务</p><p><strong>并发：</strong>多个任务在同一个 CPU 核上，按细分的时间片轮流执行，从逻辑上看是同时执行的</p><h3 id="36-线程和进程的区别？"><a href="#36-线程和进程的区别？" class="headerlink" title="36. 线程和进程的区别？"></a>36. 线程和进程的区别？</h3><p>一个程序至少有一个进程，一个进程下至少有一个线程，一个进程下也可以有多个线程来增加程序的执行速度</p><h3 id="37-守护线程是什么？"><a href="#37-守护线程是什么？" class="headerlink" title="37. 守护线程是什么？"></a>37. 守护线程是什么？</h3><p>守护线程是运行在后台的一种特殊进程，独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件</p><p>在 Java 中的垃圾回收线程就是特殊的守护线程</p><h3 id="38-线程有几种实现方式？"><a href="#38-线程有几种实现方式？" class="headerlink" title="38. 线程有几种实现方式？"></a>38. 线程有几种实现方式？</h3><ol><li>继承 Thread 类</li><li>实现 Runnable 接口</li><li>实现 Callable 接口，通过 FutureTask 包装器来创建 Thread 线程</li><li>通过线程池创建线程，使用线程池接口 ExecutorService 结合 Callable、Future 事件有返回结果的多线程</li></ol><p>前两种 <strong>无返回值</strong>：重写 run 方法，run 方法返回值 void</p><p>后两种 <strong>有返回值</strong>：通过 Callable 接口，要实现 call 方法，这个方法返回值为 Object，可以保存返回结果</p><h3 id="39-Runnable-和-Callable-有什么区别？"><a href="#39-Runnable-和-Callable-有什么区别？" class="headerlink" title="39. Runnable 和 Callable 有什么区别？"></a>39. Runnable 和 Callable 有什么区别？</h3><p>Runnable 没有返回值，Callable 有返回值，Callable 可以看作是 Runnable 的补充</p><h3 id="40-线程有哪些状态？"><a href="#40-线程有哪些状态？" class="headerlink" title="40. 线程有哪些状态？"></a>40. 线程有哪些状态？</h3><ol><li>初始：新创建了一个线程对象，但还没有调用 start() 方法</li><li>运行：Java 线程中将就绪（ready）和运行中（running）两种状态统称为 ”运行“，线程对象创建后，其他线程调用了该对象的 start() 方法，该对象的线程位于可运行线程池中，等待被线程调用选中，获取 CPU 资源，此时处于就绪状态（ready）。就绪状态的线程在获得 CPU 时间片后变为运行状态（running）</li><li>阻塞：表示线程阻塞于锁</li><li>等待：进入该状态的线程需要等待其他线程做出一些特定的动作（通知或中断）</li><li>超时等待：不同于 waiting，它可以在指定时间后自行返回</li><li>终止：表示该线程已经执行完毕</li></ol><h3 id="41-sleep-和-wait-有什么区别？"><a href="#41-sleep-和-wait-有什么区别？" class="headerlink" title="41. sleep() 和 wait() 有什么区别？"></a>41. sleep() 和 wait() 有什么区别？</h3><ul><li>类不同：sleep 来自Thread，wait 来自Object</li><li>释放锁：sleep 不释放锁，wait 释放锁</li><li>用法不同：sleep 时间到会自动回复，wait 可以使用 notify() 或 notifyAll() 直接唤醒</li></ul><h3 id="42-notify-和-notifyAll-有什么区别？"><a href="#42-notify-和-notifyAll-有什么区别？" class="headerlink" title="42. notify() 和 notifyAll() 有什么区别？"></a>42. notify() 和 notifyAll() 有什么区别？</h3><p>notifyAll() 会唤醒所有线程，notify() 只会唤醒一个线程</p><p>notifyAll() 调用后，会将全部线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，不成功则留在锁池等待锁被释放后重新竞争</p><p>notify() 只能唤醒一个线程，具体唤醒哪一个线程，由虚拟机控制</p><h3 id="43-线程的-run-和-start-有什么区别"><a href="#43-线程的-run-和-start-有什么区别" class="headerlink" title="43.线程的 run() 和 start() 有什么区别"></a>43.线程的 run() 和 start() 有什么区别</h3><p>start() 用于启动线程，run() 用于执行线程的运行时代码</p><p>run() 可以重复调用，而 start() 执行嗲用一次</p><h3 id="44-线程池创建方式"><a href="#44-线程池创建方式" class="headerlink" title="44. 线程池创建方式"></a>44. 线程池创建方式</h3><p>最核心的是最后一种：</p><ul><li>newSingleThreadExecutor()：它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目；</li><li>newCachedThreadPool()：它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列；</li><li>newFixedThreadPool(int nThreads)：重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads；</li><li>newSingleThreadScheduledExecutor()：创建单线程池，返回 ScheduledExecutorService，可以进行定时或周期性的工作调度；</li><li>newScheduledThreadPool(int corePoolSize)：和newSingleThreadScheduledExecutor()类似，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程；</li><li>newWorkStealingPool(int parallelism)：这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序；</li><li><strong>ThreadPoolExecutor()：是最原始的线程池创建，上面1-3创建方式都是对ThreadPoolExecutor的封装。</strong></li></ul><h3 id="45-线程池都有哪些状态"><a href="#45-线程池都有哪些状态" class="headerlink" title="45. 线程池都有哪些状态"></a>45. 线程池都有哪些状态</h3><ul><li>RUNNING：接收新任务，处理等待队列中的任务</li><li>SHUTDOWN：不接收新的任务提交，会处理继续等待队列中的任务</li><li>STOP：不接收新的任务提交，不再处理等待队列中的任务，中断正在执行的线程</li><li>TIDYING：所有任务都销毁了，workCount 为 0，线程池的状态转化为 TIDYING 时，会执行钩子方法 terminated()</li><li>TERMINATED：terminated() 方法结束后的状态</li></ul><h3 id="46-线程池中-submit-和-execute-方法有什么区别？"><a href="#46-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="46. 线程池中 submit() 和 execute() 方法有什么区别？"></a>46. 线程池中 submit() 和 execute() 方法有什么区别？</h3><ul><li>execute()：只能执行 Runnable 类型的任务</li><li>submit()：可以执行 Runnable 和 Callable 类型的任务</li></ul><h3 id="47-在-Java-程序中怎么保证多线程的运行安全？"><a href="#47-在-Java-程序中怎么保证多线程的运行安全？" class="headerlink" title="47. 在 Java 程序中怎么保证多线程的运行安全？"></a>47. 在 Java 程序中怎么保证多线程的运行安全？</h3><ol><li>使用安全类，java.util.concurrent 的类</li><li>使用自动锁 synchronized</li><li>使用手动锁 Lock</li></ol><h3 id="48-多线程中-synchronized-锁升级的原理是什么？"><a href="#48-多线程中-synchronized-锁升级的原理是什么？" class="headerlink" title="48. 多线程中 synchronized 锁升级的原理是什么？"></a>48. 多线程中 synchronized 锁升级的原理是什么？</h3><p>synchronized 锁升级原理：在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，jvm 让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级。</p><p><strong>锁的升级的目的：</strong>锁升级是为了减低了锁带来的性能消耗。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。</p><h3 id="49-什么是死锁？"><a href="#49-什么是死锁？" class="headerlink" title="49. 什么是死锁？"></a>49. 什么是死锁？</h3><p>当线程 A 独占锁 a，并尝试去获取独占锁 b 的同时，线程 B 独占锁 b，并尝试获取独占锁 a 的情况，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象</p><h3 id="50-怎么防止死锁？"><a href="#50-怎么防止死锁？" class="headerlink" title="50. 怎么防止死锁？"></a>50. 怎么防止死锁？</h3><ul><li>尽量使用 tryLock(long timeout, TimeUnit unit) 的方法（ReentrantLock、ReetrantReadWriteLock），设置超时时间，超时可以退出防止死锁</li><li>尽量使用 Java.util.concurrent 并发类代替自己手写锁</li><li>尽量降低锁的使用力度</li><li>尽量不要几个功能使用同一把锁</li><li>尽量减少同步代码块</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Java 基础模块&lt;/li&gt;
&lt;li&gt;Java 容器模块&lt;/li&gt;
&lt;li&gt;Java多线程模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题库来源于 &lt;a href=&quot;https://www.javazhiyin.com/42272.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java知音&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="面试" scheme="https://www.chentyit.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点day02(常用关键字)</title>
    <link href="https://www.chentyit.com/2019/09/19/Java%E7%9F%A5%E8%AF%86%E7%82%B9day02-%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://www.chentyit.com/2019/09/19/Java知识点day02-常用关键字/</id>
    <published>2019-09-19T12:05:49.000Z</published>
    <updated>2019-09-19T14:50:00.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="修饰："><a href="#修饰：" class="headerlink" title="修饰："></a>修饰：</h3><p>类的变量，方法，方法块</p><ul><li><strong>修饰变量时：</strong>如果该变量时 public 时，则可以使用 <strong>类名.修饰变量名</strong> 调用该变量，static 修饰的变量可能会有线程安全的问题，当 static 修饰了共享的变量，在现场交互中就有可能造成安全问题，解决办法：<ol><li>将被修饰的对象换成线程安全的对象</li><li>手动加锁</li></ol></li><li><strong>修饰方法时：</strong>表示该方法与类无关，任何类都可以直接访问，但是被 static 修饰的方法只能调用被 static 修饰的变量，static 修饰的方法没有线程问题，方法中的局部变量保存在栈中，每个栈都是隔离的，不会有问题</li><li><strong>修饰方法块：</strong>静态代码块，加载 .class 到内存中的时候，先初始化 static 的代码块，常常用于初始化一些值</li></ul><h3 id="父类和子类加载顺序："><a href="#父类和子类加载顺序：" class="headerlink" title="父类和子类加载顺序："></a>父类和子类加载顺序：</h3><ol><li>父类静态变量初始化</li><li>父类静态代码块初始化</li><li>子类静态变量初始化</li><li>子类静态代码块初始化</li><li>父类构造方法</li><li>子类构造方法</li></ol><h3 id="规律："><a href="#规律：" class="headerlink" title="规律："></a>规律：</h3><ul><li><strong>父类的静态变量和静态代码块比子类优先初始化</strong></li><li><strong>静态变量和静态代码块比类构造器优先初始化</strong></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>定义：不变的，不可改变的</p><h3 id="修饰：-1"><a href="#修饰：-1" class="headerlink" title="修饰："></a>修饰：</h3><ul><li><strong>类：</strong>表示该类是无法被继承的</li><li><strong>方法：</strong>表示该方法是无法被重写（Override）</li><li><strong>变量：</strong>内存地址不可改变，且在声明的时候初始化就必须要完成</li></ul><p>被 final 的修饰的对象，对象的内存地址不可以更改，但是对象中的内容可以更改</p><h2 id="try-amp-catch-amp-finally"><a href="#try-amp-catch-amp-finally" class="headerlink" title="try &amp; catch &amp; finally"></a>try &amp; catch &amp; finally</h2><p>用于捕捉异常的一套流程</p><ul><li>try：用来确定代码指定的范围</li><li>catch：捕捉可能有可能会发生的异常</li><li>finally：用来执行一定要执行的代码块，无论有没有异常发生，总要执行 finally 语句，为程序提供了一个统一的出口，使程序能正常退出</li></ul><p>如果 catch 中发生了异常，finally 还会继续执行，finally 中的代码执行完成后，才会抛出 catch 中的异常</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>用来修饰某个共享变量，意思是当前共享变量的值被修改后，会及时通知到其他线程上，其他线程就能知道当前共享的变量已经被修改了</p><h2 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h2><p>用来修饰类变量，意思是当前变量是无需进行序列化的，在序列化时，就会忽略该变量</p><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><p>一般用在接口的方法上，意思是对于该接口，实现类无需强制实现，但自己必须有默认实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;static&lt;/h2&gt;&lt;h3 id=&quot;修饰：&quot;&gt;&lt;a href=&quot;#修饰：&quot; class=&quot;headerlink&quot; title=&quot;修饰：
      
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="面试" scheme="https://www.chentyit.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点day01(String &amp; Long)</title>
    <link href="https://www.chentyit.com/2019/09/18/Java%E7%9F%A5%E8%AF%86%E7%82%B9day01-String-Long/"/>
    <id>https://www.chentyit.com/2019/09/18/Java知识点day01-String-Long/</id>
    <published>2019-09-18T12:20:36.000Z</published>
    <updated>2019-09-20T07:48:35.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h3><p><strong>源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![second_hello](D:\Blog\myblog\source\_posts\Java知识点day01-String-Long\second_hello.png)![second_hello](D:\Blog\myblog\source\_posts\Java知识点day01-String-Long\second_hello.png)<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"hello"</span>;</span><br><span class="line">    str = <span class="string">"hello"</span>;</span><br><span class="line">    str = <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次 hello</p><p><img src="/2019/09/18/Java知识点day01-String-Long/first_hello.png" alt="first_hello"></p><p>第二次 hello</p><p><img src="/2019/09/18/Java知识点day01-String-Long/second_hello.png" alt="second_hello"></p><p>第三次 world</p><p><img src="/2019/09/18/Java知识点day01-String-Long/third_world.png" alt="third_world"></p><p>可以看出，str 对象并没有变化，但是指向的内存地址改变了</p><p><strong>原因</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>String 类被 <strong>final 修饰</strong>，不可以被继承</li><li>value[] 也被 final 修饰，说明这个是一个常量数组，一旦被赋值，<strong>内存地址</strong>就不可以再修改</li><li>value[] 被声明为<strong>私有属性</strong>，外部无法访问到，也没有 set / get 方法</li></ol><p>所以针对于当前 String 的对象锁做的操作都是无法影响到 value[]，也就是当前对象指向的那个值，比如 replace，split，substring 等等都无法影响到当前值，只有把生成的新值返回给对象才会有效（其实是在字符串常量池中重新生成了一个新的字符串而已，原来的字符串也还在）</p><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p><strong>原因</strong></p><ol><li>当前所用的编码集不包含当前语言的编码</li><li>二进制转化操作时，并没有强制规定字符编码</li></ol><h3 id="相等判断"><a href="#相等判断" class="headerlink" title="相等判断"></a>相等判断</h3><p><strong>源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先判断两个对象的地址是否相同，相同直接返回 true，否则继续判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断另一个对象到底是不是字符串</span></span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="comment">// 转化为字符串类型</span></span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="comment">// 判断两个字符串的长度</span></span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 字符串长度相等就一个一个的判断字符串中每个字符是否相等</span></span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>建议使用谷歌的第三方工具包 Guava，里面提供了一系列方法，操作类似于 Scala 语言，不过多说明</p><h2 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h2><p>Long 类型有缓存，他实现了一种缓存机制，缓存了从 -128 到 127 内所有的 Lang 值，也就是说如果使用这个范围内的值，直接冲缓存中拿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LongCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LongCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存，范围从 -128 到 127，+1 是因为还有 0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Long cache[] = <span class="keyword">new</span> Long[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，Jvm 加载类的时候优先初始化这部分代码</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Long(i - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Long 时，推荐使用 ValueOf 方法，因为 ValueOf 会从缓存中去拿，如果命中缓存，会减小资源的开销</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h2&gt;&lt;h3 id=&quot;不变性&quot;&gt;&lt;a href=&quot;#不变性&quot; class=&quot;headerlink&quot; title=&quot;不变性
      
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="面试" scheme="https://www.chentyit.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper安装和Hadoop安装</title>
    <link href="https://www.chentyit.com/2019/09/15/Zookeeper%E5%AE%89%E8%A3%85%E5%92%8CHadoop%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/09/15/Zookeeper安装和Hadoop安装/</id>
    <published>2019-09-15T03:44:51.000Z</published>
    <updated>2019-09-15T03:51:13.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper-安装"><a href="#Zookeeper-安装" class="headerlink" title="Zookeeper 安装"></a>Zookeeper 安装</h2><p><strong>关闭防火墙！！！</strong></p><h3 id="下载-JDK-1-8-版本"><a href="#下载-JDK-1-8-版本" class="headerlink" title="下载 JDK 1.8 版本"></a>下载 JDK 1.8 版本</h3><h3 id="下载-Zookeeper-安装包"><a href="#下载-Zookeeper-安装包" class="headerlink" title="下载 Zookeeper 安装包"></a>下载 Zookeeper 安装包</h3><p><a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">下载链接</a></p><h3 id="解压到-Linux-的路径下（一般是-usr-local-）"><a href="#解压到-Linux-的路径下（一般是-usr-local-）" class="headerlink" title="解压到 Linux 的路径下（一般是 /usr/local ）"></a>解压到 Linux 的路径下（一般是 /usr/local ）</h3><h3 id="配置-Linux-环境变量"><a href="#配置-Linux-环境变量" class="headerlink" title="配置 Linux 环境变量"></a>配置 Linux 环境变量</h3><p>配置 JAVA_HOME 和 ZOOKEERER_HOME</p><h3 id="配置-Zookeeper-单节点"><a href="#配置-Zookeeper-单节点" class="headerlink" title="配置  Zookeeper 单节点"></a>配置  Zookeeper 单节点</h3><ol><li><p>在 zookeeper 文件夹下创建 data 文件夹和 logs 文件夹，用于存放数据和日志</p></li><li><p>进入 conf 中，将 zoo_sample.cfg 复制一份并重命名为 zoo.cfg</p></li><li><p>配置 zoo.fg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataLogDir=/usr/local/zookeeper*/logs</span><br><span class="line">dataDir=/usr/local/zookeeper*/data</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure></li><li><p>配置完成后即可开启单节点模式</p></li></ol><h3 id="配置-Zookeeper-多节点模式（分布式）"><a href="#配置-Zookeeper-多节点模式（分布式）" class="headerlink" title="配置 Zookeeper 多节点模式（分布式）"></a>配置 Zookeeper 多节点模式（分布式）</h3><ol><li><p>先多搞几台虚拟机（具体多少台开心就好，最好 3 台起步，之后用 scp 复制文件到其他虚拟机）</p></li><li><p>配置 hosts 文件</p></li><li><p>配置 ssh 免密登录</p></li><li><p>给所有虚拟机搞上 JDK 和 Zookeeper</p></li><li><p>每台虚拟机的 Zookeeper 的目录下创建 data 和 logs 目录</p></li><li><p>配置 zoo.cfg（和单节点一样搞出来的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line"><span class="meta">#</span> 主机名、心跳端口、数据端口</span><br><span class="line">server.1=zoo1:2888:3888</span><br><span class="line">server.2=zoo2:2888:3888</span><br><span class="line">server.3=zoo3:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>给每个节点加上 myid（myid 是放到 zookeeper 配置的 dataDir 的路径下的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iweb5 ： echo '1'&gt;/usr/local/zookeeper/data/myid</span><br><span class="line">iweb6 ： echo '2'&gt;/usr/local/zookeeper/data/myid</span><br><span class="line">iweb7 ： echo '3'&gt;/usr/local/zookeeper/data/myid</span><br></pre></td></tr></table></figure></li><li><p>最后就可以启动集群了</p></li></ol><h2 id="Hadoop-安装"><a href="#Hadoop-安装" class="headerlink" title="Hadoop 安装"></a>Hadoop 安装</h2><p><strong>关闭防火墙！！！</strong></p><p>这玩意儿环境配置老费劲了</p><p>直接跳过单节点模式，要是 hadoop 玩单节点就没有必要搞集群了</p><p><strong>PS：</strong>Hadoop 是在 Zookeeper 环境配置好了的基础上安装的</p><h3 id="JDK-环境变量-SSH-免密-hosts-文件配置"><a href="#JDK-环境变量-SSH-免密-hosts-文件配置" class="headerlink" title="JDK || 环境变量 || SSH 免密 || hosts 文件配置"></a>JDK || 环境变量 || SSH 免密 || hosts 文件配置</h3><p>这里要把 HADOOP_HOME 配置进去，添加到 PATH 里面的时候要把 /bin 和 /sbin 都配置进去</p><h3 id="架设虚拟机（实验用的两台，加上-Zookeeper-一共-5-台）"><a href="#架设虚拟机（实验用的两台，加上-Zookeeper-一共-5-台）" class="headerlink" title="架设虚拟机（实验用的两台，加上 Zookeeper 一共 5 台）"></a>架设虚拟机（实验用的两台，加上 Zookeeper 一共 5 台）</h3><h3 id="开始配置-Hadoop"><a href="#开始配置-Hadoop" class="headerlink" title="开始配置 Hadoop"></a>开始配置 Hadoop</h3><ol><li><p>先配置 hadoop*/etc/hadoop/hadoop-env.sh，将里面的 ${JAVA_HOME} 改成当前 JAVA_HOME 的路径</p></li><li><p>配置 hadoop*/etc/hadoop/core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hdfs的ns为ns --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultF S<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop临时目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-2.8.4/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定zookeeper地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata1:2181,bigdata2:2181,bigdata3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 hadoop*/etc/hadoop/hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定HDFS副本的数量默认3个 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定hdfs的nameservices为ns，需要和core-site.xml中的保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ns下面有两个NameNode，分别是nn1，nn2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata5:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode-1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata5:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode-2的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata6:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode-2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata6:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://bigdata1:8485;bigdata2:8485;bigdata3:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-2.8.4/journaldata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            sshfence</span><br><span class="line">            shell(/bin/true)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 hadoop*/etc/hadoop/mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mr框架为yarn方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 hadoop*/etc/hadoop/yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启RM高可用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的cluster id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yrc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的名字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分别指定RM的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定zk集群地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata1:2181,bigdata2:2181,bigdata3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h3><p>通过 scp 命令将 hadoop*/ 发送给所有主机</p><h3 id="集群启动准备工作（所有命令官方文档都有）"><a href="#集群启动准备工作（所有命令官方文档都有）" class="headerlink" title="集群启动准备工作（所有命令官方文档都有）"></a>集群启动准备工作（所有命令官方文档都有）</h3><ol><li><p>在 Zookeeper 的主机上启动 journalnode</p><p>（这里我必须要说一句，一定要先启动 journalnode，我就是忘记要启动 journalnode，最后耗费了我一个多小时才启动成功）</p></li><li><p>格式化 namenode （在 active 主机上执行）</p><p>hdfs namenode -format</p></li><li><p>格式化 zkfc（在 active 主机上执行）</p><p>hdfs zkfc -formatZK</p></li><li><p>启动 active 上的 namenode</p><p>hadoop-daemon.sh start namenode</p></li><li><p>在 standby 执行</p><p>hdfs namenode -bootstrapStandby</p></li><li><p>手动启动以下程序</p><p>[ hdfs ]</p><ul><li>namenode</li><li>zkfc</li><li>datanode</li></ul><p>[ yarn ]</p><ul><li>resourcemanager</li><li>nodemanager</li></ul></li><li><p>启动 Web 客户端查看信息</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Zookeeper-安装&quot;&gt;&lt;a href=&quot;#Zookeeper-安装&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper 安装&quot;&gt;&lt;/a&gt;Zookeeper 安装&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关闭防火墙！！！&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Zookeeper" scheme="https://www.chentyit.com/tags/Zookeeper/"/>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper概念</title>
    <link href="https://www.chentyit.com/2019/09/15/Zookeeper%E6%A6%82%E5%BF%B5/"/>
    <id>https://www.chentyit.com/2019/09/15/Zookeeper概念/</id>
    <published>2019-09-15T03:44:26.000Z</published>
    <updated>2019-09-15T03:49:18.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分布式协调服务，为其他的分布式程序提供协调服务</p><p>本身就是分布式程序</p><p>提供的服务包含：</p><ul><li>主从协调</li><li>服务器节点动态上下线</li><li>统一配置管理</li><li>分布式共享锁</li><li>统一名称服务</li></ul><p>底层其实只包含两层服务</p><ul><li><strong>管理</strong>（存储和读取）用户程序提交的<strong>数据</strong></li><li>为用户程序<strong>提供</strong>数据节点<strong>监听服务</strong></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>一个 leader，多个 follower 组成的集群</li><li>全局数据一致：每个 ZK 服务器的数据都是一致的，无论哪个客户端连接到 ZK，获得的数据都是一样的</li><li>分布式读写：更新请求转发，由 leader 实施</li><li>顺序执行：来自同一个客户的更新请求按照发送顺序执行</li><li>数据更新原子性：要么成功，要么失败</li><li>实时性：在一定时间范围内，客户端能得到最新的数据</li></ol><p><img src="/2019/09/15/Zookeeper概念/zkservice.jpg" alt="zkservice"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li>层次化结构，和文件系统差不多</li><li>每个节点叫做 znode，并且有唯一路径标识</li><li>每个 znode 可以包含数据和子节点（EPHEMERAL 不能有子节点，因为是短暂节点，连接断开后悔自己删除）</li><li>客户端可以在节点上设置监视器</li></ol><h2 id="Znode-节点类型"><a href="#Znode-节点类型" class="headerlink" title="Znode 节点类型"></a>Znode 节点类型</h2><ul><li>有两种节点类型<ol><li>短暂（EPHEMERAL）断开连接自己删除</li><li>持久（PERSISTENT）断开连接不删除</li></ol></li><li>org.apache.zookeeper.CreateMode中定义了<strong>四种节点类型</strong><ol><li>PERSISTENT：永久节点</li><li>EPHEMERAL：临时节点</li><li>PERSISTENT_SEQUENTIAL：永久节点、序列化</li><li>EPHEMERAL_SEQUENTIAL：临时节点、序列化</li></ol></li><li>创建 znode 是设置顺序表示，znode 名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护，设置顺序是为了对所有事件进行全局排序，客户端就可以通过顺序推断事件的顺序</li></ul><h2 id="分布式共享锁"><a href="#分布式共享锁" class="headerlink" title="分布式共享锁"></a>分布式共享锁</h2><p><strong>作用：</strong>做到一次只有指定个数的客户端访问服务器的某些资源</p><p>实现步骤：</p><ol><li>客户端上线就向 ZK 注册，创建一把锁</li><li>判断是否只有一个客户端在工作，是则该客户端处理业务</li><li>获取父节点下注册的所有锁，判断自己是否是注册号码最小的，是则处理业务</li></ol><p><strong>当业务处理完成后必须要释放锁</strong></p><h2 id="ZooKeeper-中的时间"><a href="#ZooKeeper-中的时间" class="headerlink" title="ZooKeeper 中的时间"></a>ZooKeeper 中的时间</h2><ul><li><p>Zxid</p><p>致使 ZooKeeper 节点状态改变的每一个操作都将使节点接收到一个 zxid 格式的时间戳，并且<strong>这个时间戳全局有序</strong>。</p><ul><li>cZxid：是节点的<strong>创建时间</strong>所对应的 Zxid 格式时间戳。</li><li>mZxid：是节点的<strong>修改时间</strong>所对应的 Zxid 格式时间戳，与其子节点无关。</li><li>pZxid：<strong>该节点的子节点</strong>（或该节点）的最近一次 创建 / 删除 的修改时间所对应的 cZxid 格式时间戳（注：只与 本节点 / 该节点的子节点，有关；<strong>与孙子节点无关</strong></li></ul></li><li><p>版本号</p><p>对节点的每一个操作都将致使这个节点的版本号增加。每个节点维护着三个版本号，他们分别为：</p><ul><li>version 节点数据版本号</li><li>cversion 子节点版本号</li><li>aversion 节点所拥有的 ACL 版本号</li></ul></li></ul><h2 id="Zookeeper-投票机制"><a href="#Zookeeper-投票机制" class="headerlink" title="Zookeeper 投票机制"></a>Zookeeper 投票机制</h2><p>用例子比较直观（配置 3 台机器）：</p><p>每台机器的 “票” 结构：（myid，zxid）</p><ul><li><p>情况一</p><p>T1（1，0）    T2（2，0）    T3（3，0）</p><p>T1 启动给自己投一票</p><p>T2 启动给自己投一票，收到 T1 的票，并将自己的票发给 T1</p><p>—— 判断（如果 zxid 相同，则 myid 大的作为 leader）T2 作为 leader</p><p>T3 启动已经有 leader 了，不再参与选举直接指定 T2 作为leader</p></li><li><p>情况二</p><p>T1 （1，3）    T2（2，10）    T3（3，5）</p><p>T2 作为 leader 然后嗝屁了</p><p>T1 和 T3 选举</p><p>—— 判断（如果 zxid 不同，则直接判断 zxid，和 myid 无关）T3 作为 leader</p><p>T2 重新上线后由于 T3 已经是 leader，直接指定 T3 为 leader</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;分布式协调服务，为其他的分布式程序提供协调服务&lt;/p&gt;
&lt;p&gt;本身就是分布式程序&lt;/p&gt;
&lt;p&gt;提供的服务包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Zookeeper" scheme="https://www.chentyit.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus高级操作</title>
    <link href="https://www.chentyit.com/2019/09/11/MyBatis-Plus%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.chentyit.com/2019/09/11/MyBatis-Plus高级操作/</id>
    <published>2019-09-11T01:12:02.000Z</published>
    <updated>2019-09-11T07:25:59.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐视频"><a href="#推荐视频" class="headerlink" title="推荐视频"></a>推荐视频</h2><p><a href="https://www.imooc.com/learn/1130" target="_blank" rel="noopener">MyBatis 入门教程</a></p><p><a href="https://www.imooc.com/learn/1171" target="_blank" rel="noopener">MyBatis 进阶教程</a></p><a id="more"></a><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>修改某一行的数据中的某一列的标志值，用值来表示是否已经 <strong>“逻辑删除”</strong> 并不是真的在表中真正的删除这条数据</p><ol><li><p>先在 application.yml 中配置标志值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">  global-config:</span></span><br><span class="line"><span class="attr">    db-config:</span></span><br><span class="line">      <span class="comment"># 未删除的值</span></span><br><span class="line"><span class="attr">      logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 已删除的值</span></span><br><span class="line"><span class="attr">      logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置类 MyBatisPlusConfiguration.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 mybatis-plus 3.1.0 以上的版本中不再需要添加这一步</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在实体类中添加注解 @TableLogic</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user_pro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Long managerId;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, value = <span class="string">"deleted"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>这些方法在使用的时候都会自己在后面添加一个 and deleted = 0，表示只操作删除标志位为 0（未删除） 的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.mp2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.chentyit.mp2.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.chentyit.mp2.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 09:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogicDelete</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会把删除标志位置 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = userMapper.deleteById(<span class="number">1094592041087729666L</span>);</span><br><span class="line">        System.out.println(<span class="string">"影响行数："</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只查询出删除标志位为 0 的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只更新标志位为 0 的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">26</span>);</span><br><span class="line">        user.setId(<span class="number">1088248166370832385L</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">"影响行数："</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p>自动填充值以及一些额外的数据</p><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>先在实体类中添加注解 @TableField(fill = FieldFill.INSERT) 和 @TableField(fill = FieldFill.UPDATE)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user_pro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long managerId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField</span>(select = <span class="keyword">false</span>, value = <span class="string">"deleted"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现 MetaObjectHandler 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 10:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的时候填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断数据库中是否有这个列</span></span><br><span class="line">        <span class="keyword">boolean</span> hasSetter = metaObject.hasSetter(<span class="string">"createTime1"</span>);</span><br><span class="line">        <span class="comment">// 如果有就向这个列插入数据</span></span><br><span class="line">        <span class="comment">// 如果没有就不插</span></span><br><span class="line">        <span class="keyword">if</span> (hasSetter) &#123;</span><br><span class="line">            setInsertFieldValByName(<span class="string">"createTime"</span>, LocalDateTime.now(), metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在更新的时候填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否已经设置了值</span></span><br><span class="line">        Object val = getFieldValByName(<span class="string">"updateTime"</span>, metaObject);</span><br><span class="line">        <span class="comment">// 如果设置了就不进行自动填充</span></span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            setUpdateFieldValByName(<span class="string">"updateTime"</span>, LocalDateTime.now(), metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FillTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"陈天翼"</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line">        user.setEmail(<span class="string">"chentyit@qq.com"</span>);</span><br><span class="line">        user.setManagerId(<span class="number">1088248166370832385L</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"影响行数："</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">27</span>);</span><br><span class="line">        user.setId(<span class="number">1171615225418350594L</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"影响行数："</span> + rows);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a>乐观锁插件</h2><p>（注：多写的情况下使用悲观锁，多读的场景使用乐观锁）</p><h3 id="介绍：-2"><a href="#介绍：-2" class="headerlink" title="介绍："></a>介绍：</h3><p>取出记录时，获取当前 version</p><p>更新时，带上这个 version</p><p>版本正确更新成功，错误更新失败</p><h3 id="使用：-1"><a href="#使用：-1" class="headerlink" title="使用："></a>使用：</h3><ol><li><p>添加插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加乐观锁插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在实体类中的版本属性上面添加 @Verison</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user_pro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ****</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ****</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 11:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果使用条件构造器 则添加构造器不能复用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> version = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setEmail(<span class="string">"chentyit2@qq.com"</span>);</span><br><span class="line">        user.setId(<span class="number">1171617683297271809L</span>);</span><br><span class="line">        user.setVersion(version);</span><br><span class="line">        <span class="keyword">int</span> rows = userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"影响行数："</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><h3 id="介绍：-3"><a href="#介绍：-3" class="headerlink" title="介绍："></a>介绍：</h3><p>输出每条 SQL 语句的执行时间，只在测试和开发环境使用，因为开销很大</p><h3 id="使用：-2"><a href="#使用：-2" class="headerlink" title="使用："></a>使用：</h3><ol><li><p>在配置类中添加性能分析插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ******</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加性能分析插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>, <span class="string">"test"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        <span class="comment">// 格式化 SQL 语句</span></span><br><span class="line">        performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置执行最大时间</span></span><br><span class="line">        performanceInterceptor.setMaxTime(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 JVM 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示使用开发环境</span></span><br><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure></li></ol><h3 id="执行-SQL-分析打印"><a href="#执行-SQL-分析打印" class="headerlink" title="执行 SQL 分析打印"></a>执行 SQL 分析打印</h3><ol><li><p>先添加依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">jdbc:p6spy:mysql://127.0.0.1:3306/mp?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件 spy.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.log=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><br><span class="line"># 自定义日志打印</span><br><span class="line">logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span><br><span class="line"># 日志输出到控制台</span><br><span class="line">appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><br><span class="line"># 使用日志系统记录 sql</span><br><span class="line">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span><br><span class="line"># 设置 p6spy driver 代理</span><br><span class="line">deregisterdrivers=true</span><br><span class="line"># 取消JDBC URL前缀</span><br><span class="line">useprefix=true</span><br><span class="line"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span><br><span class="line">excludecategories=info,debug,result,batch,resultset</span><br><span class="line"># 日期格式</span><br><span class="line">dateformat=yyyy-MM-dd HH:mm:ss</span><br><span class="line"># 实际驱动可多个</span><br><span class="line">#driverlist=org.h2.Driver</span><br><span class="line"># 是否开启慢SQL记录</span><br><span class="line">outagedetection=true</span><br><span class="line"># 慢SQL记录标准 2 秒</span><br><span class="line">outagedetectioninterval=2</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改日志输出路径"><a href="#修改日志输出路径" class="headerlink" title="修改日志输出路径"></a>修改日志输出路径</h3><ol><li><p>先修改配置文件 spy.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 日志输出到控制台</span><br><span class="line"># appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><br></pre></td></tr></table></figure></li><li><p>再添加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logfile=log.log</span><br></pre></td></tr></table></figure></li></ol><p>日志就会打印到 log.log 文件里面了</p><h2 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h2><h3 id="介绍：-4"><a href="#介绍：-4" class="headerlink" title="介绍："></a>介绍：</h3><p>多个用户间使用同一套程序，但每个用户之间实现数据隔离</p><h3 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>添加分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 09:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **********</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TenantSqlParser tenantSqlParser = <span class="keyword">new</span> TenantSqlParser();</span><br><span class="line">        tenantSqlParser.setTenantHandler(<span class="keyword">new</span> TenantHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 添加租户信息的值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Expression <span class="title">getTenantId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LongValue(<span class="number">1088248166370832385L</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 哪个字段添加信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTenantIdColumn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"manager_id"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 是否向某个表中添加租户信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> true 表示过滤掉，不增加； false 表示不过滤，添加租户信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doTableFilter</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"user_pro"</span>.equals(tableName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        sqlParserList.add(tenantSqlParser);</span><br><span class="line">        paginationInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特定-SQL-过滤"><a href="#特定-SQL-过滤" class="headerlink" title="特定 SQL 过滤"></a>特定 SQL 过滤</h3><ul><li><p>方法一：在上面的代码中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">paginationInterceptor.setSqlParserFilter(<span class="keyword">new</span> ISqlParserFilter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否执行过滤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> false 代表不增加过滤信息；true 代表增加过滤信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        MappedStatement ms = SqlParserHelper.getMappedStatement(metaObject);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"cn.chentyit.mp2.dao.UserMapper.selectById"</span>.equals(ms.getId())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>方法二：在 Mapper 的自定义方法上添加注解 @SqlParser(filter = true)，在查询的时候不需要添加租户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 09:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SqlParser</span>(filter = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_pro $&#123;ew.customSqlSegment&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">mySelectList</span><span class="params">(@Param(Constants.WRAPPER)</span>Wrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="动态表名-SQL-解析器"><a href="#动态表名-SQL-解析器" class="headerlink" title="动态表名 SQL 解析器"></a>动态表名 SQL 解析器</h2><h3 id="介绍：-5"><a href="#介绍：-5" class="headerlink" title="介绍："></a>介绍：</h3><p>分表存储</p><h3 id="使用：-3"><a href="#使用：-3" class="headerlink" title="使用："></a>使用：</h3><ol><li><p>添加动态表名插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 09:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; myTableName = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ******************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置动态表名</span></span><br><span class="line">        DynamicTableNameParser dynamicTableNameParser =  <span class="keyword">new</span> DynamicTableNameParser();</span><br><span class="line">        Map&lt;String, ITableNameHandler&gt; tableNameHandlerMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">// 返回值为 MyBatisPlusConfiguration.myTableName.set("user_2019"); 设置的表名</span></span><br><span class="line">        tableNameHandlerMap.put(<span class="string">"user_pro"</span>, (metaObject, sql, tableName) -&gt; myTableName.get());</span><br><span class="line">        dynamicTableNameParser.setTableNameHandlerMap(tableNameHandlerMap);</span><br><span class="line">        sqlParserList.add(dynamicTableNameParser);</span><br><span class="line"></span><br><span class="line">        paginationInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line">        paginationInterceptor.setSqlParserFilter(<span class="keyword">new</span> ISqlParserFilter() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 是否执行过滤</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> false 代表不增加过滤信息；true 代表增加过滤信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">                MappedStatement ms = SqlParserHelper.getMappedStatement(metaObject);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"cn.chentyit.mp2.dao.UserMapper.selectById"</span>.equals(ms.getId())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在代码中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置表名</span></span><br><span class="line">    MyBatisPlusConfiguration.myTableName.set(<span class="string">"user_2019"</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SQL-注入器"><a href="#SQL-注入器" class="headerlink" title="SQL 注入器"></a>SQL 注入器</h2><h3 id="介绍：-6"><a href="#介绍：-6" class="headerlink" title="介绍："></a>介绍：</h3><p>自定义 SQL</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>创建定义方法的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteAllMethod</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定的 SQL</span></span><br><span class="line">        String sql = <span class="string">"delete from "</span> + tableInfo.getTableName();</span><br><span class="line">        <span class="comment">// mapper 接口方法名</span></span><br><span class="line">        String method = <span class="string">"deleteAll"</span>;</span><br><span class="line"></span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> addDeleteMappedStatement(mapperClass, method, sqlSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建注入器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 14:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="keyword">super</span>.getMethodList(mapperClass);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> DeleteAllMethod());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Mapper 中加入自定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 15:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Chentyit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/9/11 09:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SqlParser</span>(filter = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_pro $&#123;ew.customSqlSegment&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">mySelectList</span><span class="params">(@Param(Constants.WRAPPER)</span>Wrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐视频&quot;&gt;&lt;a href=&quot;#推荐视频&quot; class=&quot;headerlink&quot; title=&quot;推荐视频&quot;&gt;&lt;/a&gt;推荐视频&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/learn/1130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis 入门教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/learn/1171&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis 进阶教程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="MyBatis-Plus" scheme="https://www.chentyit.com/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Scala 操作外部数据</title>
    <link href="https://www.chentyit.com/2019/09/10/Scala-%E6%93%8D%E4%BD%9C%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE/"/>
    <id>https://www.chentyit.com/2019/09/10/Scala-操作外部数据/</id>
    <published>2019-09-10T11:48:17.000Z</published>
    <updated>2019-09-10T12:05:28.104Z</updated>
    
    <content type="html"><![CDATA[<ul><li>操作文件 &amp;&amp; 网络数据</li><li>操作XML</li><li>操作 MySQL</li></ul><a id="more"></a><h2 id="操作文件-amp-amp-网络数据"><a href="#操作文件-amp-amp-网络数据" class="headerlink" title="操作文件 &amp;&amp; 网络数据"></a>操作文件 &amp;&amp; 网络数据</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter09</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> file = <span class="type">Source</span>.fromFile(<span class="string">"E:\\test\\data.txt"</span>)(scala.io.<span class="type">Codec</span>.<span class="type">UTF8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按行读</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">readLine</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">for</span> (line &lt;- file.getLines()) &#123;</span><br><span class="line">                println(line)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//    readLine()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照字符读</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">readChar</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">for</span> (ele &lt;- file) &#123;</span><br><span class="line">                println(ele)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// readChar()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取网络文件</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">readNet</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">val</span> file = <span class="type">Source</span>.fromURL(<span class="string">"http://www.chentyit.com"</span>)</span><br><span class="line">            <span class="keyword">for</span> (line &lt;- file.getLines()) &#123;</span><br><span class="line">                println(line)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        readNet()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作XML"><a href="#操作XML" class="headerlink" title="操作XML"></a>操作XML</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">symbols</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">ticker</span>=<span class="string">"AAPL"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">units</span>&gt;</span>200<span class="tag">&lt;/<span class="name">units</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">units</span>&gt;</span>200<span class="tag">&lt;/<span class="name">units</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">ticker</span>=<span class="string">"IBM"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">units</span>&gt;</span>400<span class="tag">&lt;/<span class="name">units</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">symbols</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XMLApp.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter09</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">FileInputStream</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.xml.<span class="type">XML</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">XMLApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadXML</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">//    val xml = XML.load(this.getClass.getClassLoader.getResource("test.xml"))</span></span><br><span class="line">        <span class="comment">//    println(xml)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    val xml = XML.load(new FileInputStream("E:\\Program\\IDEA-workplace\\Scala\\scalatrain\\src\\main\\resources\\test.xml"))</span></span><br><span class="line">        <span class="comment">//    print(xml)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> xml = <span class="type">XML</span>.load(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="string">"E:\\Program\\IDEA-workplace\\Scala\\scalatrain\\src\\main\\resources\\test.xml"</span>)))</span><br><span class="line">        print(xml)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        loadXML()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>pk.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fix</span> <span class="attr">major</span>=<span class="string">"4"</span> <span class="attr">minor</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"BeginString"</span> <span class="attr">required</span>=<span class="string">"Y"</span>&gt;</span>FIX4.2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"MsgType"</span> <span class="attr">required</span>=<span class="string">"Y"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">trailer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"Signature"</span> <span class="attr">required</span>=<span class="string">"N"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"CheckSum"</span> <span class="attr">required</span>=<span class="string">"Y"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trailer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">messages</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span> <span class="attr">name</span>=<span class="string">"Logon"</span> <span class="attr">msgtype</span>=<span class="string">"A"</span> <span class="attr">msgcat</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"ResetSeqNumFlag"</span> <span class="attr">required</span>=<span class="string">"N"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"MaxMessageSize"</span> <span class="attr">required</span>=<span class="string">"N"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"NoMsgTypes"</span> <span class="attr">required</span>=<span class="string">"N"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"RefMsgType"</span> <span class="attr">required</span>=<span class="string">"N"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"MsgDirection"</span> <span class="attr">required</span>=<span class="string">"N"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span> <span class="attr">name</span>=<span class="string">"ResendRequest"</span> <span class="attr">msgtype</span>=<span class="string">"2"</span> <span class="attr">msgcat</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"BeginSeqNo"</span> <span class="attr">required</span>=<span class="string">"Y"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"EndSeqNo"</span> <span class="attr">required</span>=<span class="string">"Y"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">messages</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fields</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"TradingEntityId"</span> <span class="attr">type</span>=<span class="string">"STRING"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">"4"</span> <span class="attr">name</span>=<span class="string">"AdvSide"</span> <span class="attr">type</span>=<span class="string">"STRING"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">"X"</span> <span class="attr">description</span>=<span class="string">"CROSS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">"T"</span> <span class="attr">description</span>=<span class="string">"TRADE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">"5"</span> <span class="attr">name</span>=<span class="string">"AdvTransType"</span> <span class="attr">type</span>=<span class="string">"STRING"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">"N"</span> <span class="attr">description</span>=<span class="string">"NEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fields</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fix</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XMLApp.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter09</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">FileInputStream</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.xml.<span class="type">XML</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">XMLApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readXMLAttr</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> xml = <span class="type">XML</span>.load(<span class="keyword">this</span>.getClass.getClassLoader.getResource(<span class="string">"pk.xml"</span>))</span><br><span class="line">        <span class="comment">//    println(xml)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到 &lt;header&gt; 下的 &lt;field&gt;</span></span><br><span class="line">        <span class="comment">//    val headerField = xml \ "header" \ "field"</span></span><br><span class="line">        <span class="comment">//    println(headerField)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到所有的 &lt;field&gt;</span></span><br><span class="line">        <span class="comment">//    val fields = xml \\ "field"</span></span><br><span class="line">        <span class="comment">//    for (field &lt;- fields) &#123;</span></span><br><span class="line">        <span class="comment">//      println(field)</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到 /header/field/name</span></span><br><span class="line">        <span class="comment">//    val fieldAttributes = (xml \ "header" \ "field").map(_ \ "@name")</span></span><br><span class="line">        <span class="comment">//    val fieldAttributes = (xml \ "header" \ "field" \\ "@name")</span></span><br><span class="line">        <span class="comment">//    for (filedAttribute &lt;- fieldAttributes) &#123;</span></span><br><span class="line">        <span class="comment">//      println(filedAttribute)</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到 name="Logon" 的 message</span></span><br><span class="line">        <span class="comment">//    val filters = (xml \\ "message").filter(_.attribute("name").exists(_.text.equals("Logon")))</span></span><br><span class="line">        <span class="comment">//    val filters = (xml \\ "message").filter(x =&gt; (x \ "@name").text.equals("Logon"))</span></span><br><span class="line">        <span class="comment">//    for (filter &lt;- filters) &#123;</span></span><br><span class="line">        <span class="comment">//      println(filter)</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到 header/field/name</span></span><br><span class="line">        (xml \ <span class="string">"header"</span> \ <span class="string">"field"</span>).map(x =&gt;(x \ <span class="string">"@name"</span>, x.text, x \ <span class="string">"@required"</span>)).foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        readXMLAttr()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作-MySQL"><a href="#操作-MySQL" class="headerlink" title="操作 MySQL"></a>操作 MySQL</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter09</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">Connection</span>, <span class="type">DriverManager</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MySQLApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> url = <span class="string">"jdbc:mysql://127.0.0.1:3306/mysql?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai"</span></span><br><span class="line">        <span class="keyword">val</span> userName = <span class="string">"root"</span></span><br><span class="line">        <span class="keyword">val</span> password = <span class="string">"Chentyit123456"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> connection: <span class="type">Connection</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 返回运行时的一个 class 类型</span></span><br><span class="line">            <span class="comment">// 不写也可以，但是建议写上</span></span><br><span class="line">            classOf[com.mysql.cj.jdbc.<span class="type">Driver</span>]</span><br><span class="line">            connection = <span class="type">DriverManager</span>.getConnection(url, userName, password)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 Statement，执行查询语句</span></span><br><span class="line">            <span class="keyword">val</span> statement = connection.createStatement()</span><br><span class="line">            <span class="keyword">val</span> resultSet = statement.executeQuery(<span class="string">"select host, user from user"</span>)</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="keyword">val</span> host = resultSet.getString(<span class="string">"host"</span>)</span><br><span class="line">                <span class="keyword">val</span> user = resultSet.getString(<span class="string">"user"</span>)</span><br><span class="line"></span><br><span class="line">                println(<span class="string">s"<span class="subst">$host</span>, <span class="subst">$user</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; e.printStackTrace()</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;操作文件 &amp;amp;&amp;amp; 网络数据&lt;/li&gt;
&lt;li&gt;操作XML&lt;/li&gt;
&lt;li&gt;操作 MySQL&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://www.chentyit.com/categories/Scala/"/>
    
    
      <category term="大数据" scheme="https://www.chentyit.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Scala隐式转换</title>
    <link href="https://www.chentyit.com/2019/09/10/Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.chentyit.com/2019/09/10/Scala隐式转换/</id>
    <published>2019-09-10T11:48:06.000Z</published>
    <updated>2019-09-10T11:53:03.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为一个已存在的类添加一个新的方法</p><p>Java：动态代理</p><p>Scala：隐式转换</p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传一个简单的对象进来 (man)</span></span><br><span class="line"><span class="comment"> * 返回一个牛逼的对象回去 (SuperMan)</span></span><br><span class="line"><span class="comment"> * 然后简单对象就有了牛逼对象的方法了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">man2superman</span></span>(man: <span class="type">Man</span>): <span class="type">SuperMan</span> = <span class="keyword">new</span> <span class="type">SuperMan</span>(man.name)</span><br></pre></td></tr></table></figure><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter08</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************* 人变超人 *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>(<span class="params">val name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>() = &#123;</span><br><span class="line">    println(<span class="string">s"man[ <span class="subst">$name</span> ] eat ......"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span>(<span class="params">val name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fly</span></span>() = &#123;</span><br><span class="line">    println(<span class="string">s"superman[ <span class="subst">$name</span> ] fly ......"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************* 给 Scala 的文件对象添加 read 操作 *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichFile</span>(<span class="params">file: <span class="type">File</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read</span></span>() = &#123;</span><br><span class="line">    <span class="type">Source</span>.fromFile(file.getAbsoluteFile).mkString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义隐式转换函数</span></span><br><span class="line">  <span class="comment">//  implicit def man2superman(man: Man): SuperMan = new SuperMan(man.name)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  val man = new Man("cty")</span></span><br><span class="line">  <span class="comment">//  man.eat()</span></span><br><span class="line">  <span class="comment">//  man.fly()</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">file2RichFile</span></span>(file: <span class="type">File</span>): <span class="type">RichFile</span> = <span class="keyword">new</span> <span class="type">RichFile</span>(file)</span><br><span class="line">  <span class="keyword">val</span> file = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"E:\\test\\data.txt"</span>)</span><br><span class="line">  println(file.read())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例二（切面封装）"><a href="#实例二（切面封装）" class="headerlink" title="实例二（切面封装）"></a>实例二（切面封装）</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.scala06</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* 比较器的扩展 *******************/</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">trait</span> <span class="title">UserOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[<span class="type">User</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: <span class="type">User</span>, y: <span class="type">User</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    x.age - y.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* 对文件的读写的扩展 *******************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichFile</span>(<span class="params">file: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="type">Source</span>.fromFile(file).mkString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(file: <span class="type">String</span>): <span class="type">File</span> = <span class="keyword">new</span> <span class="type">File</span>(file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* 隐式函数 切面封装 *******************/</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 隐式对象</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">object</span> <span class="title">UserOrder</span> <span class="keyword">extends</span> <span class="title">UserOrdering</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">//</span> <span class="title">隐式函数</span></span></span><br><span class="line"><span class="class">  <span class="title">implicit</span> <span class="title">def</span> <span class="title">double2Int</span>(<span class="params">x: <span class="type">Double</span></span>) </span>= x.toInt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 File 转成 RichFile</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">file2RichFIle</span></span>(file: <span class="type">File</span>) = <span class="keyword">new</span> <span class="type">RichFile</span>(file.getAbsolutePath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入切面封装的对象</span></span><br><span class="line"><span class="keyword">import</span> cn.chentyit.scala06.<span class="type">ImplicitContext</span>._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="type">List</span>(<span class="number">23</span>, <span class="number">43</span>, <span class="number">5</span>, <span class="number">42</span>).sorted)</span><br><span class="line"></span><br><span class="line">    println(<span class="type">List</span>(<span class="type">User</span>(<span class="string">"jack"</span>, <span class="number">20</span>), <span class="type">User</span>(<span class="string">"tom"</span>, <span class="number">18</span>)).sorted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> i: <span class="type">Int</span> = <span class="number">100.9</span></span><br><span class="line">    println(i)</span><br><span class="line"></span><br><span class="line">    println(<span class="type">File</span>(<span class="string">"E:\\test\\data.txt"</span>).read)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐式参数（不建议使用）"><a href="#隐式参数（不建议使用）" class="headerlink" title="隐式参数（不建议使用）"></a>隐式参数（不建议使用）</h2><p>介绍：指的是在函数或者方法中，定义一个用 implicit 修饰的参数，此时 Scala 会尝试找到一个指定类型的，用 implicit 修饰的对象，即隐式值，并注入参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter08</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置隐式参数的函数在没有传参的情况下会寻找作用域（方法，对象，伴生对象）中存在的一个隐式值并传入</span></span><br><span class="line"><span class="comment"> * 如果传参就直接将参数传递过去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitArgsApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> test = <span class="string">"test"</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">testParam</span></span>(<span class="keyword">implicit</span> name: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name + <span class="string">"~~~~~~~~~~~~~~~~~~~~"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  implicit val name = "implicit_name"</span></span><br><span class="line">  <span class="comment">// 编译器会传一个已存在的隐式参数进入函数</span></span><br><span class="line">  <span class="comment">//  testParam</span></span><br><span class="line">  <span class="comment">//  testParam("cty")</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  implicit val s1 = "s1"</span></span><br><span class="line">  <span class="comment">//  implicit val s2 = "s2"</span></span><br><span class="line">  <span class="comment">// 编译器不知道应该传哪一个隐式参数进去 会报错</span></span><br><span class="line">  <span class="comment">//  testParam</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐式类"><a href="#隐式类" class="headerlink" title="隐式类"></a>隐式类</h2><p>介绍：对类增加 implicit 限定的类，其作用主要是对类的加强</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter08</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitClassApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorInt</span>(<span class="params">x: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>) = a + x</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorStr</span>(<span class="params">str: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> i = str.toInt</span><br><span class="line">      <span class="keyword">return</span> i + a</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  println(<span class="number">1.</span>add(<span class="number">3</span>))</span><br><span class="line">  println(<span class="string">"12"</span>.add(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;为一个已存在的类添加一个新的方法&lt;/p&gt;
&lt;p&gt;Java：动态代理&lt;/p&gt;
&lt;p&gt;Scala：隐式转换&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://www.chentyit.com/categories/Scala/"/>
    
    
      <category term="大数据" scheme="https://www.chentyit.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Scala函数高级操作</title>
    <link href="https://www.chentyit.com/2019/09/10/Scala%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.chentyit.com/2019/09/10/Scala函数高级操作/</id>
    <published>2019-09-10T11:47:34.000Z</published>
    <updated>2019-09-10T12:04:59.559Z</updated>
    
    <content type="html"><![CDATA[<ul><li>字符串高级操作</li><li>匿名函数</li><li>Curry 函数</li><li>高阶函数</li><li>综合例子</li><li>偏函数</li></ul><a id="more"></a><h2 id="字符串高级操作"><a href="#字符串高级操作" class="headerlink" title="字符串高级操作"></a>字符串高级操作</h2><h3 id="插入变量"><a href="#插入变量" class="headerlink" title="插入变量"></a>插入变量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">"Hello"</span></span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"PK"</span></span><br><span class="line">    <span class="keyword">val</span> team = <span class="string">"AC Milan"</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">s"<span class="subst">$s</span> <span class="subst">$name</span> <span class="subst">$team</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> b =</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">          | 这是一个多行字符串</span></span><br><span class="line"><span class="string">          | Hello world</span></span><br><span class="line"><span class="string">          | Chentyit</span></span><br><span class="line"><span class="string">          |"</span><span class="string">""</span>.stripMargin</span><br><span class="line">    println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匿名函数：函数可以匿名，也可以不匿名</span></span><br><span class="line"><span class="comment"> * (参数名：参数类型) =&gt; 函数体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FunctoinApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> m1 = (x: <span class="type">Int</span>) =&gt; x + <span class="number">1</span></span><br><span class="line">  println(m1(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span> </span>= (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y</span><br><span class="line">  println(add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Curry-函数"><a href="#Curry-函数" class="headerlink" title="Curry 函数"></a>Curry 函数</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CurryApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x + y</span><br><span class="line">    println(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将原来接收两个参数的函数，转换成两个</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum2</span></span>(x: <span class="type">Int</span>)(y: <span class="type">Int</span>) = x + y</span><br><span class="line">    println(sum2(<span class="number">10</span>)(<span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.scala02</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">        y: <span class="type">Int</span> =&gt; &#123;</span><br><span class="line">            println(<span class="string">s"<span class="subst">$x</span>, <span class="subst">$y</span>"</span>)</span><br><span class="line">            x + y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        x + y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * fn3 可以分步调用</span></span><br><span class="line"><span class="comment">   * fn2 不可以分步调用</span></span><br><span class="line"><span class="comment">   * fn1 可读性差</span></span><br><span class="line"><span class="comment">   * @param x</span></span><br><span class="line"><span class="comment">   * @param y</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span></span>(x: <span class="type">Int</span>)(y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        x + y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> re1 = fun1(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">val</span> re2 = re1(<span class="number">3</span>)</span><br><span class="line">        println(re2)</span><br><span class="line"></span><br><span class="line">        println(fun3(<span class="number">2</span>)(<span class="number">3</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="map-amp-amp-filter"><a href="#map-amp-amp-filter" class="headerlink" title="map &amp;&amp; filter"></a>map &amp;&amp; filter</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HighFuncApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> l = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map：逐个去操作集合中的每个元素</span></span><br><span class="line">    println(l.map((x: <span class="type">Int</span>) =&gt; x * <span class="number">2</span>))</span><br><span class="line">    println(l.map(x =&gt; x * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下划线代表当前的元素</span></span><br><span class="line">    println(l.map(_ * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤出符合条件的元素</span></span><br><span class="line">    println(l.map(_ * <span class="number">2</span>).filter(_ &gt; <span class="number">8</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce-amp-amp-fold"><a href="#reduce-amp-amp-fold" class="headerlink" title="reduce &amp;&amp; fold"></a>reduce &amp;&amp; fold</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HighFuncApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> l = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将两两相邻的元素相减</span></span><br><span class="line">    println(l.reduce(_ - _))</span><br><span class="line">    <span class="comment">// 从左边开始</span></span><br><span class="line">    <span class="comment">// 左边一个元素减右边一个</span></span><br><span class="line">    <span class="comment">// 得到的新值再去和右边的值组合再相减</span></span><br><span class="line">    println(l.reduceLeft(_ - _))</span><br><span class="line">    <span class="comment">// 和上面一样，只是组合方向不同</span></span><br><span class="line">    println(l.reduceRight(_ - _))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和 reduce 一样</span></span><br><span class="line">    <span class="comment">// 但是在计算开始会给一个初值和第一个参与计算的元素组合</span></span><br><span class="line">    println(l.fold(<span class="number">0</span>)(_ - _))</span><br><span class="line">    println(l.foldLeft(<span class="number">0</span>)(_ - _))</span><br><span class="line">    println(l.foldRight(<span class="number">0</span>)(_ - _))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flatten-amp-amp-flatMap"><a href="#flatten-amp-amp-flatMap" class="headerlink" title="flatten &amp;&amp; flatMap"></a>flatten &amp;&amp; flatMap</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HighFuncApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> f = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>), <span class="type">List</span>(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">    <span class="comment">// 将集合 “拍扁”</span></span><br><span class="line">    println(f.flatten)</span><br><span class="line">    <span class="comment">// 操作集合中的元素</span></span><br><span class="line">    println(f.map(_.map(_ * <span class="number">2</span>)))</span><br><span class="line">    <span class="comment">// 操作集合中的元素并 “拍扁”</span></span><br><span class="line">    <span class="comment">// 可以理解为 flat + map</span></span><br><span class="line">    println(f.flatMap(_.map(_ * <span class="number">2</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="type">List</span>(<span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>), <span class="type">List</span>(<span class="number">6</span>, <span class="number">8</span>), <span class="type">List</span>(<span class="number">10</span>, <span class="number">12</span>))</span><br><span class="line"><span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HighFuncApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> txt = <span class="type">Source</span>.fromFile(<span class="string">"E:\\test\\data.txt"</span>).mkString</span><br><span class="line">    <span class="keyword">val</span> l = <span class="type">List</span>(txt)</span><br><span class="line">    <span class="comment">// mapValues 作用：</span></span><br><span class="line">    <span class="comment">// Key 保持不变，与新的 Value 一起组成新的元素</span></span><br><span class="line">    <span class="comment">// 该函数只适用于 K-V 对的元素</span></span><br><span class="line">    l.flatMap(_.split(<span class="string">","</span>)).map(x =&gt; (x, <span class="number">1</span>)).groupBy(_._1).mapValues(_.size).foreach(println)</span><br><span class="line">    <span class="comment">// 两种方法结果相同</span></span><br><span class="line">    l.flatMap(_.split(<span class="string">","</span>)).map(x =&gt; (x, <span class="number">1</span>)).groupBy(_._1).map(x =&gt; (x._1, x._2.size)).foreach(println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试文件内容：（data.txt)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,hello,world,hello</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(world,<span class="number">1</span>)</span><br><span class="line">(hello,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><h3 id="实例一-1"><a href="#实例一-1" class="headerlink" title="实例一"></a>实例一</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chentyit.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 偏函数：</span></span><br><span class="line"><span class="comment"> * 被包在花括号内没有 match 的一组 case 语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">PartitalFunctionApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> names = <span class="type">Array</span>(<span class="string">"Akiho Yoshizawa"</span>, <span class="string">"YuiHatano"</span>, <span class="string">"Aoi Sola"</span>)</span><br><span class="line">    <span class="keyword">val</span> name = names(<span class="type">Random</span>.nextInt(names.length))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A 是输入参数类型</span></span><br><span class="line"><span class="comment">   * B 是输出参数类型</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayChinese</span></span>: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">String</span>] = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Akiho Yoshizawa"</span> =&gt; <span class="string">"aaa"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"YuiHatano"</span> =&gt; <span class="string">"bbb"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Aoi Sola"</span> =&gt; <span class="string">"ccc"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(sayChinese(<span class="string">"Akiho Yoshizawa"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例二-1"><a href="#实例二-1" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chentyit.scala2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> l = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"one"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将集合中的数据加 10</span></span><br><span class="line">        <span class="comment">// l.map(&#123; case x: Int =&gt; x + 10 &#125;)</span></span><br><span class="line">        println(l.collect(&#123; <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">10</span> &#125;))</span><br><span class="line">        <span class="keyword">val</span> fn1 = <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] &#123;</span><br><span class="line">            <span class="comment">// 判断数据是否合法</span></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = x.isInstanceOf[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理数据的方式</span></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Any</span>): <span class="type">Int</span> = x.asInstanceOf[<span class="type">Int</span>] + <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(l.collect(fn1))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chentyit.scala2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> l = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"one"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> fn2: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">            <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(l.collect(fn2))</span><br><span class="line"></span><br><span class="line">        println(l.collect(&#123; <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">10</span> &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chentyit.scala2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> strNum = <span class="type">List</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fnx1</span></span>: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"one"</span> =&gt; <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fnx2</span></span>: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"two"</span> =&gt; <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fnx3</span></span>: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">            <span class="keyword">case</span> _ =&gt; <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fnxx</span> </span>= fnx1 orElse fnx2 orElse fnx3</span><br><span class="line"></span><br><span class="line">        println(strNum.collect(fnxx))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;字符串高级操作&lt;/li&gt;
&lt;li&gt;匿名函数&lt;/li&gt;
&lt;li&gt;Curry 函数&lt;/li&gt;
&lt;li&gt;高阶函数&lt;/li&gt;
&lt;li&gt;综合例子&lt;/li&gt;
&lt;li&gt;偏函数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scala" scheme="https://www.chentyit.com/categories/Scala/"/>
    
    
      <category term="大数据" scheme="https://www.chentyit.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy(一)</title>
    <link href="https://www.chentyit.com/2019/09/08/Scrapy-%E4%B8%80/"/>
    <id>https://www.chentyit.com/2019/09/08/Scrapy-一/</id>
    <published>2019-09-08T11:17:22.000Z</published>
    <updated>2019-09-08T11:18:46.630Z</updated>
    
    <content type="html"><![CDATA[<ul><li>介绍</li><li>使用</li><li>pipline</li><li>logging</li></ul><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Scrapy 是一个未来爬取网站数据，提取结构性数据而编写的应用框架</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject mySpider</span><br></pre></td></tr></table></figure><h3 id="创建爬取模块"><a href="#创建爬取模块" class="headerlink" title="创建爬取模块"></a>创建爬取模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider itcast "itcast.cn"</span><br></pre></td></tr></table></figure><h3 id="启动开始爬取"><a href="#启动开始爬取" class="headerlink" title="启动开始爬取"></a>启动开始爬取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl itcast</span><br></pre></td></tr></table></figure><p><strong>代码块：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    <span class="comment"># 爬虫名</span></span><br><span class="line">    name = <span class="string">'itcast'</span></span><br><span class="line">    <span class="comment"># 允许爬取的范围</span></span><br><span class="line">    allowed_domains = [<span class="string">'itcast.cn'</span>]</span><br><span class="line">    <span class="comment"># 最开始请求的 url 地址</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.itcast.cn/channel/teacher.shtml'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 处理 start_urls 地址对应的响应</span></span><br><span class="line">        <span class="comment"># ret1 = response.xpath("//div[@class='tea_con']//h3/text()").extract()</span></span><br><span class="line">        <span class="comment"># print(ret1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分组</span></span><br><span class="line">        li_list = response.xpath(<span class="string">"//div[@class='tea_con']//li"</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            item[<span class="string">"name"</span>] = li.xpath(<span class="string">".//h3/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">"title"</span>] = li.xpath(<span class="string">".//h4/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            print(item)</span><br></pre></td></tr></table></figure><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>pipeline 中保存数据</p><h2 id="pipline"><a href="#pipline" class="headerlink" title="pipline"></a>pipline</h2><p>pipline 可以有多个，原因：</p><ol><li>可能会有多个 Spider，不同的 pipline 处理不同的 item 的内容</li><li>一个 spider 的内容可能要做不同的操作，比如存入不同的数据库中</li></ol><p>注意：</p><ol><li>pipline 的权重越小，优先级越高</li><li>pipline 中 process_item 方法名不能修改为其他的名称</li></ol><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><h3 id="Scrapy-项目中使用"><a href="#Scrapy-项目中使用" class="headerlink" title="Scrapy 项目中使用"></a>Scrapy 项目中使用</h3><p><strong>在 setting.py 里面设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置日志级别</span><br><span class="line">LOG_LEVEL = &quot;WARNING&quot;</span><br><span class="line"></span><br><span class="line"># 设置日志保存路径</span><br><span class="line">LOG_FILE = &quot;./log.log&quot;</span><br></pre></td></tr></table></figure><p><strong>在代码中调用：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment"># 先调用 logging 模块</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 python 文件名加载到 logging 中</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'itcast'</span></span><br><span class="line">    allowed_domains = [<span class="string">'itcast.cn'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.itcast.cn/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            item[<span class="string">"come_from"</span>] = <span class="string">"itcast"</span></span><br><span class="line">            <span class="comment"># 将信息按照等级打印出来</span></span><br><span class="line">            logger.warning(item)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="在一般项目用使用"><a href="#在一般项目用使用" class="headerlink" title="在一般项目用使用"></a>在一般项目用使用</h3><p><strong><em>单独测试 logging 模块</em>：</strong></p><p><strong>log_a.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的输出样式</span></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    format=<span class="string">'%(levelname)s [%(filename)s] '</span></span><br><span class="line">                           <span class="string">'[%(lineno)d] : %(message)s'</span></span><br><span class="line">                           <span class="string">' - %(asctime)s'</span>, datefmt=<span class="string">'[%d/%b/%Y %H:%M:%S]'</span>)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logger.info(<span class="string">"this is a info log"</span>)</span><br><span class="line">    logger.info(<span class="string">"this is a info log 1"</span>)</span><br></pre></td></tr></table></figure><p>在 log_b.py 中调用 log_a.py 中的 logging</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> log_a <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logger.warning(<span class="string">"this is log_b 1"</span>)</span><br><span class="line">    logger.warning(<span class="string">"this is log_b 2"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;li&gt;pipline&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.chentyit.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://www.chentyit.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>HBase 安装</title>
    <link href="https://www.chentyit.com/2019/09/01/HBase-%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/09/01/HBase-安装/</id>
    <published>2019-09-01T03:45:26.000Z</published>
    <updated>2019-09-15T03:46:31.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-HBase-的安装包"><a href="#下载-HBase-的安装包" class="headerlink" title="下载 HBase 的安装包"></a>下载 HBase 的安装包</h2><p>下载的是 2.0.6 版本</p><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf hdfs-*** -C /usr/local</span><br></pre></td></tr></table></figure><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export HBASE_HOME="/usr/local/hbase-2.0.6"</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;HBASE_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="修改-conf-下的-hbase-env-sh"><a href="#修改-conf-下的-hbase-env-sh" class="headerlink" title="修改 /conf 下的 hbase-env.sh"></a>修改 /conf 下的 hbase-env.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk8</span><br><span class="line"><span class="meta">#</span> 使用自己的 Zookeeper 不使用 HBase 自带的 ZK</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure><h3 id="修改-conf-下的-hbase-site-xml"><a href="#修改-conf-下的-hbase-site-xml" class="headerlink" title="修改 /conf 下的 hbase-site.xml"></a>修改 /conf 下的 hbase-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不设置这个也可以，但是要在下面写上端口号，设置了也不会发生冲突 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata1:2181,bigdata2:2181,bigdata3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以不配置，如果要配置，需要和zookeeper配置文件zoo.cfg中的dataDir指定的路径相同 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/zookeeper/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置 HDFS 的命名空间  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：这里要和 hadoop 里面的 core-site.xml 里面配置的 HDFS 命名空间名称相同  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置为分布式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="把-hadoop-的配置文件-core-site-xml-和-hdfs-site-xml-复制到-hbase-的配置文件目录下"><a href="#把-hadoop-的配置文件-core-site-xml-和-hdfs-site-xml-复制到-hbase-的配置文件目录下" class="headerlink" title="把 hadoop 的配置文件 core-site.xml 和 hdfs-site.xml 复制到 hbase 的配置文件目录下"></a>把 hadoop 的配置文件 core-site.xml 和 hdfs-site.xml 复制到 hbase 的配置文件目录下</h3><p>网上大多数教程都没有这一步，但是加上也没有报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp hadoop-2.8.4/etc/hadoop/core-site.xml hbase-2.0.6/conf/</span><br><span class="line">cp hadoop-2.8.4/etc/hadoop/hdfs-site.xml hbase-2.0.6/conf/</span><br></pre></td></tr></table></figure><h3 id="修改-regionservers-文件"><a href="#修改-regionservers-文件" class="headerlink" title="修改 regionservers 文件"></a>修改 regionservers 文件</h3><p>在 regionservers 文件中添加节点（先把里面的 localhost 删掉）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim regionservers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加如下内容（按自己要求修改）</span><br><span class="line">bigdata1</span><br><span class="line">bigdata2</span><br><span class="line">bigdata3</span><br></pre></td></tr></table></figure><h3 id="添加并修改-backup-masters文件"><a href="#添加并修改-backup-masters文件" class="headerlink" title="添加并修改 backup-masters文件"></a>添加并修改 backup-masters文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim backup-masters</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加如下内容（按自己要求修改）</span><br><span class="line"><span class="meta">#</span> 这个是备用的 master 节点（防止当前 master 嗝屁后 HBase 集群也跟着嗝屁）</span><br><span class="line">bigdata6</span><br></pre></td></tr></table></figure><h2 id="将-HBase-文件全部分发到集群的其他节点"><a href="#将-HBase-文件全部分发到集群的其他节点" class="headerlink" title="将 HBase 文件全部分发到集群的其他节点"></a>将 HBase 文件全部分发到集群的其他节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /etc/local/hbase-*** hostname:/etc/local</span><br></pre></td></tr></table></figure><h2 id="同步时间（特别注意！！！）"><a href="#同步时间（特别注意！！！）" class="headerlink" title="同步时间（特别注意！！！）"></a>同步时间（<em>特别注意！！！</em>）</h2><p><strong>如果不同步时间，将无法启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 没有的话就用 yum 安装后再同步</span><br><span class="line">ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><h2 id="启动-Zookeeper-amp-HDFS-amp-YARN"><a href="#启动-Zookeeper-amp-HDFS-amp-YARN" class="headerlink" title="启动 Zookeeper &amp; HDFS &amp; YARN"></a>启动 Zookeeper &amp; HDFS &amp; YARN</h2><p>启动后检查一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><h2 id="启动-HBase"><a href="#启动-HBase" class="headerlink" title="启动 HBase"></a>启动 HBase</h2><p>(在集群的哪台机器启动，哪台就是当前的 Master)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure><h2 id="观察启动状态"><a href="#观察启动状态" class="headerlink" title="观察启动状态"></a>观察启动状态</h2><p>在浏览器输入 <a href="http://hostname:16010" target="_blank" rel="noopener">http://hostname:16010</a> 可以按到 HBase 的节点状态（hostname 是启动 Hbase 的那台机器名）</p><p><img src="/2019/09/01/HBase-安装/hbase_web.png" alt="hbase_web"></p><p>在命令行输入 jps 查看进程（HRegionServer 和 HMaster 是否启动）</p><p><img src="/2019/09/01/HBase-安装/hbase_jps.png" alt="hbase_jps"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载-HBase-的安装包&quot;&gt;&lt;a href=&quot;#下载-HBase-的安装包&quot; class=&quot;headerlink&quot; title=&quot;下载 HBase 的安装包&quot;&gt;&lt;/a&gt;下载 HBase 的安装包&lt;/h2&gt;&lt;p&gt;下载的是 2.0.6 版本&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="HBase" scheme="https://www.chentyit.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Flume 跨服务器拉取日志</title>
    <link href="https://www.chentyit.com/2019/08/25/Flume-%E8%B7%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%89%E5%8F%96%E6%97%A5%E5%BF%97/"/>
    <id>https://www.chentyit.com/2019/08/25/Flume-跨服务器拉取日志/</id>
    <published>2019-08-25T07:07:24.000Z</published>
    <updated>2019-09-15T03:46:21.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flume-跨服务器拉取日志"><a href="#Flume-跨服务器拉取日志" class="headerlink" title="Flume 跨服务器拉取日志"></a>Flume 跨服务器拉取日志</h2><h3 id="思路介绍"><a href="#思路介绍" class="headerlink" title="思路介绍"></a>思路介绍</h3><ol><li>在实际开发中，网站应该不会运行装有 Hadoop 以及相关服务的集群上，所以需要一台新的服务器来运行网站的环境以免发生环境冲突或者端口占用的错误</li><li>分服务器的 Nginx 生成日志文件 access.log（存放到任何目录）</li><li>分服务器的 Flume 监听 access.log 文件的变化，并将 access.log 文件里面的信息拉取下沉到汇总服务器</li><li>汇总服务器获取到分服务器下沉的日志信息，然后再一步下沉到 HDFS 中</li><li>如果以上思路成立就存在 Flume 汇总服务器以及 Flume 分服务器（我自己命名的），汇总服务器接收分服务器下沉过来的数据，然后再下沉到 HDFS 中，最后在用 MR + HIVE + Sqoop + MySQL 完成工作流</li></ol><h3 id="分服务器的-Flume-配置文件"><a href="#分服务器的-Flume-配置文件" class="headerlink" title="分服务器的 Flume 配置文件"></a>分服务器的 Flume 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /usr/local/flume-1.8.0/bigdata8/taildir_position.json</span><br><span class="line">a1.sources.r1.command =tail -f /test/log.txt</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /root/web/access.log</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = 192.168.11.37</span><br><span class="line">a1.sinks.k1.port =44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>bind sources and sink to channel </span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="汇总服务器的-Flume-配置文件"><a href="#汇总服务器的-Flume-配置文件" class="headerlink" title="汇总服务器的 Flume 配置文件"></a>汇总服务器的 Flume 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a2.sources = r2</span><br><span class="line">a2.channels = c2</span><br><span class="line">a2.sinks = k2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = 0.0.0.0</span><br><span class="line">a2.sources.r2.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 10000</span><br><span class="line">a2.channels.c2.byteCapacityBufferPercentage = 20</span><br><span class="line">a2.channels.c2.byteCapacity = 800000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sink</span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.channel = c1</span><br><span class="line">a2.sinks.k2.hdfs.path = /weblog/flume/events/%y-%m-%d/%H%M%S</span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = events-</span><br><span class="line"><span class="meta">#</span>一定要加上</span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line">a2.sinks.k2.hdfs.round = true</span><br><span class="line">a2.sinks.k2.hdfs.roundValue = 10</span><br><span class="line">a2.sinks.k2.hdfs.roundUnit = minute</span><br><span class="line"><span class="meta">#</span>生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br><span class="line">a2.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>bind sources and sink to channel </span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在分服务器中将下沉（sink）的 type 设置为 avro，并设置下沉的目标服务器的 IP 地址</p><p>在汇总服务器中将源（source）的 type 设置成为 arvo</p><p>启动的时候<strong>先启动汇总服务器再启动分服务器</strong></p><p>这里注意：<strong>不要在 a2.sources.r2.bind 后面写 localhost 要直接写符合 IPv4 格式的 IP 地址</strong>，我试过很多次就是这里出了问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flume-跨服务器拉取日志&quot;&gt;&lt;a href=&quot;#Flume-跨服务器拉取日志&quot; class=&quot;headerlink&quot; title=&quot;Flume 跨服务器拉取日志&quot;&gt;&lt;/a&gt;Flume 跨服务器拉取日志&lt;/h2&gt;&lt;h3 id=&quot;思路介绍&quot;&gt;&lt;a href=&quot;#思
      
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Flume" scheme="https://www.chentyit.com/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Hive(一)</title>
    <link href="https://www.chentyit.com/2019/08/20/Hive-%E4%B8%80/"/>
    <id>https://www.chentyit.com/2019/08/20/Hive-一/</id>
    <published>2019-08-19T16:09:08.000Z</published>
    <updated>2019-09-15T03:46:32.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p><strong>Hive 数据仓库</strong>：用于存储数据，都是历史数据，不可变的数据，不能改，不能删，对于 hive 而言，增加的是文件</p><p><strong>关系型数据库</strong>：用于存储数据，注重业务逻辑，可以进行增删改查</p><p>hive 保存了元数据信息，是一个元数据管理工具，是一个驱动，hive 解析 sql 语句，将其翻译成为 MR 的运算程序，同时保存了与元数据信息</p><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="1-JDK-安装"><a href="#1-JDK-安装" class="headerlink" title="1. JDK 安装"></a>1. JDK 安装</h2><h2 id="2-Hadoop-安装"><a href="#2-Hadoop-安装" class="headerlink" title="2. Hadoop 安装"></a>2. Hadoop 安装</h2><h2 id="3-MySQL-安装"><a href="#3-MySQL-安装" class="headerlink" title="3. MySQL 安装"></a>3. MySQL 安装</h2><h2 id="4-开始安装-Hive"><a href="#4-开始安装-Hive" class="headerlink" title="4. 开始安装 Hive"></a>4. 开始安装 Hive</h2><ul><li><p>解压到 /usr/local</p></li><li><p>配置环境变量到 /etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME="/usr/local/hive1.2.2"</span><br></pre></td></tr></table></figure></li><li><p>配置元数据库信息</p><p>在 hive*/conf/ 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure><p>在 hive-site.xml 中添加以下文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://bigdata7:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Chentyit123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:java.io.tmpdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive1.2.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将 MySQL 的连接 jar 包拷贝到 $HIVE_HOME/lib 目录下</strong></p><p>这里如果数据库是 5.5 以上版本的 MySQL，选择版本高一点的 5.1.*.jar 连接包，如果是 8.0.0 的就直接使用 8 的连接包</p></li><li><p><strong>拷贝 hive 的 lib 目录中 jline.2.12.jar 的 jar 包替换掉 hadoop 中的包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/yarn/lib/jline-0.9.94.jar</span><br></pre></td></tr></table></figure></li><li><p>启动 Hive</p><ol><li><p>直接使用 hive 命令</p></li><li><p>先打开服务端，再打开客户端连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive --service hiveserver2&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">beeline -u jdbc:hive2://主机名:10000 -n root</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="Hive-命令"><a href="#Hive-命令" class="headerlink" title="Hive 命令"></a>Hive 命令</h1><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'chenty.*'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看某一个数据库的详细信息"><a href="#查看某一个数据库的详细信息" class="headerlink" title="查看某一个数据库的详细信息"></a>查看某一个数据库的详细信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> <span class="keyword">database</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="删除非空数据库"><a href="#删除非空数据库" class="headerlink" title="删除非空数据库"></a>删除非空数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> chentyit <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库时，指定数据库位置（这个位置是在-hdfs-上的）"><a href="#创建数据库时，指定数据库位置（这个位置是在-hdfs-上的）" class="headerlink" title="创建数据库时，指定数据库位置（这个位置是在 hdfs 上的）"></a>创建数据库时，指定数据库位置（这个位置是在 hdfs 上的）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_p location <span class="string">'/home/database/'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/chentyit_p.png" alt="chentyit_p"></p><h3 id="创建数据库的时候希望能够给数据库增加一些描述性东西"><a href="#创建数据库的时候希望能够给数据库增加一些描述性东西" class="headerlink" title="创建数据库的时候希望能够给数据库增加一些描述性东西"></a>创建数据库的时候希望能够给数据库增加一些描述性东西</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_c <span class="keyword">comment</span> <span class="string">'my database'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/chentyit_c.png" alt="chentyit_c"></p><h3 id="创建数据库的时候，需要为数据库增加属性信息，可以使用-with-dbproperties-信息"><a href="#创建数据库的时候，需要为数据库增加属性信息，可以使用-with-dbproperties-信息" class="headerlink" title="创建数据库的时候，需要为数据库增加属性信息，可以使用 with dbproperties 信息"></a>创建数据库的时候，需要为数据库增加属性信息，可以使用 with dbproperties 信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_d <span class="keyword">with</span> dbproperties(<span class="string">'createor'</span>=<span class="string">'chenty'</span>,<span class="string">'date'</span>=<span class="string">'2019-08-19'</span>);</span><br></pre></td></tr></table></figure><h3 id="修改数据库的属性信息"><a href="#修改数据库的属性信息" class="headerlink" title="修改数据库的属性信息"></a>修改数据库的属性信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> chentyit_d <span class="keyword">set</span> dbproperties(<span class="string">'edited-by'</span>=<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h3 id="如果要使用自己已经存在的数据库"><a href="#如果要使用自己已经存在的数据库" class="headerlink" title="如果要使用自己已经存在的数据库"></a>如果要使用自己已经存在的数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库下的所有表"><a href="#查看当前数据库下的所有表" class="headerlink" title="查看当前数据库下的所有表"></a>查看当前数据库下的所有表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h3 id="创建表（默认是内部表）"><a href="#创建表（默认是内部表）" class="headerlink" title="创建表（默认是内部表）"></a>创建表（默认是内部表）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><h3 id="创建一个表，该表和已有的某一个表的结构一样（复制表结构）"><a href="#创建一个表，该表和已有的某一个表的结构一样（复制表结构）" class="headerlink" title="创建一个表，该表和已有的某一个表的结构一样（复制表结构）"></a>创建一个表，该表和已有的某一个表的结构一样（复制表结构）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> emp <span class="keyword">like</span> emp1;</span><br></pre></td></tr></table></figure><h3 id="删除一个已经存在的表"><a href="#删除一个已经存在的表" class="headerlink" title="删除一个已经存在的表"></a>删除一个已经存在的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp1;</span><br></pre></td></tr></table></figure><h3 id="修改一个表明，重命名"><a href="#修改一个表明，重命名" class="headerlink" title="修改一个表明，重命名"></a>修改一个表明，重命名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">rename</span> <span class="keyword">to</span> emp_info;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/rename_table.png" alt="rename_table"></p><h3 id="将hdfs上面的文件信息导入到hive表中"><a href="#将hdfs上面的文件信息导入到hive表中" class="headerlink" title="将hdfs上面的文件信息导入到hive表中"></a>将hdfs上面的文件信息导入到hive表中</h3><p>/home/bigdata 代表文件在在 HDFS 上位置</p><p>使用改命令时一定要注意数据与数据之间在 txt 文件编辑的时候一定要 Tab 间隔</p><p>导入后 HDFS 里面的数据没了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">'/home/database'</span> <span class="keyword">into</span> <span class="keyword">table</span> emp_info;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/load_from_hdfs.png" alt="load_from_hdfs"></p><h3 id="给某一个表增加某一列的信息"><a href="#给某一个表增加某一列的信息" class="headerlink" title="给某一个表增加某一列的信息"></a>给某一个表增加某一列的信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">add</span> <span class="keyword">columns</span>(job <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><h3 id="修改某一个表的某一列的信息"><a href="#修改某一个表的某一列的信息" class="headerlink" title="修改某一个表的某一列的信息"></a>修改某一个表的某一列的信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">change</span> <span class="keyword">column</span> job cjob <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'job_id'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/alter_column.png" alt="alter_column"></p><h3 id="替换表中的某一个列"><a href="#替换表中的某一个列" class="headerlink" title="替换表中的某一个列"></a>替换表中的某一个列</h3><p>这里注意，这里的 replace 不是替换一列，而是把<strong>所有列</strong>重新<strong>改写</strong>成<strong>括号里面的新列</strong></p><p>举个例子：原列是（a, b, c) 用下列命令后就变成了 （job, dept）而 a，b，c 三列不见了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">replace</span> <span class="keyword">columns</span>(job <span class="built_in">int</span>, dept <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure><h3 id="修改表中某一列的属性"><a href="#修改表中某一列的属性" class="headerlink" title="修改表中某一列的属性"></a>修改表中某一列的属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_name <span class="keyword">set</span> tblproperties(<span class="string">'value'</span>=<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h3 id="Hive-成批向某一表插入数据"><a href="#Hive-成批向某一表插入数据" class="headerlink" title="Hive 成批向某一表插入数据"></a>Hive 成批向某一表插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> emp_info_b <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br></pre></td></tr></table></figure><h3 id="将查询结果保留到一个新表中去"><a href="#将查询结果保留到一个新表中去" class="headerlink" title="将查询结果保留到一个新表中去"></a>将查询结果保留到一个新表中去</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_info_c <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info_b;</span><br></pre></td></tr></table></figure><h3 id="将查询结果保存到指定的文件目录（可以是本地，也可以-HDFS）"><a href="#将查询结果保存到指定的文件目录（可以是本地，也可以-HDFS）" class="headerlink" title="将查询结果保存到指定的文件目录（可以是本地，也可以 HDFS）"></a>将查询结果保存到指定的文件目录（可以是本地，也可以 HDFS）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/home/hadoop/test'</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">directory</span> <span class="string">'/aaa/bbb/'</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br></pre></td></tr></table></figure><h3 id="两表内连"><a href="#两表内连" class="headerlink" title="两表内连"></a>两表内连</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_info a <span class="keyword">join</span> emp_info b <span class="keyword">on</span> a.id = b.id;</span><br></pre></td></tr></table></figure><h3 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h3><p><strong>普通表和分区表区别：有大量数据增加的需要建分区表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(<span class="keyword">id</span> <span class="built_in">INT</span>, age <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="keyword">STRING</span>)</span><br><span class="line">partitioned <span class="keyword">by</span>(p_date <span class="keyword">STRING</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p>分区表加载数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'本地文件路径'</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> stu <span class="keyword">partition</span> (pubdate=<span class="string">'2010-08-22'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建一个带桶的表"><a href="#创建一个带桶的表" class="headerlink" title="创建一个带桶的表"></a>创建一个带桶的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bucket_stu (<span class="keyword">id</span> <span class="built_in">int</span> ,age <span class="built_in">int</span> ,<span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (p_date <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="keyword">id</span>) sorted <span class="keyword">by</span>(<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">3</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p><strong>分桶前要设置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.enforce.bucketing = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>向桶中添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> bucket_stu <span class="keyword">partition</span>(p_date=<span class="string">'0817'</span>) <span class="keyword">select</span> <span class="keyword">id</span>,age,<span class="keyword">name</span> <span class="keyword">from</span> stu <span class="keyword">where</span> p_date=<span class="string">'0817'</span>;</span><br></pre></td></tr></table></figure><h3 id="数据块抽样（tablesample-函数）"><a href="#数据块抽样（tablesample-函数）" class="headerlink" title="数据块抽样（tablesample() 函数）"></a>数据块抽样（tablesample() 函数）</h3><ol><li><p>tablesample(n percent) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(<span class="number">10</span> <span class="keyword">percent</span>);</span><br></pre></td></tr></table></figure></li><li><p>tablesample(n M) 指定抽样数据的大小，单位为M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(n M);</span><br></pre></td></tr></table></figure></li><li><p>tablesample(n rows) —— 默认map的数量是2 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(n <span class="keyword">rows</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="分桶抽样"><a href="#分桶抽样" class="headerlink" title="分桶抽样"></a>分桶抽样</h3><p>hive 中分桶其实就是根据某一个字段 Hash 取模，放入指定数据的桶中，比如将表 table_1 按照 ID 分成 100 个桶，其算法是 hash(id) % 100，这样，hash(id) % 100 = 0 的数据被放到第一个桶中，hash(id) % 100 = 1 的记录被放到第二个桶中。创建分桶表的关键语句为：CLUSTER BY 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TABLESAMPLE (BUCKET x OUT OF y [ON colname])</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_01 <span class="keyword">tablesample</span>(<span class="keyword">bucket</span> <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">10</span> <span class="keyword">on</span> <span class="keyword">rand</span>());</span><br></pre></td></tr></table></figure><p>其中 x 是要抽样的桶编号，桶编号从 1 开始，colname 表示抽样的列，y 表示桶的数量。 </p><h3 id="随机抽样（rand-函数）"><a href="#随机抽样（rand-函数）" class="headerlink" title="随机抽样（rand() 函数）"></a>随机抽样（rand() 函数）</h3><ol><li><p>使用 rand() 函数进行随机抽样，limit 关键字限制抽样返回的数据，其中 rand 函数前的 distribute 和 sort 关键字可以保证数据在 mapper 和 reducer 阶段是随机分布的（Map的个数由自己设置的个数决定）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">col</span>=xxx <span class="keyword">distribute</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">sort</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 order 关键词 (hive 会把 map 的个数设置回 1）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">col</span>=xxx <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hive&quot;&gt;&lt;a href=&quot;#Hive&quot; class=&quot;headerlink&quot; title=&quot;Hive&quot;&gt;&lt;/a&gt;Hive&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Hive 数据仓库&lt;/strong&gt;：用于存储数据，都是历史数据，不可变的数据，不能改，不能删，对于 hiv
      
    
    </summary>
    
      <category term="大数据" scheme="https://www.chentyit.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hive" scheme="https://www.chentyit.com/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装</title>
    <link href="https://www.chentyit.com/2019/08/17/Nginx%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/08/17/Nginx安装/</id>
    <published>2019-08-17T02:06:13.000Z</published>
    <updated>2019-08-17T02:25:07.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装必要的-C-等插件"><a href="#安装必要的-C-等插件" class="headerlink" title="安装必要的 C++ 等插件"></a>安装必要的 C++ 等插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ automake autoconf libtool make</span><br></pre></td></tr></table></figure><h2 id="安装-PCRE"><a href="#安装-PCRE" class="headerlink" title="安装 PCRE"></a>安装 PCRE</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pcre2-10.33.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/pcre2-10.33/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.8.1.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/nginx-1.8.1/</span><br><span class="line">./configure --prefix=/usr/local/nginx/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span> 启动需要到 Nginx 的目录下</span><br><span class="line">sbin/nginx -c conf/nginx.conf</span><br><span class="line"><span class="meta">#</span> 查看是否启动成功（80 端口启动)</span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    # index  index.html index.htm;</span><br><span class="line">    proxy_pass http://chentyit.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新加载一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">具体配置方式见官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装必要的-C-等插件&quot;&gt;&lt;a href=&quot;#安装必要的-C-等插件&quot; class=&quot;headerlink&quot; title=&quot;安装必要的 C++ 等插件&quot;&gt;&lt;/a&gt;安装必要的 C++ 等插件&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="网络" scheme="https://www.chentyit.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Nginx" scheme="https://www.chentyit.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop常见错误集</title>
    <link href="https://www.chentyit.com/2019/08/13/Hadoop%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    <id>https://www.chentyit.com/2019/08/13/Hadoop常见错误集/</id>
    <published>2019-08-13T04:40:21.000Z</published>
    <updated>2019-08-13T16:28:18.850Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg" alt="插图"></p><blockquote><p>摄影：<a href="https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Garrett Patz</a>，来自<a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Hadoop集群从节点出现错误（Connection-refused）"><a href="#Hadoop集群从节点出现错误（Connection-refused）" class="headerlink" title="Hadoop集群从节点出现错误（Connection refused）"></a>Hadoop集群从节点出现错误（Connection refused）</h2><p><img src="/2019/08/13/Hadoop常见错误集/Hadoop集群从节点出现错误.png" alt="Hadoop集群从节点出现错误"></p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Hadoop 集群 yarn-site.xml 配置错误：</p><p>默认情况下 yarn ResourceManager 相关服务IP地址指向的是0.0.0.0。</p><p>而在服务器中，0.0.0.0 指的是本机网络地址，那么 NodeManager 就会在本机找 ResourceManager 相关服务，而 slave 节点上并没有这些服务，这些服务在 ResourceManager Master 节点上。所以针对 Hadoop 集群配置 yare-site.xml 某些配置项不能使用默认配置。</p><p>注意：hadoop 伪分布式可以使用默认配置，因为所有服务都在本地运行</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>修改<strong>所有节点上</strong>yare-site.xml配置文件，在该文件中配置ResourceManager Master节点所在地址即可解决问题。详细配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MR本地提交集群运行"><a href="#MR本地提交集群运行" class="headerlink" title="MR本地提交集群运行"></a>MR本地提交集群运行</h2><p><img src="/2019/08/13/Hadoop常见错误集/MR本地提交集群运行错误.png" alt="MR本地提交集群运行错误"></p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>无法加载 core-site.xml 配置文件，没法找到 hdfs://ns 的路径，直接指定默认本地路径</p><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Maven 打包时没有将 XML 文件打包，所以运行程序时无法加载到 core-site.xml 文件</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在 pom.xml 文件的 <code>&lt;build&gt;&lt;/build&gt;</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再重新打包运行即可</p><h2 id="Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer"><a href="#Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer" class="headerlink" title="Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer"></a>Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer</h2><p><img src="/2019/08/13/Hadoop常见错误集/NoSuchMethodException.png" alt="NoSuchMethodException"></p><p>这个问题我花了很久时间，代码改了三次才运行成功</p><p>最后发现是因为 Mapper 和 Reducer 的传入值有问题，总结下来就是 Mapper 和 Reducer 的入参和出参的类型<strong>必须要使用 Hadoop 封装的类型，或者按照 Hadoop 要求封装的类型</strong>（自行封装的类，除了要实现 WritableComparable 接口，而且自定义类还必须要有<strong>无参构造方法</strong>），Hadoop 已封装类型如下：</p><p><img src="/2019/08/13/Hadoop常见错误集/Mapper和Reducer参数.png" alt="Mapper和Reducer参数"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄影：&lt;a href=&quot;https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Garrett Patz&lt;/a&gt;，来自&lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="开发问题解决" scheme="https://www.chentyit.com/tags/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题274（H指数）</title>
    <link href="https://www.chentyit.com/2019/07/27/LeetCode%E5%88%B7%E9%A2%98274%EF%BC%88H%E6%8C%87%E6%95%B0%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/27/LeetCode刷题274（H指数）/</id>
    <published>2019-07-27T07:30:26.000Z</published>
    <updated>2019-07-27T07:56:39.131Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。</span><br><span class="line"></span><br><span class="line">h 指数的定义: “h 代表“高引用次数”（high citations）</span><br><span class="line">一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。</span><br><span class="line">（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/h-index</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入: citations = [3,0,6,1,5]<br>输出: 3<br>解释: 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。由于研究者有 3 篇论文每篇至少被引用了 3 次，其余两篇论文每篇被引用不多于 3 次，所以她的 h 指数是 3。</p></blockquote><p><strong>思路（借鉴官网的题解）：</strong></p><ol><li><p>h 值意味着一个标准，将数组按照题目要求分成两个部分（我刚开始理解成这个标准是通过计算得到的，在阅读题解后发现，降序数组中，这种标准只是一个属性而已，也就是能通过数组规律直接找到）</p></li><li><p>将数组降序排列</p></li><li><p>找到 h 值，h 值就是 arr[i] == i 时的 值，将数值作图可以表示为（图片来源于<a href="https://pic.leetcode-cn.com/Figures/274_H_index.svg" target="_blank" rel="noopener">LeetCode 274题解</a>）：</p><p><img src="/2019/07/27/LeetCode刷题274（H指数）/274_H_index.png" alt="274_H_index"></p></li><li><p>h 值是 arr[i] &gt; i 的临界值，只要记录索引 i，就可以求出 h 值</p></li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序标准为降序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt; arr[i]) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[++index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">        qsort(citations, <span class="number">0</span>, citations.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录 h 值</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citations.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">            <span class="comment">// 即可求出 h 值</span></span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt; i) &#123;</span><br><span class="line">                h++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := arr[left]</span><br><span class="line">    index := left</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序标准为降序</span></span><br><span class="line">    <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; arr[i] &#123;</span><br><span class="line">            arr[index] = arr[i]</span><br><span class="line">            arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index] = value</span><br><span class="line"></span><br><span class="line">    qsort(arr, left, index - <span class="number">1</span>)</span><br><span class="line">    qsort(arr, index + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">    qsort(citations, <span class="number">0</span>, <span class="built_in">len</span>(citations) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 h 值</span></span><br><span class="line">    num := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> citations &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">        <span class="comment">// 即可求出 h 值</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; value &#123;</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h 指数的定义: “h 代表“高引用次数”（high citations）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/h-index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
