<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翼叶知秋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chentyit.com/"/>
  <updated>2019-08-13T16:13:53.661Z</updated>
  <id>https://www.chentyit.com/</id>
  
  <author>
    <name>Chen Tianyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop常见错误集</title>
    <link href="https://www.chentyit.com/2019/08/13/Hadoop%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    <id>https://www.chentyit.com/2019/08/13/Hadoop常见错误集/</id>
    <published>2019-08-13T04:40:21.000Z</published>
    <updated>2019-08-13T16:13:53.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg" alt="插图"></p><blockquote><p>摄影：<a href="https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Garrett Patz</a>，来自<a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Hadoop集群从节点出现错误（Connection-refused）"><a href="#Hadoop集群从节点出现错误（Connection-refused）" class="headerlink" title="Hadoop集群从节点出现错误（Connection refused）"></a>Hadoop集群从节点出现错误（Connection refused）</h2><p><img src="/2019/08/13/Hadoop常见错误集/Hadoop集群从节点出现错误.png" alt="Hadoop集群从节点出现错误"></p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Hadoop 集群 yarn-site.xml 配置错误：</p><p>默认情况下 yarn ResourceManager 相关服务IP地址指向的是0.0.0.0。</p><p>而在服务器中，0.0.0.0 指的是本机网络地址，那么 NodeManager 就会在本机找 ResourceManager 相关服务，而 slave 节点上并没有这些服务，这些服务在 ResourceManager Master 节点上。所以针对 Hadoop 集群配置 yare-site.xml 某些配置项不能使用默认配置。</p><p>注意：hadoop 伪分布式可以使用默认配置，因为所有服务都在本地运行</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>修改<strong>所有节点上</strong>yare-site.xml配置文件，在该文件中配置ResourceManager Master节点所在地址即可解决问题。详细配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MR本地提交集群运行"><a href="#MR本地提交集群运行" class="headerlink" title="MR本地提交集群运行"></a>MR本地提交集群运行</h2><p><img src="/2019/08/13/Hadoop常见错误集/Hadoop集群常见错误/MR本地提交集群运行错误.png" alt="MR本地提交集群运行错误"></p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>无法加载 core-site.xml 配置文件，没法找到 hdfs://ns 的路径，直接指定默认本地路径</p><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Maven 打包时没有将 XML 文件打包，所以运行程序时无法加载到 core-site.xml 文件</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在 pom.xml 文件的 <code>&lt;build&gt;&lt;/build&gt;</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再重新打包运行即可</p><h2 id="Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer"><a href="#Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer" class="headerlink" title="Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer"></a>Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer</h2><p><img src="/2019/08/13/Hadoop常见错误集/NoSuchMethodException.png" alt="NoSuchMethodException"></p><p>这个问题我花了很久时间，代码改了三次才运行成功</p><p>最后发现是因为 Mapper 和 Reducer 的传入值有问题，总结下来就是 Mapper 和 Reducer 的入参和出参的类型<strong>必须要使用 Hadoop 封装的类型，或者按照 Hadoop 要求封装的类型</strong>（自行封装的类，除了要实现 WritableComparable 接口，而且自定义类还必须要有<strong>无参构造方法</strong>），Hadoop 已封装类型如下：</p><p><img src="/2019/08/13/Hadoop常见错误集/Hadoop集群常见错误/Mapper和Reducer参数.png" alt="Mapper和Reducer参数"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄影：&lt;a href=&quot;https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Garrett Patz&lt;/a&gt;，来自&lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="开发问题解决" scheme="https://www.chentyit.com/tags/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题274（H指数）</title>
    <link href="https://www.chentyit.com/2019/07/27/LeetCode%E5%88%B7%E9%A2%98274%EF%BC%88H%E6%8C%87%E6%95%B0%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/27/LeetCode刷题274（H指数）/</id>
    <published>2019-07-27T07:30:26.000Z</published>
    <updated>2019-07-27T07:56:39.131Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。</span><br><span class="line"></span><br><span class="line">h 指数的定义: “h 代表“高引用次数”（high citations）</span><br><span class="line">一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。</span><br><span class="line">（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/h-index</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入: citations = [3,0,6,1,5]<br>输出: 3<br>解释: 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。由于研究者有 3 篇论文每篇至少被引用了 3 次，其余两篇论文每篇被引用不多于 3 次，所以她的 h 指数是 3。</p></blockquote><p><strong>思路（借鉴官网的题解）：</strong></p><ol><li><p>h 值意味着一个标准，将数组按照题目要求分成两个部分（我刚开始理解成这个标准是通过计算得到的，在阅读题解后发现，降序数组中，这种标准只是一个属性而已，也就是能通过数组规律直接找到）</p></li><li><p>将数组降序排列</p></li><li><p>找到 h 值，h 值就是 arr[i] == i 时的 值，将数值作图可以表示为（图片来源于<a href="https://pic.leetcode-cn.com/Figures/274_H_index.svg" target="_blank" rel="noopener">LeetCode 274题解</a>）：</p><p><img src="/2019/07/27/LeetCode刷题274（H指数）/274_H_index.png" alt="274_H_index"></p></li><li><p>h 值是 arr[i] &gt; i 的临界值，只要记录索引 i，就可以求出 h 值</p></li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序标准为降序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt; arr[i]) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[++index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">        qsort(citations, <span class="number">0</span>, citations.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录 h 值</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citations.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">            <span class="comment">// 即可求出 h 值</span></span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt; i) &#123;</span><br><span class="line">                h++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := arr[left]</span><br><span class="line">    index := left</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序标准为降序</span></span><br><span class="line">    <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; arr[i] &#123;</span><br><span class="line">            arr[index] = arr[i]</span><br><span class="line">            arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index] = value</span><br><span class="line"></span><br><span class="line">    qsort(arr, left, index - <span class="number">1</span>)</span><br><span class="line">    qsort(arr, index + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">    qsort(citations, <span class="number">0</span>, <span class="built_in">len</span>(citations) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 h 值</span></span><br><span class="line">    num := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> citations &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">        <span class="comment">// 即可求出 h 值</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; value &#123;</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h 指数的定义: “h 代表“高引用次数”（high citations）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/h-index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题1122（数组的相对排序）</title>
    <link href="https://www.chentyit.com/2019/07/25/LeetCode%E5%88%B7%E9%A2%981122%EF%BC%88%E6%95%B0%E7%BB%84%E7%9A%84%E7%9B%B8%E5%AF%B9%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/25/LeetCode刷题1122（数组的相对排序）/</id>
    <published>2019-07-25T14:01:06.000Z</published>
    <updated>2019-07-27T08:04:13.105Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给你两个数组，arr1 和 arr2，</span><br><span class="line"></span><br><span class="line">arr2 中的元素各不相同</span><br><span class="line">arr2 中的每个元素都出现在 arr1 中</span><br><span class="line">对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同</span><br><span class="line">未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/relative-sort-array</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入：arr1 = [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19], arr2 = [2, 1, 4, 3, 9, 6]<br>输出：[2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]</p></blockquote><p><strong>思路：</strong></p><ol><li>先将 arr2 中的元素存入到一个 Map 中，值为 key，下标索引为 index，作为排序的标准</li><li>将 arr1 分为两个部分，第一个部分包含 arr2 的元素，第二个部分不包含 arr2 的元素</li><li>将第一个部分按照 Map 中的规则进行排序，第二个部分按照升序排序</li><li>将两个部分的数组拼接起来</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用快速排序（我对快速排序情有独钟，但是之后会尝试一下归并排序）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@map</span> 这个是思路1中制定好的排序规则，用作排序条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(Integer[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 map 中取出对应 key 的 value</span></span><br><span class="line">            <span class="comment">// 获得该数值对应的序号</span></span><br><span class="line">            <span class="keyword">if</span> (map.get(value) &gt; map.get(arr[i])) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>, map);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] relativeSortArray(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个 Map 存放排序规则</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; numMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            numMap.put(arr2[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两个 list 存放 arr1 分割的两段数据</span></span><br><span class="line">        List&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; l2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numMap.containsKey(i)) &#123;</span><br><span class="line">                l1.add(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l2.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对第一段数据进行快速排序</span></span><br><span class="line">        Integer[] arrbefore = l1.toArray(<span class="keyword">new</span> Integer[l1.size()]);</span><br><span class="line">        qsort(arrbefore, <span class="number">0</span>, arrbefore.length - <span class="number">1</span>, numMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第二段数据放入数组中，进行简单选择排序</span></span><br><span class="line">        Integer[] arrafter = l2.toArray(<span class="keyword">new</span> Integer[l2.size()]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrafter.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arrafter.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrafter[i] &gt; arrafter[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> buf = arrafter[i];</span><br><span class="line">                    arrafter[i] = arrafter[j];</span><br><span class="line">                    arrafter[j] = buf;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新数组存放结果</span></span><br><span class="line">        <span class="keyword">int</span>[] arrResult = <span class="keyword">new</span> <span class="keyword">int</span>[arrbefore.length + arrafter.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存放第一部分的数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrbefore.length; i++) &#123;</span><br><span class="line">            arrResult[i] = arrbefore[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存放第二部分的数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrafter.length; i++) &#123;</span><br><span class="line">            arrResult[i + arrbefore.length] = arrafter[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用快速排序（我对快速排序情有独钟，但是之后会尝试一下归并排序）</span></span><br><span class="line"><span class="comment"> * @numMap 这个是思路1中制定好的排序规则，用作排序条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>, numMap <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := arr[left]</span><br><span class="line">    index := left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="comment">// 从 map 中取出对应 key 的 value</span></span><br><span class="line">        <span class="comment">// 获得该数值对应的序号</span></span><br><span class="line">        <span class="keyword">if</span> numMap[value] &gt; numMap[arr[i]] &#123;</span><br><span class="line">            arr[index] = arr[i]</span><br><span class="line">            arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index] = value</span><br><span class="line"></span><br><span class="line">    qsort(arr, left, index - <span class="number">1</span>, numMap)</span><br><span class="line">    qsort(arr, index + <span class="number">1</span>, right, numMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">relativeSortArray</span><span class="params">(arr1 []<span class="keyword">int</span>, arr2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 构建一个 Map 存放排序规则</span></span><br><span class="line">    numMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr2); i++ &#123;</span><br><span class="line">        numMap[arr2[i]] = i</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个数组存放 arr1 分割的两段数据</span></span><br><span class="line">    <span class="keyword">var</span> l1 []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> l2 []<span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置标志位</span></span><br><span class="line">    flag := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr1); i++ &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从 map 中找到对应的 key</span></span><br><span class="line">        <span class="comment">// 如果找到就存到 l1 中</span></span><br><span class="line">        <span class="comment">// 没找到就存到 l2 中</span></span><br><span class="line">        <span class="keyword">for</span> key, _ := <span class="keyword">range</span> numMap&#123;</span><br><span class="line">            <span class="keyword">if</span> arr1[i] == key &#123;</span><br><span class="line">                l1 = <span class="built_in">append</span>(l1, arr1[i])</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !flag &#123;</span><br><span class="line">            l2 = <span class="built_in">append</span>(l2, arr1[i])</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 l1 进行快速排序</span></span><br><span class="line">    qsort(l1, <span class="number">0</span>, <span class="built_in">len</span>(l1) - <span class="number">1</span>, numMap)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 l2 进行选择排序</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(l2) - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(l2); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> l2[i] &gt; l2[j] &#123;</span><br><span class="line">                l2[i], l2[j] = l2[j], l2[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个部分的数组（不得不说 golang 操作数组真的方便）</span></span><br><span class="line">    l1 = <span class="built_in">append</span>(l1, l2...)</span><br><span class="line">    <span class="keyword">return</span> l1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给你两个数组，arr1 和 arr2，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2 中的元素各不相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2 中的每个元素都出现在 arr1 中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/relative-sort-array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题1030（距离顺序排列矩阵单元格）</title>
    <link href="https://www.chentyit.com/2019/07/24/LeetCode%E5%88%B7%E9%A2%981030%EF%BC%88%E8%B7%9D%E7%A6%BB%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%88%97%E7%9F%A9%E9%98%B5%E5%8D%95%E5%85%83%E6%A0%BC%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/24/LeetCode刷题1030（距离顺序排列矩阵单元格）/</id>
    <published>2019-07-24T06:59:58.000Z</published>
    <updated>2019-07-27T08:04:08.020Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &lt;= r &lt; R 且 0 &lt;= c &lt; C。</span><br><span class="line"></span><br><span class="line">另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。</span><br><span class="line"></span><br><span class="line">返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，其中</span><br><span class="line">两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/matrix-cells-in-distance-order</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例1：</strong></p><blockquote><p>输入：R = 1, C = 2, r0 = 0, c0 = 0<br>输出：[[0,0],[0,1]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：R = 2, C = 2, r0 = 0, c0 = 1<br>输出：[[0,1],[0,0],[1,1],[1,0]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]<br>[[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：R = 2, C = 3, r0 = 1, c0 = 2<br>输出：[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]<br>其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]</p></blockquote><p><strong>思路：</strong></p><ol><li>用一个<strong>一位数组</strong>存下所有点</li><li>利用快速排序按照<strong>曼哈顿距离</strong>对所有的点进行排序</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 排序条件是各个点到目标点的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="comment">// 按照各个点到目标点的距离进行排序</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(value[<span class="number">0</span>] - r0) + Math.abs(value[<span class="number">1</span>] - c0) &gt;</span><br><span class="line">                    Math.abs(arr[i][<span class="number">0</span>] - r0) + Math.abs(arr[i][<span class="number">1</span>] - c0)) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>, r0, c0);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right, r0, c0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主要方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] allCellsDistOrder(<span class="keyword">int</span> R, <span class="keyword">int</span> C, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0) &#123;</span><br><span class="line">        <span class="comment">// 判断所传参数是否满足题目要求</span></span><br><span class="line">        <span class="keyword">if</span> ((R &gt; <span class="number">100</span>) || (R &lt; <span class="number">1</span>) || (C &gt; <span class="number">100</span>) || (C &lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用一个一位数组存放二维坐标</span></span><br><span class="line">        <span class="comment">// 实质上也是一个二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[R * C][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++) &#123;</span><br><span class="line">                <span class="comment">// 创建一个空间存放每个点的坐标</span></span><br><span class="line">                arr[i * C + j] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">                arr[i * C + j][<span class="number">0</span>] = i;</span><br><span class="line">                arr[i * C + j][<span class="number">1</span>] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行快速排序</span></span><br><span class="line">        qsort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, r0, c0);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * 排序条件是各个点到目标点的距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr [][]<span class="keyword">int</span>, left, right, r0, c0 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := arr[left]</span><br><span class="line">index := left</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="comment">// 按照各个点到目标点的距离进行排序</span></span><br><span class="line"><span class="keyword">if</span> math.Abs(<span class="keyword">float64</span>(value[<span class="number">0</span>] - r0)) + math.Abs(<span class="keyword">float64</span>(value[<span class="number">1</span>] - c0)) &gt;</span><br><span class="line">math.Abs(<span class="keyword">float64</span>(arr[i][<span class="number">0</span>] - r0)) + math.Abs(<span class="keyword">float64</span>(arr[i][<span class="number">1</span>] - c0)) &#123;</span><br><span class="line">arr[index] = arr[i]</span><br><span class="line">arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = value</span><br><span class="line"></span><br><span class="line">qsort(arr, left, index - <span class="number">1</span>, r0, c0)</span><br><span class="line">qsort(arr, index + <span class="number">1</span>, right, r0, c0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主要方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">allCellsDistOrder</span><span class="params">(R <span class="keyword">int</span>, C <span class="keyword">int</span>, r0 <span class="keyword">int</span>, c0 <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断所传参数是否满足题目要求</span></span><br><span class="line">    <span class="keyword">if</span> R &gt; <span class="number">100</span> || R &lt; <span class="number">1</span> || C &gt; <span class="number">100</span> || C &lt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 利用一个一位数组存放二维坐标</span></span><br><span class="line"><span class="comment">// 实质上也是一个二维数组</span></span><br><span class="line">    result := <span class="built_in">make</span>([][]<span class="keyword">int</span>, R * C)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; R; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; C; j++ &#123;</span><br><span class="line">            <span class="comment">// 创建一个空间存放每个点的坐标</span></span><br><span class="line">            result[i * C + j] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">            result[i * C + j][<span class="number">0</span>] = i</span><br><span class="line">            result[i * C + j][<span class="number">1</span>] = j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行快速排序</span></span><br><span class="line">    qsort(result, <span class="number">0</span>, <span class="built_in">len</span>(result) - <span class="number">1</span>, r0, c0)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &amp;lt;= r &amp;lt; R 且 0 &amp;lt;= c &amp;lt; C。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，其中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/matrix-cells-in-distance-order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题976（三角形的最大周长）</title>
    <link href="https://www.chentyit.com/2019/07/23/LeetCode%E5%88%B7%E9%A2%98976%EF%BC%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%91%A8%E9%95%BF%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/23/LeetCode刷题976（三角形的最大周长）/</id>
    <published>2019-07-23T11:12:49.000Z</published>
    <updated>2019-07-27T08:03:36.489Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。</span><br><span class="line"></span><br><span class="line">如果不能形成任何面积不为零的三角形，返回 0。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/largest-perimeter-triangle/</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例1：</strong></p><blockquote><p>输入：[2,1,2]<br>输出：5</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：[1,2,1]<br>输出：0</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：[3,2,3,4]<br>输出：10</p></blockquote><p><strong>示例4：</strong></p><blockquote><p>输入：[3,6,2,3]<br>输出：8</p></blockquote><p><strong>思路：</strong></p><ol><li>理清楚三角形特点，两边之和大于第三边 <code>A1 + A2 &gt; A3</code>，两边之差小于第三边 <code>|A1 - A2| &lt; A3</code></li><li>根据思路1可以得到在有序数组中，某一元素大于前两项之和即可</li><li>排序得到有序数组（升序降序随意）</li><li>根据思路 1 和 2 得到最大周长</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用的是快速排序</span></span><br><span class="line"><span class="comment">     * 具体说明就不详细写了，单独起新博客写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; arr[i]) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求出满足三角形条件的最大周长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestPerimeter</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断所给的数组长度是否满足 3 条边</span></span><br><span class="line">        <span class="keyword">if</span> (A.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 快速排序获得一个升序数组</span></span><br><span class="line">        qsort(A, <span class="number">0</span>, A.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设定一个最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 开始计算最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 计算出满足两边之和大于第三边的最大周长</span></span><br><span class="line">            <span class="keyword">if</span> ((A[i] &lt; (A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>])) &amp;&amp; (max &lt; A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>])) &#123;</span><br><span class="line">                max = A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最大周长</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用的是快速排序</span></span><br><span class="line"><span class="comment"> * 具体说明就不详细写了，单独起新博客写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := arr[left]</span><br><span class="line">index := left</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> value &gt; arr[i] &#123;</span><br><span class="line">arr[index] = arr[i]</span><br><span class="line">arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = value</span><br><span class="line"></span><br><span class="line">qsort(arr, left, index - <span class="number">1</span>)</span><br><span class="line">qsort(arr, index + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求出满足三角形条件的最大周长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestPerimeter</span><span class="params">(A []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断所给的数组长度是否满足 3 条边</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(A) &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 快速排序获得一个升序数组</span></span><br><span class="line">qsort(A, <span class="number">0</span>, <span class="built_in">len</span>(A) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 设定一个最大值</span></span><br><span class="line">max := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 开始计算最大值</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(A); i++ &#123;</span><br><span class="line">        <span class="comment">// 计算出满足两边之和大于第三边的最大周长</span></span><br><span class="line"><span class="keyword">if</span> (A[i] &lt; (A[i<span class="number">-1</span>] + A[i<span class="number">-2</span>])) &amp;&amp; (A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>] &gt; max) &#123;</span><br><span class="line">max = A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回最大周长</span></span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果不能形成任何面积不为零的三角形，返回 0。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/largest-perimeter-triangle/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题922（按奇偶排序数组 II）</title>
    <link href="https://www.chentyit.com/2019/07/23/LeetCode%E5%88%B7%E9%A2%98922%EF%BC%88%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%20II%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/23/LeetCode刷题922（按奇偶排序数组 II）/</id>
    <published>2019-07-23T11:02:05.000Z</published>
    <updated>2019-07-27T08:03:30.910Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。</span><br><span class="line"></span><br><span class="line">对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。</span><br><span class="line"></span><br><span class="line">你可以返回任何满足上述条件的数组作为答案。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/sort-array-by-parity-ii</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入：[4, 2, 5, 7]<br>输出：[4, 5, 2, 7]<br>解释：[4, 7, 2, 5]，[2, 5, 4, 7]，[2, 7, 4, 5] 也会被接受。</p></blockquote><p><strong>思路：</strong></p><ol><li>设置奇偶指针指向奇偶位</li><li>如果满足奇偶数条件，指针加 2，不满足，两个指针位互换</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sortArrayByParityII(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="comment">// 设置奇数指针</span></span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 设置偶数指针</span></span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 开始循环判断</span></span><br><span class="line">        <span class="keyword">while</span> (even &lt; A.length &amp;&amp; odd &lt; A.length) &#123;</span><br><span class="line">            <span class="comment">// 判断是否满足偶数条件</span></span><br><span class="line">            <span class="keyword">if</span> (A[even] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                even += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否满足奇数条件</span></span><br><span class="line">            <span class="keyword">if</span> (A[odd] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                odd += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不满足以上条件就交换两个指针的值</span></span><br><span class="line">            <span class="keyword">int</span> buf = A[even];</span><br><span class="line">            A[even] = A[odd];</span><br><span class="line">            A[odd] = buf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArrayByParityII</span><span class="params">(A []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置奇数指针</span></span><br><span class="line">even := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 设置偶数指针</span></span><br><span class="line">odd := <span class="number">1</span></span><br><span class="line">    <span class="comment">// 开始循环判断</span></span><br><span class="line"><span class="keyword">for</span> even &lt; <span class="built_in">len</span>(A) &amp;&amp; odd &lt; <span class="built_in">len</span>(A) &#123;</span><br><span class="line">        <span class="comment">// 判断是否满足偶数条件</span></span><br><span class="line">        <span class="keyword">if</span> A[even]%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            even += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否满足奇数条件</span></span><br><span class="line">        <span class="keyword">if</span> A[odd]%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">            odd += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不满足以上条件就交换两个指针的值</span></span><br><span class="line">        A[even], A[odd] = A[odd], A[even]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以返回任何满足上述条件的数组作为答案。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/sort-array-by-parity-ii&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++复制构造函数</title>
    <link href="https://www.chentyit.com/2019/07/19/C-%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://www.chentyit.com/2019/07/19/C-复制构造函数/</id>
    <published>2019-07-19T10:49:26.000Z</published>
    <updated>2019-07-19T10:54:18.318Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> n) &#123;</span><br><span class="line">value = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(A other) &#123;</span><br><span class="line">value = other.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a = <span class="number">10</span>;</span><br><span class="line">A b = a;</span><br><span class="line">b.Print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上述代码中，复制构造函数 <code>A(A other)</code> 传入的是 A 的一个实例，由于是传值参数，把形参复制到实参会调用复制构造函数，如果允许复制构造函数传值，就会在复制构造函数内调用复制构造函数，就会形成永久递归，导致栈溢出</p><p><strong>修改方案：</strong>将 <code>A(A other)</code> 修改为 <code>A(const A&amp; other)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(A other) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = other.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.Print();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="https://www.chentyit.com/categories/C/"/>
    
    
      <category term="剑指Offer" scheme="https://www.chentyit.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>C++的sizeof函数</title>
    <link href="https://www.chentyit.com/2019/07/19/C-%E7%9A%84sizeoff%E5%87%BD%E6%95%B0/"/>
    <id>https://www.chentyit.com/2019/07/19/C-的sizeoff函数/</id>
    <published>2019-07-19T10:27:10.000Z</published>
    <updated>2019-07-19T10:46:40.740Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chen</span> &#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Chen a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>定义一个空类型，里面没有任何成员变量和成员函数，对该类型求 sizeof，得到的结果是多少？</strong></p><p>正确答案：1</p><blockquote><p>空类型的实例中不包含任何信息，sizeof 的结果本应该是 0，但声明类型的时候应该在内存中占有一定的空间，否则无法使用，占用大小由编译器决定，在 Visual Studio 中占 1 字节空间</p></blockquote><p><strong>如果在该类型中添加构造函数和析构函数，sizeof 的值是多少</strong></p><p>正确答案：1</p><blockquote><p>调用构造函数和析构函数只需要找到函数在内存中的地址就可以了，函数地址只与类型有关，与类型的实例无关，编译器不会为这两个函数添加信息，所以 sizeof 的值不会改变</p></blockquote><p><strong>如果把析构函数改成虚函数，sizeof 的值是多少</strong></p><p>正确答案：根据计算机来说（32 位机是 4，64 位机是 8）</p><blockquote><p>C++ 编译器中，类型中一旦有虚函数，就会为类型生成虚函数表，并且为每一个实例添加一个指向虚函数表的指针，在 32 位机中，一个指针占 4 字节空间，64 位机中，一个指针占 8 字节空间</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Chen&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Chen a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="https://www.chentyit.com/categories/C/"/>
    
    
      <category term="剑指Offer" scheme="https://www.chentyit.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>Go语言的Goroutine</title>
    <link href="https://www.chentyit.com/2019/07/06/Go%E8%AF%AD%E8%A8%80%E7%9A%84Goroutine/"/>
    <id>https://www.chentyit.com/2019/07/06/Go语言的Goroutine/</id>
    <published>2019-07-06T04:49:06.000Z</published>
    <updated>2019-07-06T06:16:04.784Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><ul><li><strong>并发：</strong>多线程程序在一个核的 CPU 上运行</li><li><strong>并行：</strong>多线程程序在多个核的 CPU 上运行</li></ul><h2 id="协程和线程"><a href="#协程和线程" class="headerlink" title="协程和线程"></a>协程和线程</h2><ul><li><strong>协程：</strong>独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的</li><li><strong>线程：</strong>一个线程上可以跑多个协程，协程是轻量级的线程</li></ul><h2 id="goroutine-调度模型"><a href="#goroutine-调度模型" class="headerlink" title="goroutine 调度模型"></a>goroutine 调度模型</h2><ul><li><strong>M：</strong>线程，OS线程抽象，代表着真正执行计算的资源，在绑定有效的P后，进入schedule循环；而schedule循环的机制大致是从Global队列、P的Local队列以及wait队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到M，如此反复。M并不保留G状态，这是G可以跨M调度的基础，M的数量是不定的</li><li><strong>P：</strong>上下文，表示逻辑处理器， 对G来说，P相当于CPU核，G只有绑定到P(在P的local runq中)才能被调度。对M来说，P提供了相关的执行环境(Context)，如内存分配状态(mcache)，任务队列(G)等，P的数量决定了系统内最大可并行的G的数量（前提：物理CPU核数 &gt;= P的数量），P的数量由用户设置的GOMAXPROCS决定，但是不论GOMAXPROCS设置为多大，P的数量最大为256</li><li><strong>G：</strong>Goroutine，每个Goroutine对应一个G结构体，G存储Goroutine的运行堆栈、状态以及任务函数，可重用。G并非执行体，每个G需要绑定到P才能被调度执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;并发和并行&quot;&gt;&lt;a href=&quot;#并发和并行&quot; class=&quot;headerlink&quot; title=&quot;并发和并行&quot;&gt;&lt;/a&gt;并发和并行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发：&lt;/strong&gt;多线程程序在一个核的 CPU
      
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言的Struct</title>
    <link href="https://www.chentyit.com/2019/07/02/Go%E8%AF%AD%E8%A8%80%E7%9A%84Struct/"/>
    <id>https://www.chentyit.com/2019/07/02/Go语言的Struct/</id>
    <published>2019-07-02T03:18:45.000Z</published>
    <updated>2019-07-02T08:56:36.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">score <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Struct-的定义"><a href="#Struct-的定义" class="headerlink" title="Struct 的定义"></a>Struct 的定义</h2><p><strong>struct 定义的三种方式：</strong></p><ol><li>var stu Student</li><li>var stu *Student = new (Student)</li><li>var stu *Student = &amp;Student{}</li></ol><p>其中 2 和 3 返回的都是指向结构体的指针，访问形式如下：</p><p>stu.Name 或者 (*stu).Name</p><h2 id="Struct-的初始化"><a href="#Struct-的初始化" class="headerlink" title="Struct 的初始化"></a>Struct 的初始化</h2><p>struct 的内存布局：struct 中的所有字段在内存是连续的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Student</span><br><span class="line">stu.Age = <span class="number">18</span></span><br><span class="line">stu.Name = <span class="string">"hua"</span></span><br><span class="line">stu.score = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 *Student = &amp;Student&#123;</span><br><span class="line">Name:<span class="string">"cty"</span>,</span><br><span class="line">Age:<span class="number">21</span>,</span><br><span class="line">score:<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = Student&#123;</span><br><span class="line">Name:<span class="string">"cty"</span>,</span><br><span class="line">Age:<span class="number">21</span>,</span><br><span class="line">score:<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="built_in">new</span> (Student)</span><br><span class="line">stu3.Age = <span class="number">18</span></span><br><span class="line">stu3.Name = <span class="string">"hua"</span></span><br><span class="line">stu3.score = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">fmt.Println(stu)</span><br><span class="line">fmt.Println(*stu1)</span><br><span class="line">fmt.Println(stu2)</span><br><span class="line">fmt.Println(*stu3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua 18 80&#125;</span><br><span class="line">&#123;cty 21 100&#125;</span><br><span class="line">&#123;cty 21 100&#125;</span><br><span class="line">&#123;hua 18 80&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p><strong>golang 中的 struct 没有构造函数，一般可以使用工厂模式解决</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Student&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age:  age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>可以为 struct 中的每个字段写上一个 tag，这个tag 可以通过反射机制获取，最常用的就是 json 序列化和反序列化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"student_name"`</span></span><br><span class="line">Age   <span class="keyword">int</span>    <span class="string">`json:"student_age"`</span></span><br><span class="line">Score <span class="keyword">int</span>    <span class="string">`json:"student_score"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line">Name:  <span class="string">"sss"</span>,</span><br><span class="line">Age:   <span class="number">18</span>,</span><br><span class="line">Score: <span class="number">80</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := json.Marshal(stu)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json encode stu failed, err: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;student_name&quot;:&quot;sss&quot;,&quot;student_age&quot;:18,&quot;student_score&quot;:80&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Student &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	score &lt;span class=&quot;keyword&quot;&gt;float32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言切片</title>
    <link href="https://www.chentyit.com/2019/07/01/Go%E8%AF%AD%E8%A8%80%E5%88%87%E7%89%87/"/>
    <id>https://www.chentyit.com/2019/07/01/Go语言切片/</id>
    <published>2019-07-01T03:48:39.000Z</published>
    <updated>2019-07-01T07:26:57.794Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSlice</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> arr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice = arr[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice1 := slice[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">fmt.Println(slice1)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice1))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice2 := slice1[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice2)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>初学 Go 语言，疯狂踩坑，很多语法与 Java 不同，这是第一篇关于 Go 语言的学习笔记，开始记录一些学习中遇到的坑</p></blockquote><p>关于切片，在 Java，Python，JS 等语言中都有过类似的语法，但是人家那个叫做截取，就是截取一段新的数组出来，但是 GO 语言就是那个不一样的烟火，刚开始看的时候，就有点懵，今天终于搞懂了，就特地来记录一下，就拿上面这段代码举例，咱们先把运行结果贴出来，方便解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4 5]</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2]</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4]</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>我每次都打印一下 arr 就是为了看看切片的时候有没有影响到原数组（很明显没有）</p><p>现在来看源代码中的 <code>slice = arr[1:]</code> 这里就生成了第一块切片，也就是 [2, 3, 4, 5]，长度为 4，容量为 4，这个就是初始的切片</p><p>然后用 <code>slice1 := slice[0:1]</code> 得到 slice1，仍然没有影响到原数组，得到的切片就是 [2]，长度为 1，容量为 4，因为这个切片是从一个容量为 4 的切片中切出来的，容量不变，只是截取需要的值就行</p><p>最后用 <code>slice2 := slice1[0:3]</code> 得到 slice2，这里就和上面的解释一样的了，我就不赘述了</p><p>原本我以为从数组里面切出来后的切片再切，容量也会跟着变，但看样子，只要最初的的那个切片容量定了，那再由这个切面切出来的其他切面的容量也是一样，虽然目前看起来没什么用，但以后肯定会有机会用到的</p><blockquote><p>关于自学笔记的博客我不太喜欢用太过专业的词汇来描述，简单能理解就好了，Go 语言不得不说在我放弃 C++ 学习 Java 后，唯一一个能让我觉得优雅的语言（仅个人主观喜好）</p></blockquote><p><strong>补充：</strong></p><p>切片创建的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br><span class="line"><span class="comment">// 或者使用数组创建</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testSlice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice = arr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice1 := slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice2 := slice1[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS查缺补漏01（面向对象）</title>
    <link href="https://www.chentyit.com/2019/05/31/JS%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/31/JS查缺补漏01（面向对象）/</id>
    <published>2019-05-31T08:00:03.000Z</published>
    <updated>2019-05-31T08:21:33.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p><strong>内建对象：</strong></p><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用</p><p><strong>宿主对象：</strong></p><p>由 JS 的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p><strong>自建对象：</strong></p><p>由开发人员自己创建的对象</p><p><strong>删除对象属性：</strong> delete 对象.属性名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;对象的分类&quot;&gt;&lt;a href=&quot;#对象的分类&quot; class=&quot;headerlink&quot; title=&quot;对象的分类&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.chentyit.com/categories/JavaScript/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://www.chentyit.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day14）</title>
    <link href="https://www.chentyit.com/2019/05/22/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day14%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/22/SpringBoot学习笔记（Day14）/</id>
    <published>2019-05-22T00:12:34.000Z</published>
    <updated>2019-05-23T07:25:59.971Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="异步线程池"><a href="#异步线程池" class="headerlink" title="异步线程池"></a>异步线程池</h2><h3 id="定义线程池和开启异步可用"><a href="#定义线程池和开启异步可用" class="headerlink" title="定义线程池和开启异步可用"></a>定义线程池和开启异步可用</h3><p><strong>AsyncConfigurer 接口源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getAsyncExecutor 方法返回的是一个自定义的线程池，提供空闲线程来执行异步任务</li><li>AsyncUncaughtExceptionHandler 处理异常处理器方法，自定义处理异常</li><li>@EnableAsync 如果 Java 配置文件标注它，Spring 就会开启异步可用</li><li>@Async 驱动 Spring 使用异步调用</li></ul><p><strong>使用 Java 配置定义线程池和启用异步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义线程池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义线程池</span></span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 线程池最大线程数</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 线程队列最大线程数</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @EnableAsync 代表开启 Spring 异步，就可以使用 @Async 驱动 Spring 使用异步</p><p><strong>异步服务接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟报表生成的异步方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span>  <span class="comment">// 声明使用异步调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印异步线程名称</span></span><br><span class="line">        System.out.println(<span class="string">"报表线程名称：【"</span> + Thread.currentThread().getName() + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asyncPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求线程名称：【"</span> + Thread.currentThread() + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 调用异步服务</span></span><br><span class="line">        asyncService.generateReport();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"async"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求线程名称：【Thread[http-nio-8080-exec-1,5,main]】</span><br><span class="line">报表线程名称：【ThreadPoolTaskExecutor-1】</span><br></pre></td></tr></table></figure><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><h3 id="JMS-实例-——-ActiveMQ"><a href="#JMS-实例-——-ActiveMQ" class="headerlink" title="JMS 实例 —— ActiveMQ"></a>JMS 实例 —— ActiveMQ</h3><p><strong>配置 ActiveMQ 和 JMS 信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ActiveMQ 地址</span><br><span class="line">spring.activemq.broker-url=tcp://localhost:61616</span><br><span class="line"># 配置用户名和密码</span><br><span class="line">spring.activemq.user=admin</span><br><span class="line">spring.activemq.password=admin</span><br><span class="line"># 是否使用发布订阅模式，默认为false，即用的是点对点的模式</span><br><span class="line">spring.jms.pub-sub-domain=true</span><br><span class="line"># 默认目的地址</span><br><span class="line">spring.jms.template.default-destination=activemq.default.destination</span><br><span class="line"># 是否启用连接池</span><br><span class="line">spring.activemq.pool.enabled=true</span><br><span class="line"># 连接池最大连接数</span><br><span class="line">spring.activemq.pool.max-connections=50</span><br></pre></td></tr></table></figure><p><strong>定义 ActiveMQ 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveMQ 服务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActiveMQ 服务实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">        jmsTemplate.convertAndSend(message);</span><br><span class="line">        <span class="comment">// 自定义发送地址</span></span><br><span class="line">        <span class="comment">// jmsTemplate.convertAndSend("your-destination", message);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;spring.jms.template.default-destination&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>convertAndSend 是一个发送消息的方法</p><ol><li>首先 convert 转换，默认情况下 JmsTemplate 会提供一个 SimpleMessageConverter 去提供转换规则</li><li>发送信息（已经在配置文件下设置好了就不用写了）</li></ol><p>如果要发送一个对象，就要让对象实现 Serializable 接口以便序列化</p><p><strong>ActiveMQ 发送 POJO 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String myDestination = <span class="string">"my-destination"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 使用自定义地址发送对象</span></span><br><span class="line">        jmsTemplate.convertAndSend(myDestination, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监控自定义地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = myDestination)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 ActiveMQ 不信任 POJO 对象，所以要在配置文件中添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.packages.trusted=cn.chentyit.chapter13.pojo,java.lang</span><br><span class="line">spring.activemq.packages.trust-all=true</span><br></pre></td></tr></table></figure><ul><li>spring.activemq.packages.trusted 表示信任某个确定的包</li><li>spring.activemq.packages.trust-all 表示信任所有的包</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异步线程池&quot;&gt;&lt;a href=&quot;#异步线程池&quot; class=&quot;headerlink&quot; title=&quot;异步线程池&quot;&gt;&lt;/a&gt;异步线程池&lt;/h2&gt;&lt;h3 id=&quot;定义线程池和开启异步可用&quot;&gt;&lt;a href=&quot;#定义线程池和开启异步可
      
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day13）</title>
    <link href="https://www.chentyit.com/2019/05/21/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day13%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/21/SpringBoot学习笔记（Day13）/</id>
    <published>2019-05-20T23:58:53.000Z</published>
    <updated>2019-05-21T08:49:48.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/21/SpringBoot学习笔记（Day13）/小白.png" alt="插图"></p><a id="more"></a><h2 id="限制请求"><a href="#限制请求" class="headerlink" title="限制请求"></a>限制请求</h2><p>抽象类 WebSecurityConfigurerAdapter 提供了一个方法 configure(HttpSecurity)，通过它能够实现对于不同角色（用户）赋予不同权限的功能</p><p><strong>configure(HttpSecurity) 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只要通过验证就可以访问所有的请求</span></span><br><span class="line"><span class="comment">     * authorizeRequests 方法限定只对签名成功的用户请求</span></span><br><span class="line"><span class="comment">     * anyRequest 方法限定所有请求</span></span><br><span class="line"><span class="comment">     * authenticated 方法对所有签名成功的用户允许方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest())</span><br><span class="line">                    .authenticated()</span><br><span class="line">                    <span class="comment">// and 方法是连接词，formLogin 代表使用 Spring Security 默认的登录界面</span></span><br><span class="line">                    .and()).formLogin()</span><br><span class="line">        <span class="comment">// httpBasic 方法说明启用 HTTP 认证</span></span><br><span class="line">        .and()).httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>formLogin 方法配置了使用 Spring Security 的默认登录页面和 httpBasic 方法启用浏览器的 HTTP 基础认证方式</p><h3 id="配置请求路径访问权限"><a href="#配置请求路径访问权限" class="headerlink" title="配置请求路径访问权限"></a>配置请求路径访问权限</h3><p><strong>使用 Ant 风格配置限定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSecurityConfigurerAdapter 默认设定访问权限和登录方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 限定签名后的权限</span></span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">/* ============== 第一段 ============== */</span></span><br><span class="line">        authorizeRequests()</span><br><span class="line">        <span class="comment">// 限定 "/user/welcome" 请求赋予角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/welcome"</span>, <span class="string">"/user/details"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/" 先所有请求权限赋予角色 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/**"</span>).hasAnyAuthority(<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 其他路径允许签名后访问</span></span><br><span class="line">        .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第二段 ============== */</span></span><br><span class="line">        <span class="comment">// and 代表连接词</span></span><br><span class="line">        <span class="comment">// 对于没有配置权限的其他请求允许匿名访问</span></span><br><span class="line">        .and().anonymous()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第三段 ============== */</span></span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启动 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>权限方法说明</center><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>access(String)</td><td>参数为SpEL，如果返回为 true 则允许访问</td></tr><tr><td>anonymous()</td><td>允许匿名访问</td></tr><tr><td>authorizeRequests()</td><td>限定通过签名的请求</td></tr><tr><td>anyRequest()</td><td>限定任意的请求</td></tr><tr><td>hasAnyRole(String…)</td><td>将访问权限赋予多个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>hasRole(String)</td><td>将访问权限赋予一个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>permitAll()</td><td>无条件允许访问</td></tr><tr><td>and()</td><td>连接词，并取消之前限定前提规则</td></tr><tr><td>httpBasic()</td><td>启用浏览器的 HTTP 基础验证</td></tr><tr><td>formLogin()</td><td>启用 Spring Security 默认的登录页面</td></tr><tr><td>not()</td><td>对其他方法的访问采取求反</td></tr><tr><td>fullyAuthenticated()</td><td>如果是完整验证（并非 Remember-me），则允许访问</td></tr><tr><td>denyAll()</td><td>无条件不允许任何访问</td></tr><tr><td>hasIpAddress(String)</td><td>如果是给定的 IP 地址则允许访问</td></tr><tr><td>rememberme()</td><td>用户通过 Remember-me 功能验证就允许访问</td></tr><tr><td>hasAuthority(String)</td><td>如果是给定的角色就允许访问（不加入前缀 “ROLE_”）</td></tr><tr><td>hasAnyAuthority(String…)</td><td>如果是给定的角色中的任意一个就允许访问（不加入前缀 “ROLE_” ）</td></tr></tbody></table><p><strong>Spring 表达式设置权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 使用 Spring 表达式限定只有角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/**"</span>).access(<span class="string">"hasRole('USER') or hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 设置访问权限给角色 ROLE_ADMIN，要求是完整登录（非记住登录）</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN') &amp;&amp; isFullyAuthenticated()"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/welcome2" 访问权限给角色 ROLE_ADMIN，允许不完整登录</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome2"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 使用记住功能</span></span><br><span class="line">        .and().rememberMe()</span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启用 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>authentication()</td><td>用户认证对象</td></tr><tr><td>denyAll()</td><td>拒绝任何访问</td></tr><tr><td>hasAnyRole(String…)</td><td>当前用户是否存在参数中列明的对象属性</td></tr><tr><td>hasRole(String)</td><td>当前用户是否存在角色</td></tr><tr><td>hasIpAddress(String)</td><td>是否请求来自指定的 IP</td></tr><tr><td>isAnonymous()</td><td>是否匿名访问</td></tr><tr><td>isAuthenticated()</td><td>是否用户通过认证签名</td></tr><tr><td>isFullAuthenticated()</td><td>是否用户是完整验证，即非“记住我”功能通过的认证</td></tr><tr><td>isRememberMe()</td><td>是否是通过 “记住我” 功能通过的验证</td></tr><tr><td>permitAll()</td><td>无条件允许任何访问</td></tr><tr><td>principal()</td><td>用户的 principal 对象</td></tr></tbody></table><h2 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h2><h3 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h3><p><strong>Spring Boot 配置登录请求连接和 “记住我”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">// 访问 /admin 下的请求需要管理员权限</span></span><br><span class="line">        authorizeRequests().antMatchers(<span class="string">"/admin/**"</span>).access(<span class="string">"hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 启用 remember me 功能</span></span><br><span class="line">        .and().rememberMe().tokenValiditySeconds(<span class="number">86400</span>).key(<span class="string">"remember-me-key"</span>)</span><br><span class="line">        <span class="comment">// 启用 HTTP Basic 功能</span></span><br><span class="line">        .and().httpBasic()</span><br><span class="line">        <span class="comment">// 通过签名后可以访问任何请求</span></span><br><span class="line">        .and().authorizeRequests().antMatchers(<span class="string">"/**"</span>).permitAll()</span><br><span class="line">        <span class="comment">// 设置登录页和默认的跳转路径</span></span><br><span class="line">        .and().formLogin().loginPage(<span class="string">"/login/page"</span>).defaultSuccessUrl(<span class="string">"/admin/welcome1"</span>)</span><br><span class="line">        <span class="comment">// 登出页面和默认跳转路径</span></span><br><span class="line">        .and().logout().logoutUrl(<span class="string">"/logout/page"</span>).logoutSuccessUrl(<span class="string">"/welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>remember 启用了 “记住我” 功能，有效期为 1 天</li><li>浏览器中将使用 Cookie 以键 “remember-mu-key” 进行保存，并且以 MD5 加密</li><li>loginPage 是指定登录路径为 “/login/page”</li><li>defaultSuccessUrl 方法是指定默认的跳转路径为 “/admin/welcome1”</li></ul><p><strong>新增映射关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是的 /login/page 映射为 login.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="comment">// 使得 /login/page 映射为 logout_welcome.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"logout_welcome"</span>);</span><br><span class="line">        <span class="comment">// 使得 /logout 映射为 logout.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/logout"</span>).setViewName(<span class="string">"logout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/21/SpringBoot学习笔记（Day13）/小白.png&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day12）</title>
    <link href="https://www.chentyit.com/2019/05/20/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day12%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/20/SpringBoot学习笔记（Day12）/</id>
    <published>2019-05-20T02:03:15.000Z</published>
    <updated>2019-05-21T00:01:44.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/20/SpringBoot学习笔记（Day12）/小白.png" alt="插图"></p><h1 id="Spring-Security-安全"><a href="#Spring-Security-安全" class="headerlink" title="Spring Security 安全"></a>Spring Security 安全</h1><a id="more"></a><p><strong>Spring Boot 对 Spring Security 支持的配置项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY (SecurityProperties)</span><br><span class="line"># Spring Security 过滤器排序</span><br><span class="line">spring.security.filter.order=-100</span><br><span class="line"># 安全过滤器责任链拦截的分支类型</span><br><span class="line">spring.security.filter.dispatcher-types=async,error,request</span><br><span class="line"># 用户名</span><br><span class="line">spring.security.user.name=myuser</span><br><span class="line"># 用户密码</span><br><span class="line">spring.security.user.password=123456</span><br><span class="line"># 用户角色</span><br><span class="line">spring.security.user.roles=</span><br><span class="line"></span><br><span class="line"># SECURITY OATH2 CLIENT（OAuth2ClientProperties）</span><br><span class="line"># OAuth 提供者详情配置信息</span><br><span class="line">spring.security.oauth2.client.provider.*= #</span><br><span class="line"># OAuth 客户端登记信息</span><br><span class="line">spring.security.oauth2.client.registration.*=</span><br></pre></td></tr></table></figure><h2 id="使用-WebSecurityConfigurerAdapter-自定义"><a href="#使用-WebSecurityConfigurerAdapter-自定义" class="headerlink" title="使用 WebSecurityConfigurerAdapter 自定义"></a>使用 WebSecurityConfigurerAdapter 自定义</h2><p>WebSecurityConfigurerAdapter 中默认存在的三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置用户签名服务，主要是 user-details 机制，还可以给予用户赋予角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> auth 签名管理器构造器，用于构建用户具体权限控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置 Filter 链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> web  Spring Web Security 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置拦截保护的请求，比如请求放行，请求验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http  http 安全请求对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>对于使用 WebSecurity 参数的方法主要是配置 Filter 链的内容，可以配置 Filter 链忽略那些内容。</p><h2 id="自定义用户服务信息"><a href="#自定义用户服务信息" class="headerlink" title="自定义用户服务信息"></a>自定义用户服务信息</h2><h3 id="使用内存签名服务"><a href="#使用内存签名服务" class="headerlink" title="使用内存签名服务"></a>使用内存签名服务</h3><p><strong>使用内存用户（取消连接方法 and() ）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter12Application</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 密码编码器</span></span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">// 使用内存存储</span></span><br><span class="line">        InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; userConfig</span><br><span class="line">                = auth.inMemoryAuthentication().passwordEncoder(passwordEncoder);</span><br><span class="line">        <span class="comment">// 注册用户 admin，密码为 abc，并赋予 USER 和 ADMIN 的角色权限</span></span><br><span class="line">        userConfig.withUser(<span class="string">"admin"</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">"abc"</span>))</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>, <span class="string">"ROLE_ADMIN"</span>);</span><br><span class="line">        userConfig.withUser(<span class="string">"myuser"</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">"123456"</span>))</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用内存缓存用户信息方式不是主要方式，因为内存空间优先，而且会占用 JVM 内存空间</p><center>UserDetailsBuilder 方法简介</center><table><thead><tr><th>项目类型</th><th>描        述</th></tr></thead><tbody><tr><td>accountExpired(boolean)</td><td>设置账号是否过期</td></tr><tr><td>accountLocked(boolean)</td><td>是否锁定账号</td></tr><tr><td>credentialsExpired(boolean)</td><td>定义凭证是否过期</td></tr><tr><td>disabled(boolean)</td><td>是否禁用用户</td></tr><tr><td>username(String)</td><td>定义用户名</td></tr><tr><td>authorities(GrantedAuthority…)</td><td>赋予一个或者多个权限</td></tr><tr><td>authorities(List&lt;? extends GrantedAuthority)</td><td>使用列表（List）赋予权限</td></tr><tr><td>password(String)</td><td>定义密码</td></tr><tr><td>roles(String…)</td><td>赋予角色，会自动加入前缀 “ROLE_”</td></tr></tbody></table><h3 id="使用数据库定义用户认证服务"><a href="#使用数据库定义用户认证服务" class="headerlink" title="使用数据库定义用户认证服务"></a>使用数据库定义用户认证服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用和用户名称查询密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String pwdQuery = <span class="string">" select user_name, pwd, available from t_user3 where user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用用户名称查询角色信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String roleQuery = <span class="string">"select u.user_name, r.role_name "</span> +</span><br><span class="line">    <span class="string">"from t_user3 as u, t_user_role as ur, t_role as r "</span> +</span><br><span class="line">    <span class="string">"where u.id = ur.user_id, and r.id = ur.role_id "</span> +</span><br><span class="line">    <span class="string">"and u.user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖 WebSecurityConfigurerAdapter 用户详情方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> auth 用户签名管理器构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    auth.jdbcAuthentication()</span><br><span class="line">        <span class="comment">// 密码编码器</span></span><br><span class="line">        .passwordEncoder(passwordEncoder)</span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        .dataSource(dataSource)</span><br><span class="line">        <span class="comment">// 查询用户，自动判断密码是否一致</span></span><br><span class="line">        .usersByUsernameQuery(pwdQuery)</span><br><span class="line">        <span class="comment">// 赋予权限</span></span><br><span class="line">        .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置密码管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用和用户名称查询密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String pwdQuery = <span class="string">" select user_name, pwd, available from t_user3 where user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用用户名称查询角色信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String roleQuery = <span class="string">"select u.user_name, r.role_name "</span> +</span><br><span class="line">    <span class="string">"from t_user3 as u, t_user_role as ur, t_role as r "</span> +</span><br><span class="line">    <span class="string">"where u.id = ur.user_id, and r.id = ur.role_id "</span> +</span><br><span class="line">    <span class="string">"and u.user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入配置的钥匙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;system.user.password.secret&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String secret = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> Pbkdf2PasswordEncoder(<span class="keyword">this</span>.secret);</span><br><span class="line">    auth.jdbcAuthentication()</span><br><span class="line">        .passwordEncoder(passwordEncoder)</span><br><span class="line">        .dataSource(dataSource)</span><br><span class="line">        .usersByUsernameQuery(pwdQuery)</span><br><span class="line">        .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/20/SpringBoot学习笔记（Day12）/小白.png&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring-Security-安全&quot;&gt;&lt;a href=&quot;#Spring-Security-安全&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 安全&quot;&gt;&lt;/a&gt;Spring Security 安全&lt;/h1&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记01</title>
    <link href="https://www.chentyit.com/2019/05/18/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>https://www.chentyit.com/2019/05/18/Oracle学习笔记01/</id>
    <published>2019-05-18T00:26:13.000Z</published>
    <updated>2019-05-19T04:04:09.610Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>count() 如果字段为空，则不统计，* 全部统计</li><li>排序 asc 升序，desc 降序</li><li>通过其他表创建一个新表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP3 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> EMP_NO, EMP_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> EMP_NO &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="4"><li>左连接和右连接的主表信息全部显示：左连接的左表示主表，右连接的右表是主表</li><li>full join 全连接，有无关联都显示</li><li>左连接简写</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, d.DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP e, DEPT d</span><br><span class="line"><span class="keyword">WHERE</span> e.DEPTNO = d.DEPT_NO(+)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.EMP_NO</span><br></pre></td></tr></table></figure><ol start="7"><li>右连接简写</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, d.DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP e, DEPT d</span><br><span class="line"><span class="keyword">WHERE</span> e.DEPTNO(+) = d.DEPT_NO</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.EMP_NO</span><br></pre></td></tr></table></figure><ol start="8"><li><p>all 表示必须满足所有及结果集，any 表示满足其中一个结果集就可以</p></li><li><p>ROWID 获取物理地址</p></li><li><p>ROWNUM 在查询的列前面，添加序号</p></li><li><p>intersect 放在两个查询之间，表示取交集</p></li><li><p>union 表示取并集</p></li><li><p>minus 表示取差集</p></li><li><p>单行函数 / 聚合函数</p><p>单行函数：对每一个函数应用在表的记录中时，只能输入一行结果，返回一个结果.</p><p>聚合函数：聚合函数同时可以对多行数据进行操作，并返回一个结果.</p></li><li><p>decode函数</p><p><strong>decode</strong>(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p></li><li><p>case </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, (</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">900</span> <span class="keyword">THEN</span> <span class="string">'A'</span></span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">700</span> <span class="keyword">AND</span> e.SALARY &lt; <span class="number">900</span> <span class="keyword">THEN</span> <span class="string">'B'</span></span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">300</span> <span class="keyword">AND</span> e.SALARY &lt; <span class="number">700</span> <span class="keyword">THEN</span> <span class="string">'C'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'D'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">) lvl</span><br><span class="line"><span class="keyword">FROM</span> EMP e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lvl</span><br></pre></td></tr></table></figure><ol start="17"><li>恢复数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> NTUCTY.EMP</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">of</span> <span class="keyword">scn</span> <span class="number">12156162</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">FROM</span> EMP e</span><br><span class="line"><span class="keyword">WHERE</span> e.EMP_NO = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先运行这一条命令 启用行移动功能</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> NTUCTY.EMP <span class="keyword">enable</span> <span class="keyword">row</span> <span class="keyword">movement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在运行这一条 恢复数据</span></span><br><span class="line">flashback table NTUCTY.EMP to scn 12156162;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;count() 如果字段为空，则不统计，* 全部统计&lt;/li&gt;
&lt;li&gt;排序 asc 升序，desc 降序&lt;/li&gt;
&lt;li&gt;通过其他表创建一个新表&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sq
      
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle - 自学笔记" scheme="https://www.chentyit.com/tags/Oracle-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day11）</title>
    <link href="https://www.chentyit.com/2019/05/16/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day11%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/16/SpringBoot学习笔记（Day11）/</id>
    <published>2019-05-16T05:41:01.000Z</published>
    <updated>2019-05-20T01:47:14.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/16/SpringBoot学习笔记（Day11）/erik-kaha-1575002-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/9Nok_iZEgLk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Erik Kaha</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="REST-风格网站"><a href="#REST-风格网站" class="headerlink" title="REST 风格网站"></a>REST 风格网站</h2><h3 id="HTTP-动作"><a href="#HTTP-动作" class="headerlink" title="HTTP 动作"></a>HTTP 动作</h3><ul><li>GET（VISIT）：访问服务器资源（一个或多个资源）</li><li>POST（CREATE）：提交服务器资源信息，用来创建新的资源</li><li>PUT（UPDATE）：修改服务器已经存在的资源，使用 PUT 时需要把资源的所有属性一并提交</li><li>PATCH（UPDATE）：修改服务器已经存在的资源，使用 PATCH 时只需要将部分资源属性提交</li><li>DELETE（DELETE）：从服务器将资源删除</li></ul><h3 id="Spring-MVC-整合-REST"><a href="#Spring-MVC-整合-REST" class="headerlink" title="Spring MVC 整合 REST"></a>Spring MVC 整合 REST</h3><p>如果是简单参数，往往直接通过 URL 直接传递，在 Spring MVC 中可以使用注解 @PathVariable 进行获取。<strong>（动点脑子，复杂的你确定你会用 URL 传吗，肯定 JSON 啊）</strong></p><p><strong>@RequestBody</strong> 可以将请求体为 JSON 的数据转化为复杂的 Java 对象。</p><h3 id="处理-HTTP-状态码、异常和响应头"><a href="#处理-HTTP-状态码、异常和响应头" class="headerlink" title="处理 HTTP 状态码、异常和响应头"></a>处理 HTTP 状态码、异常和响应头</h3><p>Spring 提供了实体封装类 ResponseEntity 和注解 @ResponseStatus</p><ul><li>ResponseEntity 封装错误消息和状态码</li><li>@ResponseStatus 配置指定的响应码给客户端</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/16/SpringBoot学习笔记（Day11）/erik-kaha-1575002-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/9Nok_iZEgLk?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Erik Kaha&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day10）</title>
    <link href="https://www.chentyit.com/2019/05/15/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day10%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/15/SpringBoot学习笔记（Day10）/</id>
    <published>2019-05-15T07:34:19.000Z</published>
    <updated>2019-05-15T09:48:47.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/max-ducourneau-1580353-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/P_J3chFYwIU?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Max Ducourneau</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Spring-MVC-补充知识"><a href="#Spring-MVC-补充知识" class="headerlink" title="Spring MVC 补充知识"></a>Spring MVC 补充知识</h2><h3 id="ResponseBody-转换为-JSON-的原理"><a href="#ResponseBody-转换为-JSON-的原理" class="headerlink" title="@ResponseBody 转换为 JSON 的原理"></a>@ResponseBody 转换为 JSON 的原理</h3><p><center>@ResponseBody 注解转换为 JSON 流程图</center></p><p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/@ResponseBody 注解转换为 JSON 流程图.jpg" alt="@ResponseBody 注解转换为 JSON 流程图"></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>废话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(Long id, Model model)</span> </span>&#123;</span><br><span class="line">    User user = userService.getUser(id);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"data/user"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用字符串指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/user/show?id="</span> + user.getId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模型和视图指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">redirect2</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:/user/show?id="</span> + user.getId());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进版本</p><p><strong>重定向传递 Java 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 直接从数据模型 RedirectAttributes 对象中取出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/showUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(User user, Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"data/user"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用字符串指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ra</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String userName, String note, RedirectAttributes ra)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="comment">// 保存需要传递给重定向的对象</span></span><br><span class="line">    ra.addFlashAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/user/showUser"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模型和视图指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ra</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">redirect2</span><span class="params">(String userName, String note, RedirectAttributes ra)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="comment">// 保存需要传递给重定向的对象</span></span><br><span class="line">    ra.addFlashAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:/user/showUser"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中给方法中加入了 RedirectAttributes 对象参数，然后将 redirect1 和 redirect2 方法的用户信息通过 addFlashAttribute 保存起来，在执行重定向的时候，再将 user 对象传递</p><p>被 addFlashAttribute 保存的参数，在控制器执行完之后，会被保存到 Session 对象中；</p><p>执行重定向的时候，进入重定向前首先把 Session 中的参数取出，用以填充重定向方法的参数和数据模型，之后删除 Session 中的数据，执行重定向方法，并传递对象</p><center>重定向传递对象的流程图</center><p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/重定向传递对象的流程图.jpg" alt="重定向传递对象的流程图"></p><h3 id="操作会话对象"><a href="#操作会话对象" class="headerlink" title="操作会话对象"></a>操作会话对象</h3><ul><li>@SessionAttribute 应用于参数，将 HTTPSession 中的属性读出</li><li>@SessionAttributes 只能用于类的注解，将相关数据模型的属性保存到 Session 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(names = &#123;<span class="string">"user"</span>&#125;, types = Long.class)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/session"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id <span class="doctag">@SessionAttribute</span> 从 HttpSession 中取出数据，填充控制器方法参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@SessionAttribute(<span class="string">"id"</span>)</span> Long id, Model model) </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类型保存到 Session 中</span></span><br><span class="line">        model.addAttribute(<span class="string">"id_new"</span>, id);</span><br><span class="line">        User user = userService.getUser(id);</span><br><span class="line">        <span class="comment">// 根据名称保存到 Session 中</span></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"session/test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给控制器增加通知"><a href="#给控制器增加通知" class="headerlink" title="给控制器增加通知"></a>给控制器增加通知</h3><ul><li>@ControllerAdvice：定义一个控制器的通知类，允许定义一些关于增强控制器的各类通知和限定增强哪些控制器功能等；</li><li>@InitBinder：定义控制器参数绑定规则，如转换规则，格式化等，他会在参数转换之前执行；</li><li>@ExceptionHandler：定义控制器发生异常后的操作。发生异常后转跳到指定的友好页面；</li><li>@ModelAttribute：可以在控制器方法前执行，对数据模型进行操作；</li></ul><p><strong><em>（这里有点复杂，笔记没法描述清楚，请看《SpringBoot 深入浅出》第 245 页）</em></strong></p><h3 id="获取请求头参数"><a href="#获取请求头参数" class="headerlink" title="获取请求头参数"></a>获取请求头参数</h3><p><strong>带请求头的 HTTP 请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.post(&#123;</span><br><span class="line">    url : <span class="string">"$&#123;pageContext.request.contextPath&#125;/user/header/user"</span>,</span><br><span class="line">    <span class="comment">// 设置请求头参数</span></span><br><span class="line">    headers : &#123;<span class="attr">id</span> : <span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="comment">// 成功后的方法</span></span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.id == <span class="literal">null</span>) &#123;</span><br><span class="line">            alert(<span class="string">"获取失败"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 弹出请求返回的用户信息</span></span><br><span class="line">        alert(<span class="string">"id="</span> + user.id +<span class="string">", user_name="</span></span><br><span class="line">              +user.userName+<span class="string">", note="</span>+ user.note);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中的 “headers : {id : ‘1’}” 设置了一个请求头，是一个键为 id 而值为 1 的请求头</p><p><strong>使用 @RequestHeader 接收请求头参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 <span class="doctag">@RequestHeader</span> 接收请求头参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/header/user"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">headerUser</span><span class="params">(@RequestHeader(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        User user = userService.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过注解 @RequestHeader(“id”) 获取请求请求头中的的 id 键值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/15/SpringBoot学习笔记（Day10）/max-ducourneau-1580353-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/P_J3chFYwIU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Max Ducourneau&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day09）</title>
    <link href="https://www.chentyit.com/2019/05/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day09%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/14/SpringBoot学习笔记（Day09）/</id>
    <published>2019-05-14T00:30:42.000Z</published>
    <updated>2019-05-14T11:06:21.750Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/sid-verma-1387708-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/5BsNkTMbZZ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Sid Verma</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="Spring-MVC-对文件上传的支持"><a href="#Spring-MVC-对文件上传的支持" class="headerlink" title="Spring MVC 对文件上传的支持"></a>Spring MVC 对文件上传的支持</h3><center>文件请求转换类之间的关系</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/文件请求转换类之间的关系.jpg" alt="文件请求转换类之间的关系"></p><p>Spring MVC 会将 HttpServletRequest 对象转化为 MultipartHttpServletRequest 对象；</p><p>上传文件时，还需要配置 MultipartHttpServletRequest，是通过 MultipartResolver 接口实现的；</p><p>MultipartResolver 有两个实现类：StandardServletMultipartResolver 和 CommonsMultipartResolver，推荐使用前者进行文件上传（如果没有自定义 MultipartResolver，Spring Boot 自定创建 StandardServletMultipartResolver 对象）；</p><p><strong>文件上传配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line"># 是否启用 Spring MVC 多分部上传功能</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 将文件写入磁盘的阈值。值可以使用后缀&quot;MB&quot;或&quot;KB&quot;来表示兆字节或字节大小</span><br><span class="line">spring.servlet.multipart.file-size-threshold=0</span><br><span class="line"># 指定默认上传的文件夹</span><br><span class="line">spring.servlet.multipart.location=</span><br><span class="line"># 限制单个文件最大大小</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB</span><br><span class="line"># 限制所有文件最大大小</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"># 是否延迟多部文件请求的参数和文件的解析</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false</span><br></pre></td></tr></table></figure><p><strong>上传文件 Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开文件上传请求页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指向 JSP 的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/upload/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/file/upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用HTTPServletRequest 作为参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/request"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        MultipartHttpServletRequest mreq = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 强制转换为 MultipartHttpServletRequest 接口对象</span></span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> MultipartHttpServletRequest) &#123;</span><br><span class="line">            mreq = (MultipartHttpServletRequest) request;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 MultipartFile 文件信息</span></span><br><span class="line">        MultipartFile mf = mreq.getFile(<span class="string">"file"</span>);</span><br><span class="line">        <span class="comment">// 获取源文件名称</span></span><br><span class="line">        String fileName = mf != <span class="keyword">null</span> ? mf.getOriginalFilename() : <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            mf.transferTo(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 Spring MVC 的 MultipartFile 类作为参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/multipart"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadMultipartFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        File dest = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/part"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadPart</span><span class="params">(Part file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取提交文件名称</span></span><br><span class="line">        String fileName = file.getSubmittedFileName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            file.write(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理上传文件结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">dealRequestMap</span><span class="params">(<span class="keyword">boolean</span> success, String msg)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"success"</span>, success);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>当请求来到 DispatcherServlet 时，会根据 HandlerMapping 的机制找到处理器，这样就会返回一个 HandlerExecution 对象，这个对象包含处理器和拦截器，拦截器会对处理器进行拦截。</p><h3 id="拦截器的设计"><a href="#拦截器的设计" class="headerlink" title="拦截器的设计"></a>拦截器的设计</h3><p><strong>HandlerInterceptor 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器执行前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器处理后方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器完成后方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>拦截器执行过程</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/拦截器执行过程.jpg" alt="拦截器执行过程"></p><ol><li>执行 preHandle 方法，返回一个布尔值，如果为 false，则结束所有流程；如果为 true，则执行下一步</li><li>执行处理器逻辑，它包含控制器的功能</li><li>执行 postHandle 方法</li><li>执行视图解析和视图渲染</li><li>执行 afterCompletion 方法</li></ol><p><strong>自定义简单拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器前方法"</span>);</span><br><span class="line">        <span class="comment">// 返回 true，不会拦截后续的处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器后方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器完成方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter10Application</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter10Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册拦截器到 Spring MVC 机制，然后会返回一个拦截器注册</span></span><br><span class="line">        InterceptorRegistration ir = registry.addInterceptor(<span class="keyword">new</span> Interceptor1());</span><br><span class="line">        <span class="comment">// 指定拦截匹配模式，限制拦截器拦截请求</span></span><br><span class="line">        ir.addPathPatterns(<span class="string">"/interceptor/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果注册多个，和上面一样配置</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><h3 id="国际化消息源"><a href="#国际化消息源" class="headerlink" title="国际化消息源"></a>国际化消息源</h3><p>大部分情况下，是使用 JDK 的 ResourceBundle 处理国际化信息的，为此这里主要使用 ResourceBundleMessageSource 这个国际化消息源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 设置国际化消息是否总是采用格式化，默认 false</span><br><span class="line">spring.messages.always-use-message-format=false</span><br><span class="line"># 设置国际化属性名称，如果可以使用逗号分隔，默认为 message</span><br><span class="line">spring.messages.basename=messages</span><br><span class="line"># 设置国际化消息缓存超时秒数，默认为永远不过期，如果为 0 表示每次都重新加载</span><br><span class="line">spring.messages.cache-duration=</span><br><span class="line"># 国际化消息编码</span><br><span class="line">spring.messages.encoding=utf-8</span><br><span class="line"># 如果没有找到特定区域设置的文件，则设置是否返回到系统区域设置</span><br><span class="line">spring.messages.fallback-to-system-locale=true</span><br><span class="line"># 是否使用消息编码作为默认的响应消息，而非抛出 NoSuchMessageException 异常，建议只在开发时使用</span><br><span class="line">spring.messages.use-code-as-default-message=false</span><br></pre></td></tr></table></figure><h3 id="国际化解析器"><a href="#国际化解析器" class="headerlink" title="国际化解析器"></a>国际化解析器</h3><ul><li>AcceptHeaderLocaleResolver：使用浏览器头请求去实现国际化区域</li><li>FixedLocaleResolve：固定国际化区域。</li><li>CookieLocaleResolve：将国际化区域信息设置在浏览器 Cookie 中，使得系统可以从 Cookie 中读取国际化信息来确定用户的国际化区域</li><li>SessionLocaleResolve：类似于 CookieLocaleResolve，只是将国际化信息设置在 Session 中，这样就能读取 Session 中的信息去确定用户的国际化区域</li></ul><center>国际化解析器设计</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/国际化解析器设计.jpg" alt="国际化解析器设计"></p><center>Spring MVC 国际化流程图</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/Spring MVC 国际化流程图.jpg" alt="Spring MVC 国际化流程图"></p><p>LocaleChangeInterceptor 拦截器可以通过请求参数来确定国际化，同时吧请求参数保存到 Session 中。</p><p><strong>在 Spring Boot 启动 java 文件中添加国家化解析器和拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国际化解析器</span></span><br><span class="line"><span class="comment">     * Bean Name 要为 localeResolve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"localeResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">initLocaleResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver slr = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        <span class="comment">// 默认国际化区域</span></span><br><span class="line">        slr.setDefaultLocale(Locale.SIMPLIFIED_CHINESE);</span><br><span class="line">        <span class="keyword">return</span> slr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建国际化拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lci != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lci;</span><br><span class="line">        &#125;</span><br><span class="line">        lci.setParamName(<span class="string">"language"</span>);</span><br><span class="line">        <span class="keyword">return</span> lci;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给处理器增加国际化拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里将通过国际化拦截器的 preHandle 方法对请求的国际化区域参数进行修改</span></span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>initLocaleResolver 方法创建了一个国际化拦截器，有两点需要注意，第一，保证 BeanName 为 “localeResolver”；第二，设置了默认语言为简体中文；</li><li>localeChangeInterceptor 方法创建国际化拦截器，这里设置拦截参数为 “language”；</li><li>addInterceptors 方法将拦截器添加到 Spring MVC 中；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/14/SpringBoot学习笔记（Day09）/sid-verma-1387708-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/5BsNkTMbZZ0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sid Verma&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day08）</title>
    <link href="https://www.chentyit.com/2019/05/11/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day08%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/11/SpringBoot学习笔记（Day08）/</id>
    <published>2019-05-11T01:06:18.000Z</published>
    <updated>2019-05-14T11:06:51.556Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/asoggetti-1486419-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">asoggetti</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="处理器映射"><a href="#处理器映射" class="headerlink" title="处理器映射"></a>处理器映射</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="comment">// 配置请求映射名称</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过路径映射</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过路径映射回 path 配置项</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定只响应 HTTP 请求类型，如 GET，POST，HEAD，OPTIONS，PUT，TRACE 等</span></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当存在对应的 HTTP 参数时才响应请求</span></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定请求头存在对应的参数时才响应</span></span><br><span class="line">    String[] headers() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定 HTTP 请求体提交类型，如 "application/json"、"text/html"</span></span><br><span class="line">    String[] consumes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定返回的内容类型，仅当 HTTP 请求头中的（Accept）类型中包含该指定类型时才返回</span></span><br><span class="line">    String[] produces() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取控制器参数"><a href="#获取控制器参数" class="headerlink" title="获取控制器参数"></a>获取控制器参数</h2><p>处理器是对控制器的包装，处理器运行过程中会调度控制器的方法，只是它在进入控制器方法之前会对 HTTP 的参数和上下文进行解析</p><h3 id="无注解下获取参数"><a href="#无注解下获取参数" class="headerlink" title="无注解下获取参数"></a>无注解下获取参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在无注解下获取参数，要求参数名称和 HTTP 参数名称一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intVal —— 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> longVal —— 长整型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string —— 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应 JSON 参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/no/annotation"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">noAnnotation</span><span class="params">(Integer intVal, Long longVal, String string)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intVal"</span>, intVal);</span><br><span class="line">    paramsMap.put(<span class="string">"longVal"</span>, longVal);</span><br><span class="line">    paramsMap.put(<span class="string">"str"</span>, string);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestParam-获取参数"><a href="#使用-RequestParam-获取参数" class="headerlink" title="使用 @RequestParam 获取参数"></a>使用 @RequestParam 获取参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过注解 <span class="doctag">@RequestParam</span> 获取参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intVal —— 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> longVal —— 长整型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strVal —— 字符串，在默认情况下，标注的参数是不能为空的，为了能让它为空，可以配置其属性 required 为 false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应 JSON 数据集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/annotation"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">requestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(<span class="string">"int_val"</span>)</span> Integer intVal,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"long_val"</span>)</span> Long longVal,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"str_val"</span>, required = <span class="keyword">false</span>)</span> String strVal) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intVal"</span>, intVal);</span><br><span class="line">    paramsMap.put(<span class="string">"longVal"</span>, longVal);</span><br><span class="line">    paramsMap.put(<span class="string">"strVal"</span>, strVal);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/requestArray"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">requestArray</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>[] intArr, Long[] longArr, String[] strArr)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intArr"</span>, intArr);</span><br><span class="line">    paramsMap.put(<span class="string">"longArr"</span>, longArr);</span><br><span class="line">    paramsMap.put(<span class="string">"strArr"</span>, strArr);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递-JSON"><a href="#传递-JSON" class="headerlink" title="传递 JSON"></a>传递 JSON</h3><p>方法的参数标注为 @RequestBody，意味着它将接受前端提交的 JSON 请求体，在 JSON 请求体与 User 类之间的属性名称保持一致的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 通过 <span class="doctag">@RequestBody</span> 注解得到 JSON 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 回填 id 后的用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">insert</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-URL-传递参数"><a href="#通过-URL-传递参数" class="headerlink" title="通过 URL 传递参数"></a>通过 URL 传递参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过 @GetMapping 指定一个 URL，然后用 {…} 来标明参数的位置和名称，这里指定名称为 id，Spring MVC 就会根据请求去匹配这个方法；@PathVariable 配置的字符串为 id，它对应 URL 的参数声明，这样 Spring 就知道如何从 URL 中获取参数。</p><h3 id="获取格式化参数"><a href="#获取格式化参数" class="headerlink" title="获取格式化参数"></a>获取格式化参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/format/commit"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">format</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</span> Date date,</span></span><br><span class="line"><span class="function">    @<span class="title">NumberFormat</span><span class="params">(pattern = <span class="string">"#,###,##"</span>)</span> Double number) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    dataMap.put(<span class="string">"date"</span>, date);</span><br><span class="line">    dataMap.put(<span class="string">"number"</span>, number);</span><br><span class="line">    <span class="keyword">return</span> dataMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@DateTimeFormat 和 @NumberFormat 配置了格式话所约定的格式</p><p>在 Spring Boot 中，日期参数的格式化也可以不使用 @DateTimeFormat，而只在配置文件 application.properties 中加入如下配置：</p><p>spring.mvc.date-format=yyyy-MM-dd</p><h2 id="自定义参数转换规则"><a href="#自定义参数转换规则" class="headerlink" title="自定义参数转换规则"></a>自定义参数转换规则</h2><h3 id="处理器获取参数逻辑"><a href="#处理器获取参数逻辑" class="headerlink" title="处理器获取参数逻辑"></a>处理器获取参数逻辑</h3><p><strong>HttpMessageConverter 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 是否可读，其中 clazz 为 Java 类型，mediaType 为 HTTP 请求类型</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 clazz 类型是否能够转换为 mediaType 媒体类型</span></span><br><span class="line">    <span class="comment">// 其中 clazz 为 java 类型，mediaType 为 HTTP 响应类型</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可支持的媒体类型列表</span></span><br><span class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 canRead 验证通过后，读入 HTTP 请求信息</span></span><br><span class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 canWrite 方法验证通过后，写入响应</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T var1, @Nullable MediaType var2, HttpOutputMessage var3)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring MVC 中，是通过 WebDataBinder 机制来获取参数的，作用是解析 HTTP 请求上下文，在控制器的调用之前，转换参数并且提供验证的功能，为调用控制器方法做准备；</p><p>处理器会从 HTTP 请求中读取数据，然后通过三类接口进行各类参数转换，分别是 Converter，Formatter 和 GenericConverter</p><center>Spring MVC 处理器 HTTP 请求体转换流程图</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/Spring MVC 处理器 HTTP 请求体转换流程图.jpg" alt="Spring MVC 处理器 HTTP 请求体转换流程图"></p><p>Convert：是一个普通的转换器</p><p>Formatter：是一个格式转换器</p><p>GenericConverter：将 HTTP 参数转换为数组</p><center>ConversionService 转化机制设计</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/ConversionService转化机制设计.jpg" alt="ConversionService转化机制设计"></p><p><strong>Spring Boot 的自动注册机制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 Converter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 GenericConverter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 Formatter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;</span><br><span class="line">        registry.addFormatter(formatter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot 初始化时，会将对应用户自定义的 Converter，Formatter 和 GenericConverter 的实现类所创建的 Spring Bean 自动的注册到 DefaultFormattingConversionService 对象中。</p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="JSR-303-验证"><a href="#JSR-303-验证" class="headerlink" title="JSR-303 验证"></a>JSR-303 验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorPojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非空判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Future</span>(message = <span class="string">"需要一个将来日期"</span>)      <span class="comment">// 只能是将来的日期</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)  <span class="comment">// 日期格式化</span></span><br><span class="line">    <span class="meta">@NotNull</span>                                 <span class="comment">// 不能为空</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@DecimalMin</span>(value = <span class="string">"0.1"</span>)               <span class="comment">// 最小值 0.1 元</span></span><br><span class="line">    <span class="meta">@DecimalMax</span>(value = <span class="string">"10000.00"</span>)          <span class="comment">// 最大值为 10000 元</span></span><br><span class="line">    <span class="keyword">private</span> Double doubleValue = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"最小值为1"</span>)    <span class="comment">// 最小值为 1</span></span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">38</span>, message = <span class="string">"最大值为88"</span>)  <span class="comment">// 最大值为 88</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Range</span>(min = <span class="number">1</span>, max = <span class="number">888</span>, message = <span class="string">"范围为1至888"</span>)    <span class="comment">// 限定范围</span></span><br><span class="line">    <span class="keyword">private</span> Long range;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">20</span>, max = <span class="number">30</span>, message = <span class="string">"字符串长度还要求20到30之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后台验证方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析验证参数错误</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vp —— 需要验证的 POJO，使用注解 <span class="doctag">@Valid</span> 表示验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errors —— 错误信息，它由 Spring MVC 通过验证 POJO 后自动填充</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/valid/validate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">validate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Valid @RequestBody ValidatorPojo vp,</span></span></span><br><span class="line"><span class="function"><span class="params">    Errors errors)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取错误列表</span></span><br><span class="line">    List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError oe : oes) &#123;</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 字段错误</span></span><br><span class="line">        <span class="keyword">if</span> (oe <span class="keyword">instanceof</span> FieldError) &#123;</span><br><span class="line">            FieldError fe = (FieldError) oe;</span><br><span class="line">            key = fe.getField();        <span class="comment">// 获取错误验证字段名</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非字段错误</span></span><br><span class="line">            key = oe.getObjectName();   <span class="comment">// 获取验证对象名称</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 错误信息</span></span><br><span class="line">        msg = oe.getDefaultMessage();</span><br><span class="line">        errMap.put(key, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ResponseBody</strong> 代表接收一个 JSON 参数，然后 <strong>@Valid</strong> 注解则表示启动验证机制，Spring 就会启用 JSR-303 验证机制进行验证，自动地将最后的验证结果放入 Errors 对象中；</p><h3 id="参数验证机制"><a href="#参数验证机制" class="headerlink" title="参数验证机制"></a>参数验证机制</h3><p><strong>验证接口定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判定当前验证器是否支持该 Class 类型的验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz —— POJO 类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前验证器是否支持该 POJO 验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果 supports 返回 true，则这个方法执行验证逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 被验证 POJO 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errors 错误对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>supports 方法参数为需要验证的 POJO 类型，如果该方法返回 true，则 Spring 会使用当前验证器的 validate 方法验证 POJO；</p><p>validate 方法包含需要的 target 对象和错误对象 errors，其中 target 是参数绑定后的 POJO，可以通过这个参数对象进行业务逻辑的自定义验证，如果发现错误，则保存到 errors 对象中，返回给控制器；</p><p><strong>自定义用户验证器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证只支持 User 类验证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.equals(User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象为空</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 直接在参数出报错，这样就不能进入控制器的方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">""</span>, <span class="keyword">null</span>, <span class="string">"用户不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 强制转换</span></span><br><span class="line">        User user = (User) target;</span><br><span class="line">        <span class="comment">// 用户名非空串</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getUserName())) &#123;</span><br><span class="line">            <span class="comment">// 增加错误，可以进入控制器方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">"userName"</span>, <span class="keyword">null</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 中提供了一个注解 @InitBinder，他的作用是在执行控制器方法前，处理器会限制性被 @InitBinder 标注的方法。这是可以将 WebDataBinder 对象最为参数传递到方法中，得到 WebDataBinder 对象，该对象有 setValidator方法，可以绑定自定义的验证器，在获取参数后，通过自定义的验证器去验证参数。</p><h2 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h2><h3 id="视图设计"><a href="#视图设计" class="headerlink" title="视图设计"></a>视图设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应状态属性</span></span><br><span class="line">String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + <span class="string">".responseStatus"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径变量</span></span><br><span class="line">String PATH_VARIABLES = View.class.getName() + <span class="string">".pathVariables"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择内容类型</span></span><br><span class="line">String SELECTED_CONTENT_TYPE = View.class.getName() + <span class="string">".selectedContentType"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应类型</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getContentType 方法是获取 HTTP 响应类型，它可以返回的类型是文本，JSON 数据集或者文件等</li><li>render 方法则是将数据模型渲染到视图的，model 参数是数据类型，</li></ul><center>Spring MVC 常用视图关系模型</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/Spring MVC 常用视图关系模型.jpg" alt="Spring MVC 常用视图关系模型"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/11/SpringBoot学习笔记（Day08）/asoggetti-1486419-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;asoggetti&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
