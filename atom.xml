<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翼叶知秋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chentyit.com/"/>
  <updated>2019-07-01T04:05:46.203Z</updated>
  <id>https://www.chentyit.com/</id>
  
  <author>
    <name>Chen Tianyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言切片</title>
    <link href="https://www.chentyit.com/2019/07/01/Go%E8%AF%AD%E8%A8%80%E5%88%87%E7%89%87/"/>
    <id>https://www.chentyit.com/2019/07/01/Go语言切片/</id>
    <published>2019-07-01T03:48:39.000Z</published>
    <updated>2019-07-01T04:05:46.203Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSlice</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> arr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice = arr[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice1 := slice[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">fmt.Println(slice1)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice1))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice2 := slice1[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice2)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>初学 Go 语言，疯狂踩坑，很多语法与 Java 不同，这是第一篇关于 Go 语言的学习笔记，开始记录一些学习中遇到的坑</p></blockquote><p>关于切片，在 Java，Python，JS 等语言中都有过类似的语法，但是人家那个叫做截取，就是截取一段新的数组出来，但是 GO 语言就是那个不一样的烟火，刚开始看的时候，就有点懵，今天终于搞懂了，就特地来记录一下，就拿上面这段代码举例，咱们先把运行结果贴出来，方便解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4 5]</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2]</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4]</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>我每次都打印一下 arr 就是为了看看切片的时候有没有影响到原数组（很明显没有）</p><p>现在来看源代码中的 <code>slice = arr[1:]</code> 这里就生成了第一块切片，也就是 [2, 3, 4, 5]，长度为 4，容量为 4，这个就是初始的切片</p><p>然后用 <code>slice1 := slice[0:1]</code> 得到 slice1，仍然没有影响到原数组，得到的切片就是 [2]，长度为 1，容量为 4，因为这个切片是从一个容量为 4 的切片中切出来的，容量不变，只是截取需要的值就行</p><p>最后用 <code>slice2 := slice1[0:3]</code> 得到 slice2，这里就和上面的解释一样的了，我就不赘述了</p><p>原本我以为从数组里面切出来后的切片再切，容量也会跟着变，但看样子，只要最初的的那个切片容量定了，那再由这个切面切出来的其他切面的容量也是一样，虽然目前看起来没什么用，但以后肯定会有机会用到的</p><blockquote><p>关于自学笔记的博客我不太喜欢用太过专业的词汇来描述，简单能理解就好了，Go 语言不得不说在我放弃 C++ 学习 Java 后，唯一一个能让我觉得优雅的语言（仅个人主观喜好）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testSlice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice = arr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice1 := slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice2 := slice1[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS查缺补漏01（面向对象）</title>
    <link href="https://www.chentyit.com/2019/05/31/JS%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/31/JS查缺补漏01（面向对象）/</id>
    <published>2019-05-31T08:00:03.000Z</published>
    <updated>2019-05-31T08:21:33.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p><strong>内建对象：</strong></p><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用</p><p><strong>宿主对象：</strong></p><p>由 JS 的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p><strong>自建对象：</strong></p><p>由开发人员自己创建的对象</p><p><strong>删除对象属性：</strong> delete 对象.属性名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;对象的分类&quot;&gt;&lt;a href=&quot;#对象的分类&quot; class=&quot;headerlink&quot; title=&quot;对象的分类&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.chentyit.com/categories/JavaScript/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://www.chentyit.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day14）</title>
    <link href="https://www.chentyit.com/2019/05/22/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day14%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/22/SpringBoot学习笔记（Day14）/</id>
    <published>2019-05-22T00:12:34.000Z</published>
    <updated>2019-05-23T07:25:59.971Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="异步线程池"><a href="#异步线程池" class="headerlink" title="异步线程池"></a>异步线程池</h2><h3 id="定义线程池和开启异步可用"><a href="#定义线程池和开启异步可用" class="headerlink" title="定义线程池和开启异步可用"></a>定义线程池和开启异步可用</h3><p><strong>AsyncConfigurer 接口源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getAsyncExecutor 方法返回的是一个自定义的线程池，提供空闲线程来执行异步任务</li><li>AsyncUncaughtExceptionHandler 处理异常处理器方法，自定义处理异常</li><li>@EnableAsync 如果 Java 配置文件标注它，Spring 就会开启异步可用</li><li>@Async 驱动 Spring 使用异步调用</li></ul><p><strong>使用 Java 配置定义线程池和启用异步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义线程池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义线程池</span></span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 线程池最大线程数</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 线程队列最大线程数</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @EnableAsync 代表开启 Spring 异步，就可以使用 @Async 驱动 Spring 使用异步</p><p><strong>异步服务接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟报表生成的异步方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span>  <span class="comment">// 声明使用异步调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印异步线程名称</span></span><br><span class="line">        System.out.println(<span class="string">"报表线程名称：【"</span> + Thread.currentThread().getName() + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asyncPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求线程名称：【"</span> + Thread.currentThread() + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 调用异步服务</span></span><br><span class="line">        asyncService.generateReport();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"async"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求线程名称：【Thread[http-nio-8080-exec-1,5,main]】</span><br><span class="line">报表线程名称：【ThreadPoolTaskExecutor-1】</span><br></pre></td></tr></table></figure><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><h3 id="JMS-实例-——-ActiveMQ"><a href="#JMS-实例-——-ActiveMQ" class="headerlink" title="JMS 实例 —— ActiveMQ"></a>JMS 实例 —— ActiveMQ</h3><p><strong>配置 ActiveMQ 和 JMS 信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ActiveMQ 地址</span><br><span class="line">spring.activemq.broker-url=tcp://localhost:61616</span><br><span class="line"># 配置用户名和密码</span><br><span class="line">spring.activemq.user=admin</span><br><span class="line">spring.activemq.password=admin</span><br><span class="line"># 是否使用发布订阅模式，默认为false，即用的是点对点的模式</span><br><span class="line">spring.jms.pub-sub-domain=true</span><br><span class="line"># 默认目的地址</span><br><span class="line">spring.jms.template.default-destination=activemq.default.destination</span><br><span class="line"># 是否启用连接池</span><br><span class="line">spring.activemq.pool.enabled=true</span><br><span class="line"># 连接池最大连接数</span><br><span class="line">spring.activemq.pool.max-connections=50</span><br></pre></td></tr></table></figure><p><strong>定义 ActiveMQ 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveMQ 服务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActiveMQ 服务实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">        jmsTemplate.convertAndSend(message);</span><br><span class="line">        <span class="comment">// 自定义发送地址</span></span><br><span class="line">        <span class="comment">// jmsTemplate.convertAndSend("your-destination", message);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;spring.jms.template.default-destination&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>convertAndSend 是一个发送消息的方法</p><ol><li>首先 convert 转换，默认情况下 JmsTemplate 会提供一个 SimpleMessageConverter 去提供转换规则</li><li>发送信息（已经在配置文件下设置好了就不用写了）</li></ol><p>如果要发送一个对象，就要让对象实现 Serializable 接口以便序列化</p><p><strong>ActiveMQ 发送 POJO 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String myDestination = <span class="string">"my-destination"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 使用自定义地址发送对象</span></span><br><span class="line">        jmsTemplate.convertAndSend(myDestination, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监控自定义地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = myDestination)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 ActiveMQ 不信任 POJO 对象，所以要在配置文件中添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.packages.trusted=cn.chentyit.chapter13.pojo,java.lang</span><br><span class="line">spring.activemq.packages.trust-all=true</span><br></pre></td></tr></table></figure><ul><li>spring.activemq.packages.trusted 表示信任某个确定的包</li><li>spring.activemq.packages.trust-all 表示信任所有的包</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异步线程池&quot;&gt;&lt;a href=&quot;#异步线程池&quot; class=&quot;headerlink&quot; title=&quot;异步线程池&quot;&gt;&lt;/a&gt;异步线程池&lt;/h2&gt;&lt;h3 id=&quot;定义线程池和开启异步可用&quot;&gt;&lt;a href=&quot;#定义线程池和开启异步可
      
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day13）</title>
    <link href="https://www.chentyit.com/2019/05/21/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day13%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/21/SpringBoot学习笔记（Day13）/</id>
    <published>2019-05-20T23:58:53.000Z</published>
    <updated>2019-05-21T08:49:48.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/21/SpringBoot学习笔记（Day13）/小白.png" alt="插图"></p><a id="more"></a><h2 id="限制请求"><a href="#限制请求" class="headerlink" title="限制请求"></a>限制请求</h2><p>抽象类 WebSecurityConfigurerAdapter 提供了一个方法 configure(HttpSecurity)，通过它能够实现对于不同角色（用户）赋予不同权限的功能</p><p><strong>configure(HttpSecurity) 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只要通过验证就可以访问所有的请求</span></span><br><span class="line"><span class="comment">     * authorizeRequests 方法限定只对签名成功的用户请求</span></span><br><span class="line"><span class="comment">     * anyRequest 方法限定所有请求</span></span><br><span class="line"><span class="comment">     * authenticated 方法对所有签名成功的用户允许方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest())</span><br><span class="line">                    .authenticated()</span><br><span class="line">                    <span class="comment">// and 方法是连接词，formLogin 代表使用 Spring Security 默认的登录界面</span></span><br><span class="line">                    .and()).formLogin()</span><br><span class="line">        <span class="comment">// httpBasic 方法说明启用 HTTP 认证</span></span><br><span class="line">        .and()).httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>formLogin 方法配置了使用 Spring Security 的默认登录页面和 httpBasic 方法启用浏览器的 HTTP 基础认证方式</p><h3 id="配置请求路径访问权限"><a href="#配置请求路径访问权限" class="headerlink" title="配置请求路径访问权限"></a>配置请求路径访问权限</h3><p><strong>使用 Ant 风格配置限定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSecurityConfigurerAdapter 默认设定访问权限和登录方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 限定签名后的权限</span></span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">/* ============== 第一段 ============== */</span></span><br><span class="line">        authorizeRequests()</span><br><span class="line">        <span class="comment">// 限定 "/user/welcome" 请求赋予角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/welcome"</span>, <span class="string">"/user/details"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/" 先所有请求权限赋予角色 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/**"</span>).hasAnyAuthority(<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 其他路径允许签名后访问</span></span><br><span class="line">        .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第二段 ============== */</span></span><br><span class="line">        <span class="comment">// and 代表连接词</span></span><br><span class="line">        <span class="comment">// 对于没有配置权限的其他请求允许匿名访问</span></span><br><span class="line">        .and().anonymous()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第三段 ============== */</span></span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启动 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>权限方法说明</center><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>access(String)</td><td>参数为SpEL，如果返回为 true 则允许访问</td></tr><tr><td>anonymous()</td><td>允许匿名访问</td></tr><tr><td>authorizeRequests()</td><td>限定通过签名的请求</td></tr><tr><td>anyRequest()</td><td>限定任意的请求</td></tr><tr><td>hasAnyRole(String…)</td><td>将访问权限赋予多个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>hasRole(String)</td><td>将访问权限赋予一个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>permitAll()</td><td>无条件允许访问</td></tr><tr><td>and()</td><td>连接词，并取消之前限定前提规则</td></tr><tr><td>httpBasic()</td><td>启用浏览器的 HTTP 基础验证</td></tr><tr><td>formLogin()</td><td>启用 Spring Security 默认的登录页面</td></tr><tr><td>not()</td><td>对其他方法的访问采取求反</td></tr><tr><td>fullyAuthenticated()</td><td>如果是完整验证（并非 Remember-me），则允许访问</td></tr><tr><td>denyAll()</td><td>无条件不允许任何访问</td></tr><tr><td>hasIpAddress(String)</td><td>如果是给定的 IP 地址则允许访问</td></tr><tr><td>rememberme()</td><td>用户通过 Remember-me 功能验证就允许访问</td></tr><tr><td>hasAuthority(String)</td><td>如果是给定的角色就允许访问（不加入前缀 “ROLE_”）</td></tr><tr><td>hasAnyAuthority(String…)</td><td>如果是给定的角色中的任意一个就允许访问（不加入前缀 “ROLE_” ）</td></tr></tbody></table><p><strong>Spring 表达式设置权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 使用 Spring 表达式限定只有角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/**"</span>).access(<span class="string">"hasRole('USER') or hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 设置访问权限给角色 ROLE_ADMIN，要求是完整登录（非记住登录）</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN') &amp;&amp; isFullyAuthenticated()"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/welcome2" 访问权限给角色 ROLE_ADMIN，允许不完整登录</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome2"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 使用记住功能</span></span><br><span class="line">        .and().rememberMe()</span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启用 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>authentication()</td><td>用户认证对象</td></tr><tr><td>denyAll()</td><td>拒绝任何访问</td></tr><tr><td>hasAnyRole(String…)</td><td>当前用户是否存在参数中列明的对象属性</td></tr><tr><td>hasRole(String)</td><td>当前用户是否存在角色</td></tr><tr><td>hasIpAddress(String)</td><td>是否请求来自指定的 IP</td></tr><tr><td>isAnonymous()</td><td>是否匿名访问</td></tr><tr><td>isAuthenticated()</td><td>是否用户通过认证签名</td></tr><tr><td>isFullAuthenticated()</td><td>是否用户是完整验证，即非“记住我”功能通过的认证</td></tr><tr><td>isRememberMe()</td><td>是否是通过 “记住我” 功能通过的验证</td></tr><tr><td>permitAll()</td><td>无条件允许任何访问</td></tr><tr><td>principal()</td><td>用户的 principal 对象</td></tr></tbody></table><h2 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h2><h3 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h3><p><strong>Spring Boot 配置登录请求连接和 “记住我”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">// 访问 /admin 下的请求需要管理员权限</span></span><br><span class="line">        authorizeRequests().antMatchers(<span class="string">"/admin/**"</span>).access(<span class="string">"hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 启用 remember me 功能</span></span><br><span class="line">        .and().rememberMe().tokenValiditySeconds(<span class="number">86400</span>).key(<span class="string">"remember-me-key"</span>)</span><br><span class="line">        <span class="comment">// 启用 HTTP Basic 功能</span></span><br><span class="line">        .and().httpBasic()</span><br><span class="line">        <span class="comment">// 通过签名后可以访问任何请求</span></span><br><span class="line">        .and().authorizeRequests().antMatchers(<span class="string">"/**"</span>).permitAll()</span><br><span class="line">        <span class="comment">// 设置登录页和默认的跳转路径</span></span><br><span class="line">        .and().formLogin().loginPage(<span class="string">"/login/page"</span>).defaultSuccessUrl(<span class="string">"/admin/welcome1"</span>)</span><br><span class="line">        <span class="comment">// 登出页面和默认跳转路径</span></span><br><span class="line">        .and().logout().logoutUrl(<span class="string">"/logout/page"</span>).logoutSuccessUrl(<span class="string">"/welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>remember 启用了 “记住我” 功能，有效期为 1 天</li><li>浏览器中将使用 Cookie 以键 “remember-mu-key” 进行保存，并且以 MD5 加密</li><li>loginPage 是指定登录路径为 “/login/page”</li><li>defaultSuccessUrl 方法是指定默认的跳转路径为 “/admin/welcome1”</li></ul><p><strong>新增映射关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是的 /login/page 映射为 login.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="comment">// 使得 /login/page 映射为 logout_welcome.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"logout_welcome"</span>);</span><br><span class="line">        <span class="comment">// 使得 /logout 映射为 logout.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/logout"</span>).setViewName(<span class="string">"logout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/21/SpringBoot学习笔记（Day13）/小白.png&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day12）</title>
    <link href="https://www.chentyit.com/2019/05/20/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day12%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/20/SpringBoot学习笔记（Day12）/</id>
    <published>2019-05-20T02:03:15.000Z</published>
    <updated>2019-05-21T00:01:44.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/20/SpringBoot学习笔记（Day12）/小白.png" alt="插图"></p><h1 id="Spring-Security-安全"><a href="#Spring-Security-安全" class="headerlink" title="Spring Security 安全"></a>Spring Security 安全</h1><a id="more"></a><p><strong>Spring Boot 对 Spring Security 支持的配置项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY (SecurityProperties)</span><br><span class="line"># Spring Security 过滤器排序</span><br><span class="line">spring.security.filter.order=-100</span><br><span class="line"># 安全过滤器责任链拦截的分支类型</span><br><span class="line">spring.security.filter.dispatcher-types=async,error,request</span><br><span class="line"># 用户名</span><br><span class="line">spring.security.user.name=myuser</span><br><span class="line"># 用户密码</span><br><span class="line">spring.security.user.password=123456</span><br><span class="line"># 用户角色</span><br><span class="line">spring.security.user.roles=</span><br><span class="line"></span><br><span class="line"># SECURITY OATH2 CLIENT（OAuth2ClientProperties）</span><br><span class="line"># OAuth 提供者详情配置信息</span><br><span class="line">spring.security.oauth2.client.provider.*= #</span><br><span class="line"># OAuth 客户端登记信息</span><br><span class="line">spring.security.oauth2.client.registration.*=</span><br></pre></td></tr></table></figure><h2 id="使用-WebSecurityConfigurerAdapter-自定义"><a href="#使用-WebSecurityConfigurerAdapter-自定义" class="headerlink" title="使用 WebSecurityConfigurerAdapter 自定义"></a>使用 WebSecurityConfigurerAdapter 自定义</h2><p>WebSecurityConfigurerAdapter 中默认存在的三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置用户签名服务，主要是 user-details 机制，还可以给予用户赋予角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> auth 签名管理器构造器，用于构建用户具体权限控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置 Filter 链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> web  Spring Web Security 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来配置拦截保护的请求，比如请求放行，请求验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http  http 安全请求对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>对于使用 WebSecurity 参数的方法主要是配置 Filter 链的内容，可以配置 Filter 链忽略那些内容。</p><h2 id="自定义用户服务信息"><a href="#自定义用户服务信息" class="headerlink" title="自定义用户服务信息"></a>自定义用户服务信息</h2><h3 id="使用内存签名服务"><a href="#使用内存签名服务" class="headerlink" title="使用内存签名服务"></a>使用内存签名服务</h3><p><strong>使用内存用户（取消连接方法 and() ）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter12Application</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 密码编码器</span></span><br><span class="line">        PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">// 使用内存存储</span></span><br><span class="line">        InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; userConfig</span><br><span class="line">                = auth.inMemoryAuthentication().passwordEncoder(passwordEncoder);</span><br><span class="line">        <span class="comment">// 注册用户 admin，密码为 abc，并赋予 USER 和 ADMIN 的角色权限</span></span><br><span class="line">        userConfig.withUser(<span class="string">"admin"</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">"abc"</span>))</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>, <span class="string">"ROLE_ADMIN"</span>);</span><br><span class="line">        userConfig.withUser(<span class="string">"myuser"</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">"123456"</span>))</span><br><span class="line">                .authorities(<span class="string">"ROLE_USER"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用内存缓存用户信息方式不是主要方式，因为内存空间优先，而且会占用 JVM 内存空间</p><center>UserDetailsBuilder 方法简介</center><table><thead><tr><th>项目类型</th><th>描        述</th></tr></thead><tbody><tr><td>accountExpired(boolean)</td><td>设置账号是否过期</td></tr><tr><td>accountLocked(boolean)</td><td>是否锁定账号</td></tr><tr><td>credentialsExpired(boolean)</td><td>定义凭证是否过期</td></tr><tr><td>disabled(boolean)</td><td>是否禁用用户</td></tr><tr><td>username(String)</td><td>定义用户名</td></tr><tr><td>authorities(GrantedAuthority…)</td><td>赋予一个或者多个权限</td></tr><tr><td>authorities(List&lt;? extends GrantedAuthority)</td><td>使用列表（List）赋予权限</td></tr><tr><td>password(String)</td><td>定义密码</td></tr><tr><td>roles(String…)</td><td>赋予角色，会自动加入前缀 “ROLE_”</td></tr></tbody></table><h3 id="使用数据库定义用户认证服务"><a href="#使用数据库定义用户认证服务" class="headerlink" title="使用数据库定义用户认证服务"></a>使用数据库定义用户认证服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用和用户名称查询密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String pwdQuery = <span class="string">" select user_name, pwd, available from t_user3 where user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用用户名称查询角色信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String roleQuery = <span class="string">"select u.user_name, r.role_name "</span> +</span><br><span class="line">    <span class="string">"from t_user3 as u, t_user_role as ur, t_role as r "</span> +</span><br><span class="line">    <span class="string">"where u.id = ur.user_id, and r.id = ur.role_id "</span> +</span><br><span class="line">    <span class="string">"and u.user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖 WebSecurityConfigurerAdapter 用户详情方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> auth 用户签名管理器构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    auth.jdbcAuthentication()</span><br><span class="line">        <span class="comment">// 密码编码器</span></span><br><span class="line">        .passwordEncoder(passwordEncoder)</span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        .dataSource(dataSource)</span><br><span class="line">        <span class="comment">// 查询用户，自动判断密码是否一致</span></span><br><span class="line">        .usersByUsernameQuery(pwdQuery)</span><br><span class="line">        <span class="comment">// 赋予权限</span></span><br><span class="line">        .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置密码管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用和用户名称查询密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String pwdQuery = <span class="string">" select user_name, pwd, available from t_user3 where user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用用户名称查询角色信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String roleQuery = <span class="string">"select u.user_name, r.role_name "</span> +</span><br><span class="line">    <span class="string">"from t_user3 as u, t_user_role as ur, t_role as r "</span> +</span><br><span class="line">    <span class="string">"where u.id = ur.user_id, and r.id = ur.role_id "</span> +</span><br><span class="line">    <span class="string">"and u.user_name = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入配置的钥匙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;system.user.password.secret&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String secret = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PasswordEncoder passwordEncoder = <span class="keyword">new</span> Pbkdf2PasswordEncoder(<span class="keyword">this</span>.secret);</span><br><span class="line">    auth.jdbcAuthentication()</span><br><span class="line">        .passwordEncoder(passwordEncoder)</span><br><span class="line">        .dataSource(dataSource)</span><br><span class="line">        .usersByUsernameQuery(pwdQuery)</span><br><span class="line">        .authoritiesByUsernameQuery(roleQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/20/SpringBoot学习笔记（Day12）/小白.png&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring-Security-安全&quot;&gt;&lt;a href=&quot;#Spring-Security-安全&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 安全&quot;&gt;&lt;/a&gt;Spring Security 安全&lt;/h1&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记01</title>
    <link href="https://www.chentyit.com/2019/05/18/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>https://www.chentyit.com/2019/05/18/Oracle学习笔记01/</id>
    <published>2019-05-18T00:26:13.000Z</published>
    <updated>2019-05-19T04:04:09.610Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>count() 如果字段为空，则不统计，* 全部统计</li><li>排序 asc 升序，desc 降序</li><li>通过其他表创建一个新表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP3 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> EMP_NO, EMP_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> EMP_NO &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="4"><li>左连接和右连接的主表信息全部显示：左连接的左表示主表，右连接的右表是主表</li><li>full join 全连接，有无关联都显示</li><li>左连接简写</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, d.DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP e, DEPT d</span><br><span class="line"><span class="keyword">WHERE</span> e.DEPTNO = d.DEPT_NO(+)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.EMP_NO</span><br></pre></td></tr></table></figure><ol start="7"><li>右连接简写</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, d.DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span> EMP e, DEPT d</span><br><span class="line"><span class="keyword">WHERE</span> e.DEPTNO(+) = d.DEPT_NO</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.EMP_NO</span><br></pre></td></tr></table></figure><ol start="8"><li><p>all 表示必须满足所有及结果集，any 表示满足其中一个结果集就可以</p></li><li><p>ROWID 获取物理地址</p></li><li><p>ROWNUM 在查询的列前面，添加序号</p></li><li><p>intersect 放在两个查询之间，表示取交集</p></li><li><p>union 表示取并集</p></li><li><p>minus 表示取差集</p></li><li><p>单行函数 / 聚合函数</p><p>单行函数：对每一个函数应用在表的记录中时，只能输入一行结果，返回一个结果.</p><p>聚合函数：聚合函数同时可以对多行数据进行操作，并返回一个结果.</p></li><li><p>decode函数</p><p><strong>decode</strong>(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)</p></li><li><p>case </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.EMP_NO, e.EMP_NAME, (</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">900</span> <span class="keyword">THEN</span> <span class="string">'A'</span></span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">700</span> <span class="keyword">AND</span> e.SALARY &lt; <span class="number">900</span> <span class="keyword">THEN</span> <span class="string">'B'</span></span><br><span class="line"><span class="keyword">WHEN</span> e.SALARY &gt;= <span class="number">300</span> <span class="keyword">AND</span> e.SALARY &lt; <span class="number">700</span> <span class="keyword">THEN</span> <span class="string">'C'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'D'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">) lvl</span><br><span class="line"><span class="keyword">FROM</span> EMP e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lvl</span><br></pre></td></tr></table></figure><ol start="17"><li>恢复数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> NTUCTY.EMP</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">of</span> <span class="keyword">scn</span> <span class="number">12156162</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">FROM</span> EMP e</span><br><span class="line"><span class="keyword">WHERE</span> e.EMP_NO = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先运行这一条命令 启用行移动功能</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> NTUCTY.EMP <span class="keyword">enable</span> <span class="keyword">row</span> <span class="keyword">movement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在运行这一条 恢复数据</span></span><br><span class="line">flashback table NTUCTY.EMP to scn 12156162;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;count() 如果字段为空，则不统计，* 全部统计&lt;/li&gt;
&lt;li&gt;排序 asc 升序，desc 降序&lt;/li&gt;
&lt;li&gt;通过其他表创建一个新表&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sq
      
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle - 自学笔记" scheme="https://www.chentyit.com/tags/Oracle-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day11）</title>
    <link href="https://www.chentyit.com/2019/05/16/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day11%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/16/SpringBoot学习笔记（Day11）/</id>
    <published>2019-05-16T05:41:01.000Z</published>
    <updated>2019-05-20T01:47:14.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/16/SpringBoot学习笔记（Day11）/erik-kaha-1575002-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/9Nok_iZEgLk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Erik Kaha</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="REST-风格网站"><a href="#REST-风格网站" class="headerlink" title="REST 风格网站"></a>REST 风格网站</h2><h3 id="HTTP-动作"><a href="#HTTP-动作" class="headerlink" title="HTTP 动作"></a>HTTP 动作</h3><ul><li>GET（VISIT）：访问服务器资源（一个或多个资源）</li><li>POST（CREATE）：提交服务器资源信息，用来创建新的资源</li><li>PUT（UPDATE）：修改服务器已经存在的资源，使用 PUT 时需要把资源的所有属性一并提交</li><li>PATCH（UPDATE）：修改服务器已经存在的资源，使用 PATCH 时只需要将部分资源属性提交</li><li>DELETE（DELETE）：从服务器将资源删除</li></ul><h3 id="Spring-MVC-整合-REST"><a href="#Spring-MVC-整合-REST" class="headerlink" title="Spring MVC 整合 REST"></a>Spring MVC 整合 REST</h3><p>如果是简单参数，往往直接通过 URL 直接传递，在 Spring MVC 中可以使用注解 @PathVariable 进行获取。<strong>（动点脑子，复杂的你确定你会用 URL 传吗，肯定 JSON 啊）</strong></p><p><strong>@RequestBody</strong> 可以将请求体为 JSON 的数据转化为复杂的 Java 对象。</p><h3 id="处理-HTTP-状态码、异常和响应头"><a href="#处理-HTTP-状态码、异常和响应头" class="headerlink" title="处理 HTTP 状态码、异常和响应头"></a>处理 HTTP 状态码、异常和响应头</h3><p>Spring 提供了实体封装类 ResponseEntity 和注解 @ResponseStatus</p><ul><li>ResponseEntity 封装错误消息和状态码</li><li>@ResponseStatus 配置指定的响应码给客户端</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/16/SpringBoot学习笔记（Day11）/erik-kaha-1575002-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/9Nok_iZEgLk?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Erik Kaha&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day10）</title>
    <link href="https://www.chentyit.com/2019/05/15/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day10%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/15/SpringBoot学习笔记（Day10）/</id>
    <published>2019-05-15T07:34:19.000Z</published>
    <updated>2019-05-15T09:48:47.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/max-ducourneau-1580353-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/P_J3chFYwIU?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Max Ducourneau</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Spring-MVC-补充知识"><a href="#Spring-MVC-补充知识" class="headerlink" title="Spring MVC 补充知识"></a>Spring MVC 补充知识</h2><h3 id="ResponseBody-转换为-JSON-的原理"><a href="#ResponseBody-转换为-JSON-的原理" class="headerlink" title="@ResponseBody 转换为 JSON 的原理"></a>@ResponseBody 转换为 JSON 的原理</h3><p><center>@ResponseBody 注解转换为 JSON 流程图</center></p><p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/@ResponseBody 注解转换为 JSON 流程图.jpg" alt="@ResponseBody 注解转换为 JSON 流程图"></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>废话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(Long id, Model model)</span> </span>&#123;</span><br><span class="line">    User user = userService.getUser(id);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"data/user"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用字符串指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/user/show?id="</span> + user.getId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模型和视图指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">redirect2</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:/user/show?id="</span> + user.getId());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进版本</p><p><strong>重定向传递 Java 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 直接从数据模型 RedirectAttributes 对象中取出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/showUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">(User user, Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"data/user"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用字符串指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ra</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect1</span><span class="params">(String userName, String note, RedirectAttributes ra)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="comment">// 保存需要传递给重定向的对象</span></span><br><span class="line">    ra.addFlashAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/user/showUser"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模型和视图指定跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ra</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">redirect2</span><span class="params">(String userName, String note, RedirectAttributes ra)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNote(note);</span><br><span class="line">    user.setUserName(userName);</span><br><span class="line">    <span class="comment">// 插入数据库后，回填 user 的 id</span></span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="comment">// 保存需要传递给重定向的对象</span></span><br><span class="line">    ra.addFlashAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"redirect:/user/showUser"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中给方法中加入了 RedirectAttributes 对象参数，然后将 redirect1 和 redirect2 方法的用户信息通过 addFlashAttribute 保存起来，在执行重定向的时候，再将 user 对象传递</p><p>被 addFlashAttribute 保存的参数，在控制器执行完之后，会被保存到 Session 对象中；</p><p>执行重定向的时候，进入重定向前首先把 Session 中的参数取出，用以填充重定向方法的参数和数据模型，之后删除 Session 中的数据，执行重定向方法，并传递对象</p><center>重定向传递对象的流程图</center><p><img src="/2019/05/15/SpringBoot学习笔记（Day10）/重定向传递对象的流程图.jpg" alt="重定向传递对象的流程图"></p><h3 id="操作会话对象"><a href="#操作会话对象" class="headerlink" title="操作会话对象"></a>操作会话对象</h3><ul><li>@SessionAttribute 应用于参数，将 HTTPSession 中的属性读出</li><li>@SessionAttributes 只能用于类的注解，将相关数据模型的属性保存到 Session 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(names = &#123;<span class="string">"user"</span>&#125;, types = Long.class)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/session"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id <span class="doctag">@SessionAttribute</span> 从 HttpSession 中取出数据，填充控制器方法参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@SessionAttribute(<span class="string">"id"</span>)</span> Long id, Model model) </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类型保存到 Session 中</span></span><br><span class="line">        model.addAttribute(<span class="string">"id_new"</span>, id);</span><br><span class="line">        User user = userService.getUser(id);</span><br><span class="line">        <span class="comment">// 根据名称保存到 Session 中</span></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"session/test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给控制器增加通知"><a href="#给控制器增加通知" class="headerlink" title="给控制器增加通知"></a>给控制器增加通知</h3><ul><li>@ControllerAdvice：定义一个控制器的通知类，允许定义一些关于增强控制器的各类通知和限定增强哪些控制器功能等；</li><li>@InitBinder：定义控制器参数绑定规则，如转换规则，格式化等，他会在参数转换之前执行；</li><li>@ExceptionHandler：定义控制器发生异常后的操作。发生异常后转跳到指定的友好页面；</li><li>@ModelAttribute：可以在控制器方法前执行，对数据模型进行操作；</li></ul><p><strong><em>（这里有点复杂，笔记没法描述清楚，请看《SpringBoot 深入浅出》第 245 页）</em></strong></p><h3 id="获取请求头参数"><a href="#获取请求头参数" class="headerlink" title="获取请求头参数"></a>获取请求头参数</h3><p><strong>带请求头的 HTTP 请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.post(&#123;</span><br><span class="line">    url : <span class="string">"$&#123;pageContext.request.contextPath&#125;/user/header/user"</span>,</span><br><span class="line">    <span class="comment">// 设置请求头参数</span></span><br><span class="line">    headers : &#123;<span class="attr">id</span> : <span class="string">'1'</span>&#125;,</span><br><span class="line">    <span class="comment">// 成功后的方法</span></span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.id == <span class="literal">null</span>) &#123;</span><br><span class="line">            alert(<span class="string">"获取失败"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 弹出请求返回的用户信息</span></span><br><span class="line">        alert(<span class="string">"id="</span> + user.id +<span class="string">", user_name="</span></span><br><span class="line">              +user.userName+<span class="string">", note="</span>+ user.note);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中的 “headers : {id : ‘1’}” 设置了一个请求头，是一个键为 id 而值为 1 的请求头</p><p><strong>使用 @RequestHeader 接收请求头参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 <span class="doctag">@RequestHeader</span> 接收请求头参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/header/user"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">headerUser</span><span class="params">(@RequestHeader(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        User user = userService.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过注解 @RequestHeader(“id”) 获取请求请求头中的的 id 键值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/15/SpringBoot学习笔记（Day10）/max-ducourneau-1580353-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/P_J3chFYwIU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Max Ducourneau&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day09）</title>
    <link href="https://www.chentyit.com/2019/05/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day09%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/14/SpringBoot学习笔记（Day09）/</id>
    <published>2019-05-14T00:30:42.000Z</published>
    <updated>2019-05-14T11:06:21.750Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/sid-verma-1387708-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/5BsNkTMbZZ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Sid Verma</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="Spring-MVC-对文件上传的支持"><a href="#Spring-MVC-对文件上传的支持" class="headerlink" title="Spring MVC 对文件上传的支持"></a>Spring MVC 对文件上传的支持</h3><center>文件请求转换类之间的关系</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/文件请求转换类之间的关系.jpg" alt="文件请求转换类之间的关系"></p><p>Spring MVC 会将 HttpServletRequest 对象转化为 MultipartHttpServletRequest 对象；</p><p>上传文件时，还需要配置 MultipartHttpServletRequest，是通过 MultipartResolver 接口实现的；</p><p>MultipartResolver 有两个实现类：StandardServletMultipartResolver 和 CommonsMultipartResolver，推荐使用前者进行文件上传（如果没有自定义 MultipartResolver，Spring Boot 自定创建 StandardServletMultipartResolver 对象）；</p><p><strong>文件上传配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line"># 是否启用 Spring MVC 多分部上传功能</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 将文件写入磁盘的阈值。值可以使用后缀&quot;MB&quot;或&quot;KB&quot;来表示兆字节或字节大小</span><br><span class="line">spring.servlet.multipart.file-size-threshold=0</span><br><span class="line"># 指定默认上传的文件夹</span><br><span class="line">spring.servlet.multipart.location=</span><br><span class="line"># 限制单个文件最大大小</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB</span><br><span class="line"># 限制所有文件最大大小</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"># 是否延迟多部文件请求的参数和文件的解析</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false</span><br></pre></td></tr></table></figure><p><strong>上传文件 Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开文件上传请求页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指向 JSP 的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/upload/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/file/upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用HTTPServletRequest 作为参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/request"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        MultipartHttpServletRequest mreq = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 强制转换为 MultipartHttpServletRequest 接口对象</span></span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> MultipartHttpServletRequest) &#123;</span><br><span class="line">            mreq = (MultipartHttpServletRequest) request;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 MultipartFile 文件信息</span></span><br><span class="line">        MultipartFile mf = mreq.getFile(<span class="string">"file"</span>);</span><br><span class="line">        <span class="comment">// 获取源文件名称</span></span><br><span class="line">        String fileName = mf != <span class="keyword">null</span> ? mf.getOriginalFilename() : <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            mf.transferTo(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 Spring MVC 的 MultipartFile 类作为参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/multipart"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadMultipartFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        File dest = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload/part"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">uploadPart</span><span class="params">(Part file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取提交文件名称</span></span><br><span class="line">        String fileName = file.getSubmittedFileName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            file.write(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> dealRequestMap(<span class="keyword">false</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dealRequestMap(<span class="keyword">true</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理上传文件结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">dealRequestMap</span><span class="params">(<span class="keyword">boolean</span> success, String msg)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"success"</span>, success);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>当请求来到 DispatcherServlet 时，会根据 HandlerMapping 的机制找到处理器，这样就会返回一个 HandlerExecution 对象，这个对象包含处理器和拦截器，拦截器会对处理器进行拦截。</p><h3 id="拦截器的设计"><a href="#拦截器的设计" class="headerlink" title="拦截器的设计"></a>拦截器的设计</h3><p><strong>HandlerInterceptor 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器执行前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器处理后方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器完成后方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>拦截器执行过程</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/拦截器执行过程.jpg" alt="拦截器执行过程"></p><ol><li>执行 preHandle 方法，返回一个布尔值，如果为 false，则结束所有流程；如果为 true，则执行下一步</li><li>执行处理器逻辑，它包含控制器的功能</li><li>执行 postHandle 方法</li><li>执行视图解析和视图渲染</li><li>执行 afterCompletion 方法</li></ol><p><strong>自定义简单拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器前方法"</span>);</span><br><span class="line">        <span class="comment">// 返回 true，不会拦截后续的处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器后方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器完成方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter10Application</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter10Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册拦截器到 Spring MVC 机制，然后会返回一个拦截器注册</span></span><br><span class="line">        InterceptorRegistration ir = registry.addInterceptor(<span class="keyword">new</span> Interceptor1());</span><br><span class="line">        <span class="comment">// 指定拦截匹配模式，限制拦截器拦截请求</span></span><br><span class="line">        ir.addPathPatterns(<span class="string">"/interceptor/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果注册多个，和上面一样配置</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><h3 id="国际化消息源"><a href="#国际化消息源" class="headerlink" title="国际化消息源"></a>国际化消息源</h3><p>大部分情况下，是使用 JDK 的 ResourceBundle 处理国际化信息的，为此这里主要使用 ResourceBundleMessageSource 这个国际化消息源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 设置国际化消息是否总是采用格式化，默认 false</span><br><span class="line">spring.messages.always-use-message-format=false</span><br><span class="line"># 设置国际化属性名称，如果可以使用逗号分隔，默认为 message</span><br><span class="line">spring.messages.basename=messages</span><br><span class="line"># 设置国际化消息缓存超时秒数，默认为永远不过期，如果为 0 表示每次都重新加载</span><br><span class="line">spring.messages.cache-duration=</span><br><span class="line"># 国际化消息编码</span><br><span class="line">spring.messages.encoding=utf-8</span><br><span class="line"># 如果没有找到特定区域设置的文件，则设置是否返回到系统区域设置</span><br><span class="line">spring.messages.fallback-to-system-locale=true</span><br><span class="line"># 是否使用消息编码作为默认的响应消息，而非抛出 NoSuchMessageException 异常，建议只在开发时使用</span><br><span class="line">spring.messages.use-code-as-default-message=false</span><br></pre></td></tr></table></figure><h3 id="国际化解析器"><a href="#国际化解析器" class="headerlink" title="国际化解析器"></a>国际化解析器</h3><ul><li>AcceptHeaderLocaleResolver：使用浏览器头请求去实现国际化区域</li><li>FixedLocaleResolve：固定国际化区域。</li><li>CookieLocaleResolve：将国际化区域信息设置在浏览器 Cookie 中，使得系统可以从 Cookie 中读取国际化信息来确定用户的国际化区域</li><li>SessionLocaleResolve：类似于 CookieLocaleResolve，只是将国际化信息设置在 Session 中，这样就能读取 Session 中的信息去确定用户的国际化区域</li></ul><center>国际化解析器设计</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/国际化解析器设计.jpg" alt="国际化解析器设计"></p><center>Spring MVC 国际化流程图</center><p><img src="/2019/05/14/SpringBoot学习笔记（Day09）/Spring MVC 国际化流程图.jpg" alt="Spring MVC 国际化流程图"></p><p>LocaleChangeInterceptor 拦截器可以通过请求参数来确定国际化，同时吧请求参数保存到 Session 中。</p><p><strong>在 Spring Boot 启动 java 文件中添加国家化解析器和拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国际化解析器</span></span><br><span class="line"><span class="comment">     * Bean Name 要为 localeResolve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"localeResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">initLocaleResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver slr = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        <span class="comment">// 默认国际化区域</span></span><br><span class="line">        slr.setDefaultLocale(Locale.SIMPLIFIED_CHINESE);</span><br><span class="line">        <span class="keyword">return</span> slr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建国际化拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lci != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lci;</span><br><span class="line">        &#125;</span><br><span class="line">        lci.setParamName(<span class="string">"language"</span>);</span><br><span class="line">        <span class="keyword">return</span> lci;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给处理器增加国际化拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里将通过国际化拦截器的 preHandle 方法对请求的国际化区域参数进行修改</span></span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>initLocaleResolver 方法创建了一个国际化拦截器，有两点需要注意，第一，保证 BeanName 为 “localeResolver”；第二，设置了默认语言为简体中文；</li><li>localeChangeInterceptor 方法创建国际化拦截器，这里设置拦截参数为 “language”；</li><li>addInterceptors 方法将拦截器添加到 Spring MVC 中；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/14/SpringBoot学习笔记（Day09）/sid-verma-1387708-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/5BsNkTMbZZ0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sid Verma&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day08）</title>
    <link href="https://www.chentyit.com/2019/05/11/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day08%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/11/SpringBoot学习笔记（Day08）/</id>
    <published>2019-05-11T01:06:18.000Z</published>
    <updated>2019-05-14T11:06:51.556Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/asoggetti-1486419-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">asoggetti</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="处理器映射"><a href="#处理器映射" class="headerlink" title="处理器映射"></a>处理器映射</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="comment">// 配置请求映射名称</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过路径映射</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过路径映射回 path 配置项</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定只响应 HTTP 请求类型，如 GET，POST，HEAD，OPTIONS，PUT，TRACE 等</span></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当存在对应的 HTTP 参数时才响应请求</span></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定请求头存在对应的参数时才响应</span></span><br><span class="line">    String[] headers() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定 HTTP 请求体提交类型，如 "application/json"、"text/html"</span></span><br><span class="line">    String[] consumes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限定返回的内容类型，仅当 HTTP 请求头中的（Accept）类型中包含该指定类型时才返回</span></span><br><span class="line">    String[] produces() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取控制器参数"><a href="#获取控制器参数" class="headerlink" title="获取控制器参数"></a>获取控制器参数</h2><p>处理器是对控制器的包装，处理器运行过程中会调度控制器的方法，只是它在进入控制器方法之前会对 HTTP 的参数和上下文进行解析</p><h3 id="无注解下获取参数"><a href="#无注解下获取参数" class="headerlink" title="无注解下获取参数"></a>无注解下获取参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在无注解下获取参数，要求参数名称和 HTTP 参数名称一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intVal —— 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> longVal —— 长整型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string —— 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应 JSON 参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/no/annotation"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">noAnnotation</span><span class="params">(Integer intVal, Long longVal, String string)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intVal"</span>, intVal);</span><br><span class="line">    paramsMap.put(<span class="string">"longVal"</span>, longVal);</span><br><span class="line">    paramsMap.put(<span class="string">"str"</span>, string);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestParam-获取参数"><a href="#使用-RequestParam-获取参数" class="headerlink" title="使用 @RequestParam 获取参数"></a>使用 @RequestParam 获取参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过注解 <span class="doctag">@RequestParam</span> 获取参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intVal —— 整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> longVal —— 长整型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strVal —— 字符串，在默认情况下，标注的参数是不能为空的，为了能让它为空，可以配置其属性 required 为 false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应 JSON 数据集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/annotation"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">requestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(<span class="string">"int_val"</span>)</span> Integer intVal,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"long_val"</span>)</span> Long longVal,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"str_val"</span>, required = <span class="keyword">false</span>)</span> String strVal) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intVal"</span>, intVal);</span><br><span class="line">    paramsMap.put(<span class="string">"longVal"</span>, longVal);</span><br><span class="line">    paramsMap.put(<span class="string">"strVal"</span>, strVal);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/requestArray"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">requestArray</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>[] intArr, Long[] longArr, String[] strArr)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    paramsMap.put(<span class="string">"intArr"</span>, intArr);</span><br><span class="line">    paramsMap.put(<span class="string">"longArr"</span>, longArr);</span><br><span class="line">    paramsMap.put(<span class="string">"strArr"</span>, strArr);</span><br><span class="line">    <span class="keyword">return</span> paramsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递-JSON"><a href="#传递-JSON" class="headerlink" title="传递 JSON"></a>传递 JSON</h3><p>方法的参数标注为 @RequestBody，意味着它将接受前端提交的 JSON 请求体，在 JSON 请求体与 User 类之间的属性名称保持一致的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 通过 <span class="doctag">@RequestBody</span> 注解得到 JSON 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 回填 id 后的用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">insert</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    userService.insertUser(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-URL-传递参数"><a href="#通过-URL-传递参数" class="headerlink" title="通过 URL 传递参数"></a>通过 URL 传递参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过 @GetMapping 指定一个 URL，然后用 {…} 来标明参数的位置和名称，这里指定名称为 id，Spring MVC 就会根据请求去匹配这个方法；@PathVariable 配置的字符串为 id，它对应 URL 的参数声明，这样 Spring 就知道如何从 URL 中获取参数。</p><h3 id="获取格式化参数"><a href="#获取格式化参数" class="headerlink" title="获取格式化参数"></a>获取格式化参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/format/commit"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">format</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</span> Date date,</span></span><br><span class="line"><span class="function">    @<span class="title">NumberFormat</span><span class="params">(pattern = <span class="string">"#,###,##"</span>)</span> Double number) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    dataMap.put(<span class="string">"date"</span>, date);</span><br><span class="line">    dataMap.put(<span class="string">"number"</span>, number);</span><br><span class="line">    <span class="keyword">return</span> dataMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@DateTimeFormat 和 @NumberFormat 配置了格式话所约定的格式</p><p>在 Spring Boot 中，日期参数的格式化也可以不使用 @DateTimeFormat，而只在配置文件 application.properties 中加入如下配置：</p><p>spring.mvc.date-format=yyyy-MM-dd</p><h2 id="自定义参数转换规则"><a href="#自定义参数转换规则" class="headerlink" title="自定义参数转换规则"></a>自定义参数转换规则</h2><h3 id="处理器获取参数逻辑"><a href="#处理器获取参数逻辑" class="headerlink" title="处理器获取参数逻辑"></a>处理器获取参数逻辑</h3><p><strong>HttpMessageConverter 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 是否可读，其中 clazz 为 Java 类型，mediaType 为 HTTP 请求类型</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 clazz 类型是否能够转换为 mediaType 媒体类型</span></span><br><span class="line">    <span class="comment">// 其中 clazz 为 java 类型，mediaType 为 HTTP 响应类型</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; var1, @Nullable MediaType var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可支持的媒体类型列表</span></span><br><span class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 canRead 验证通过后，读入 HTTP 请求信息</span></span><br><span class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 canWrite 方法验证通过后，写入响应</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T var1, @Nullable MediaType var2, HttpOutputMessage var3)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring MVC 中，是通过 WebDataBinder 机制来获取参数的，作用是解析 HTTP 请求上下文，在控制器的调用之前，转换参数并且提供验证的功能，为调用控制器方法做准备；</p><p>处理器会从 HTTP 请求中读取数据，然后通过三类接口进行各类参数转换，分别是 Converter，Formatter 和 GenericConverter</p><center>Spring MVC 处理器 HTTP 请求体转换流程图</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/Spring MVC 处理器 HTTP 请求体转换流程图.jpg" alt="Spring MVC 处理器 HTTP 请求体转换流程图"></p><p>Convert：是一个普通的转换器</p><p>Formatter：是一个格式转换器</p><p>GenericConverter：将 HTTP 参数转换为数组</p><center>ConversionService 转化机制设计</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/ConversionService转化机制设计.jpg" alt="ConversionService转化机制设计"></p><p><strong>Spring Boot 的自动注册机制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 Converter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 GenericConverter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;</span><br><span class="line">        registry.addConverter(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历 IoC 容器，找到 Formatter 类型的 Bean 注册到服务类中</span></span><br><span class="line">    <span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;</span><br><span class="line">        registry.addFormatter(formatter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot 初始化时，会将对应用户自定义的 Converter，Formatter 和 GenericConverter 的实现类所创建的 Spring Bean 自动的注册到 DefaultFormattingConversionService 对象中。</p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="JSR-303-验证"><a href="#JSR-303-验证" class="headerlink" title="JSR-303 验证"></a>JSR-303 验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorPojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非空判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Future</span>(message = <span class="string">"需要一个将来日期"</span>)      <span class="comment">// 只能是将来的日期</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)  <span class="comment">// 日期格式化</span></span><br><span class="line">    <span class="meta">@NotNull</span>                                 <span class="comment">// 不能为空</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@DecimalMin</span>(value = <span class="string">"0.1"</span>)               <span class="comment">// 最小值 0.1 元</span></span><br><span class="line">    <span class="meta">@DecimalMax</span>(value = <span class="string">"10000.00"</span>)          <span class="comment">// 最大值为 10000 元</span></span><br><span class="line">    <span class="keyword">private</span> Double doubleValue = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"最小值为1"</span>)    <span class="comment">// 最小值为 1</span></span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">38</span>, message = <span class="string">"最大值为88"</span>)  <span class="comment">// 最大值为 88</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Range</span>(min = <span class="number">1</span>, max = <span class="number">888</span>, message = <span class="string">"范围为1至888"</span>)    <span class="comment">// 限定范围</span></span><br><span class="line">    <span class="keyword">private</span> Long range;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">20</span>, max = <span class="number">30</span>, message = <span class="string">"字符串长度还要求20到30之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后台验证方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析验证参数错误</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vp —— 需要验证的 POJO，使用注解 <span class="doctag">@Valid</span> 表示验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errors —— 错误信息，它由 Spring MVC 通过验证 POJO 后自动填充</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/valid/validate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">validate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Valid @RequestBody ValidatorPojo vp,</span></span></span><br><span class="line"><span class="function"><span class="params">    Errors errors)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取错误列表</span></span><br><span class="line">    List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError oe : oes) &#123;</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 字段错误</span></span><br><span class="line">        <span class="keyword">if</span> (oe <span class="keyword">instanceof</span> FieldError) &#123;</span><br><span class="line">            FieldError fe = (FieldError) oe;</span><br><span class="line">            key = fe.getField();        <span class="comment">// 获取错误验证字段名</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非字段错误</span></span><br><span class="line">            key = oe.getObjectName();   <span class="comment">// 获取验证对象名称</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 错误信息</span></span><br><span class="line">        msg = oe.getDefaultMessage();</span><br><span class="line">        errMap.put(key, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ResponseBody</strong> 代表接收一个 JSON 参数，然后 <strong>@Valid</strong> 注解则表示启动验证机制，Spring 就会启用 JSR-303 验证机制进行验证，自动地将最后的验证结果放入 Errors 对象中；</p><h3 id="参数验证机制"><a href="#参数验证机制" class="headerlink" title="参数验证机制"></a>参数验证机制</h3><p><strong>验证接口定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判定当前验证器是否支持该 Class 类型的验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz —— POJO 类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前验证器是否支持该 POJO 验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果 supports 返回 true，则这个方法执行验证逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 被验证 POJO 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errors 错误对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>supports 方法参数为需要验证的 POJO 类型，如果该方法返回 true，则 Spring 会使用当前验证器的 validate 方法验证 POJO；</p><p>validate 方法包含需要的 target 对象和错误对象 errors，其中 target 是参数绑定后的 POJO，可以通过这个参数对象进行业务逻辑的自定义验证，如果发现错误，则保存到 errors 对象中，返回给控制器；</p><p><strong>自定义用户验证器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证只支持 User 类验证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.equals(User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象为空</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 直接在参数出报错，这样就不能进入控制器的方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">""</span>, <span class="keyword">null</span>, <span class="string">"用户不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 强制转换</span></span><br><span class="line">        User user = (User) target;</span><br><span class="line">        <span class="comment">// 用户名非空串</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getUserName())) &#123;</span><br><span class="line">            <span class="comment">// 增加错误，可以进入控制器方法</span></span><br><span class="line">            errors.rejectValue(<span class="string">"userName"</span>, <span class="keyword">null</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 中提供了一个注解 @InitBinder，他的作用是在执行控制器方法前，处理器会限制性被 @InitBinder 标注的方法。这是可以将 WebDataBinder 对象最为参数传递到方法中，得到 WebDataBinder 对象，该对象有 setValidator方法，可以绑定自定义的验证器，在获取参数后，通过自定义的验证器去验证参数。</p><h2 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h2><h3 id="视图设计"><a href="#视图设计" class="headerlink" title="视图设计"></a>视图设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应状态属性</span></span><br><span class="line">String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + <span class="string">".responseStatus"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径变量</span></span><br><span class="line">String PATH_VARIABLES = View.class.getName() + <span class="string">".pathVariables"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择内容类型</span></span><br><span class="line">String SELECTED_CONTENT_TYPE = View.class.getName() + <span class="string">".selectedContentType"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应类型</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getContentType 方法是获取 HTTP 响应类型，它可以返回的类型是文本，JSON 数据集或者文件等</li><li>render 方法则是将数据模型渲染到视图的，model 参数是数据类型，</li></ul><center>Spring MVC 常用视图关系模型</center><p><img src="/2019/05/11/SpringBoot学习笔记（Day08）/Spring MVC 常用视图关系模型.jpg" alt="Spring MVC 常用视图关系模型"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/11/SpringBoot学习笔记（Day08）/asoggetti-1486419-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;asoggetti&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day07）</title>
    <link href="https://www.chentyit.com/2019/05/09/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day07%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/09/SpringBoot学习笔记（Day07）/</id>
    <published>2019-05-09T00:30:51.000Z</published>
    <updated>2019-05-14T11:07:22.012Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/09/SpringBoot学习笔记（Day07）/pat-kay-1380646-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/BuPgonMyK9E?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Pat Kay</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Spring-MVC-流程"><a href="#Spring-MVC-流程" class="headerlink" title="Spring MVC 流程"></a>Spring MVC 流程</h2><p>流程和组件是 Spring MVC 的核心，Spring MVC的流程是围绕 DispatcherServlet 而工作的，所以在 Spring MVC 中DispatcherServlet 就是其中最重要的内容；</p><center>Spring MVC 全流程</center><p><img src="/2019/05/09/SpringBoot学习笔记（Day07）/SpringMVC全流程.jpg" alt="插图"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入用户服务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示用户详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/details"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">details</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问模型层得到数据</span></span><br><span class="line">        User user = userService.getUser(id);</span><br><span class="line">        <span class="comment">// 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">// 定义模型视图</span></span><br><span class="line">        mv.setViewName(<span class="string">"user/details"</span>);</span><br><span class="line">        <span class="comment">// 加入数据模型</span></span><br><span class="line">        mv.addObject(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="comment">// 返回模型和视图</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Controller 表示这是一个控制器，@RequestMapping 代表请求路径和控制器的映射关系，会在 Web 服务器启动 Spring MVC 时，就被扫描到 <strong>HandlerMapping</strong> 的机制中存储，之后在用户发起请求被 <strong>DispatcherServlet</strong> 拦截后，通过 URI 和其他条件，通过 <strong>HandlerMapping</strong> 机制就能找到对应的控制器进行响应。只是通过 <strong>HandlerMapping</strong> 返回的是一个 <strong>HandlerExecutionChain</strong> 对象；</p><p><strong>HandlerExecutionChain 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HandlerExecutionChain.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器数组</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerInterceptor[] interceptors;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器列表</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器当前下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerExecutionChain 对象包含一个处理器，这里处理器是对控制器的包装。处理器包含了控制器方法的逻辑，此外还有处理器的拦截器，这样就能够通过拦截器进一步地增强处理器的功能；</p><p>还需要一个适配器去运行 HandlerExecutionChain 对象包含的处理器，就是 HandlerAdapter 的实现类 HttpRequesHandlerAdapter，通过请求类型，DispatcherServlet 就会找到它来执行 Web 请求的 HandlerExecutionChain 对象包含的内容</p><p><strong>通过 application.properties 定制 InternalResourceViewResolver 初始化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><p>通过修改配置文件，就能在 Spring Boot 的机制下定制 <strong>InternalResourceViewResolver </strong> 这个视图解析器的初始化</p><p><strong>（注：踩坑 —— 在项目编译的时候，springboot 好像没有支持 jsp，要手动在 pom.xml 里面添加以下内容）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![实例在SpringMVC下的流程图](D:\Blog\myblog\source\_posts\SpringBoot学习笔记（Day07）\实例在SpringMVC下的流程图.jpg)<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><center>实例在 Spring MVC 下的流程图</center><p><img src="/2019/05/09/SpringBoot学习笔记（Day07）/实例在SpringMVC下的流程图.jpg" alt="实例在SpringMVC下的流程图"></p><p><strong>使用 JSON 视图</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detailsForJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">detailsForJson</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 访问模型层得到数据</span></span><br><span class="line">    User user = userService.getUser(id);</span><br><span class="line">    <span class="comment">// 模型和视图</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">// 生成 JSON 视图</span></span><br><span class="line">    MappingJackson2JsonView jsonView = <span class="keyword">new</span> MappingJackson2JsonView();</span><br><span class="line">    mv.setView(jsonView);</span><br><span class="line">    <span class="comment">// 加入模型</span></span><br><span class="line">    mv.addObject(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>在 Spring MVC 流程中使用 JSON 视图</center><p><img src="/2019/05/09/SpringBoot学习笔记（Day07）/在SpringMVC流程中使用JSON视图.jpg" alt="在SpringMVC流程中使用JSON视图"></p><h2 id="定制-Spring-MVC-初始化"><a href="#定制-Spring-MVC-初始化" class="headerlink" title="定制 Spring MVC 初始化"></a>定制 Spring MVC 初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 异步请求超时时间</span><br><span class="line">spring.mvc.async.request-timeout=</span><br><span class="line"># 是否使用请求参数（默认参数为 &quot;format&quot;）来确定请求的媒体类型</span><br><span class="line">spring.mvc.contentnegotiation.favor-parameter=false</span><br><span class="line"># 是否使用 URL 中的路径扩展来确定请求的媒体类型</span><br><span class="line">spring.mvc.contentnegotiation.favor-path-extension=false</span><br><span class="line"># 设置内容协商向媒体类型映射文件扩展名，例如，YML文本 / YAML</span><br><span class="line">spring.mvc.contentnegotiation.media-types.*=</span><br><span class="line"># 当启用 favor-parameter 参数时，自定义参数名</span><br><span class="line">spring.mvc.contentnegotiation.parameter-name=</span><br><span class="line"># 日期格式配置，入 yyyy-MM-dd</span><br><span class="line">spring.mvc.date-format=</span><br><span class="line"># 是否让 FrameworkServlet doService 方法支持 TRACE 请求</span><br><span class="line">spring.mvc.dispatch-trace-request=false</span><br><span class="line"># 是否启用 FrameworkServlet doService 方法支持 OPTIONS 请求</span><br><span class="line">spring.mvc.dispatch-options-request=true</span><br><span class="line"># spring MVC 的图标是否启用</span><br><span class="line">spring.mvc.favicon.enabled=true</span><br><span class="line"># Servlet 规范要求表格数据可用于 HTTP POST 而不是 HTTP PUT 或 PATCH 请求，这个选项将使得过滤器拦截 HTTP PUT 和 PATCH，且内容类型是 application/x-www-form-urlencoded 的请求，并且将其转换为 POST 请求</span><br><span class="line">spring.mvc.formcontent.filter.enabled=true</span><br><span class="line"># 如果配置为 default，那么他将忽略模型重定向的场景</span><br><span class="line">spring.mvc.ignore-default-model-on-redirect=true</span><br><span class="line"># 默认国际化选项，默认取 Accept-Language</span><br><span class="line">spring.mvc.locale=</span><br><span class="line"># 国际化解析器，如果需要固定可以使用 fixed</span><br><span class="line">spring.mvc.locale-resolver=accept_header</span><br><span class="line"># 是否启用警告日志异常解决</span><br><span class="line">spring.mvc.log-resolved-exception=false</span><br><span class="line"># 消息代码的格式化策略。例如 &apos; prefix_error_code &apos;</span><br><span class="line">spring.mvc.message-codes-resolver-format=</span><br><span class="line"># 是否对 spring.mvc.contentnegotiation.media-types.* 注册的扩展采用后缀模式匹配</span><br><span class="line">spring.mvc.pathmatch.use-registered-suffix-pattern=false</span><br><span class="line"># 当匹配模式到请求时，是否使用后缀模式匹配（.*）</span><br><span class="line">spring.mvc.pathmatch.use-suffix-pattern=false</span><br><span class="line"># 启用 Spring Web 服务 Servlet 的优先顺序配置</span><br><span class="line">spring.mvc.servlet.load-on-startup=-1</span><br><span class="line"># 指定静态资源路径</span><br><span class="line">spring.mvc.static-path-pattern=/**</span><br><span class="line"># 如果请求找不到处理器，是否抛出 NoHandlerFoundException 异常</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=false</span><br><span class="line"></span><br><span class="line">spring.mvc.view.prefix=</span><br><span class="line">spring.mvc.view.suffix=</span><br></pre></td></tr></table></figure><p>这些配置项将会被 Spring Boot 的机制读入，然后使用 WebMVCAutoConfigurationAdapter 去定制初始化</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/09/SpringBoot学习笔记（Day07）/pat-kay-1380646-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/BuPgonMyK9E?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pat Kay&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day06）</title>
    <link href="https://www.chentyit.com/2019/05/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day06%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/08/SpringBoot学习笔记（Day06）/</id>
    <published>2019-05-08T00:18:01.000Z</published>
    <updated>2019-05-08T09:13:24.375Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/08/SpringBoot学习笔记（Day06）/marion-michele-1464753-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/TaINhZO6diw?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Marion Michele</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Redis-的一些特殊用法"><a href="#Redis-的一些特殊用法" class="headerlink" title="Redis 的一些特殊用法"></a>Redis 的一些特殊用法</h2><h3 id="使用-Redis-事务"><a href="#使用-Redis-事务" class="headerlink" title="使用 Redis 事务"></a>使用 Redis 事务</h3><p>watch 命令：监控 Redis 的一些键；</p><p>multi 命令：是开始事务，开始事务后，该客户端的命令不会马上执行，而是存放在一个队列里面；</p><p>exec 命令：执行事务，在队列命令执行前会判断被 watch 监控的 Redis 键的数据是否发生过变化，如果发生变化，Redis 就会取消事务；</p><center>Redis 事务执行过程</center><p><img src="/2019/05/08/SpringBoot学习笔记（Day06）/Redis事务执行过程.jpg" alt="插图"></p><p><strong>通过 Spring 使用 Redis 事务机制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/multi"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testMulti</span><span class="params">()</span> </span>&#123;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">List list = (List) redisTemplate.execute(<span class="keyword">new</span> SessionCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">            <span class="comment">// 设置要监控key1</span></span><br><span class="line">            operations.watch(<span class="string">"key1"</span>);</span><br><span class="line">            <span class="comment">// 开启事务，在exec命令执行前，全部都只是进入队列</span></span><br><span class="line">            operations.multi();</span><br><span class="line">            operations.opsForValue().set(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">            <span class="comment">// operations.opsForValue().increment("key1", 1);// ①</span></span><br><span class="line">            <span class="comment">// 获取值将为null，因为redis只是把命令放入队列，</span></span><br><span class="line">            Object value2 = operations.opsForValue().get(<span class="string">"key2"</span>);</span><br><span class="line">            System.out.println(<span class="string">"命令在队列，所以value为null【"</span> + value2 + <span class="string">"】"</span>);</span><br><span class="line">            operations.opsForValue().set(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">            Object value3 = operations.opsForValue().get(<span class="string">"key3"</span>);</span><br><span class="line">            System.out.println(<span class="string">"命令在队列，所以value为null【"</span> + value3 + <span class="string">"】"</span>);</span><br><span class="line">            <span class="comment">// 执行exec命令，将先判别key1是否在监控后被修改过，如果是不执行事务，否则执行事务</span></span><br><span class="line">            <span class="keyword">return</span> operations.exec();<span class="comment">// ②</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis 处理事务和数据库事务不同，Redis 事务先让命令进入已有队列，所以一开始并没有检测错误命令是否能执行成功，只有在 <strong>exec</strong> 命令执行的时候，才能发现错误，对于出错的命令 Redis 只是报出错误，而错误后面的命令依旧被执行，这就是 Redis 事务的特点，也是使用 Redis 事务需要特别注意的地方；</p><h3 id="使用-Redis-流水线"><a href="#使用-Redis-流水线" class="headerlink" title="使用 Redis 流水线"></a>使用 Redis 流水线</h3><p>一次性发送多条执行命令</p><p><strong>使用 Redis 流水线测试性能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/multi"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testMulti</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Long start = System.currentTimeMillis();</span><br><span class="line">    List list = (List) redisTemplate.execute(<span class="keyword">new</span> SessionCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                operations.opsForValue().set(<span class="string">"pipeline_"</span> + i, <span class="string">"value_"</span> + i);</span><br><span class="line">                String value = (String) operations.opsForValue().get(<span class="string">"pipeline_"</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">100000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"命令只是进入队列，所以值为空【"</span> + value + <span class="string">"】"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Long end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"耗时："</span> + (end - start) + <span class="string">"毫秒。"</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Redis-发布订阅"><a href="#使用-Redis-发布订阅" class="headerlink" title="使用 Redis 发布订阅"></a>使用 Redis 发布订阅</h3><p>发布订阅是消息的一种常用模式，Redis 先提供一个渠道，让消息能够发送到这个渠道上，多个系统可以监听这个渠道，当一条消息发送到渠道，渠道就会通知它的监听者，这些监听者就会根据自己的需要去处理这个消息</p><center>发布订阅模式</center><p><img src="/2019/05/08/SpringBoot学习笔记（Day06）/发布订阅模式.jpg" alt="插图"></p><p><strong>Redis 消息监听器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * onMessage 方法是得到消息后的处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 代表 Redis 发送过来的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 渠道名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消息体</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        <span class="comment">// 渠道名称</span></span><br><span class="line">        String topic = <span class="keyword">new</span> String(pattern);</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        System.out.println(topic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Spring-缓存注解操作-Redis"><a href="#使用-Spring-缓存注解操作-Redis" class="headerlink" title="使用 Spring 缓存注解操作 Redis"></a>使用 Spring 缓存注解操作 Redis</h2><h3 id="缓存管理器和缓存的启用"><a href="#缓存管理器和缓存的启用" class="headerlink" title="缓存管理器和缓存的启用"></a>缓存管理器和缓存的启用</h3><p><strong>缓存管理器配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># SPRING CACHE (CacheProperties)</span><br><span class="line"># 如果由底层的缓存管理器支持创建，以逗号分隔的列表来缓存名称</span><br><span class="line">spring.cache.cache-names=</span><br><span class="line"># caffeine 缓存配置细节</span><br><span class="line">spring.cache.caffeine.spec=</span><br><span class="line"># couchbase 缓存超时时间，默认是永不超时</span><br><span class="line">spring.cache.couchbase.expiration=0ms</span><br><span class="line"># 配置 ehcache 缓存初始化文件路径</span><br><span class="line">spring.cache.infinispan.config=</span><br><span class="line"># jcache 缓存配置文件</span><br><span class="line">spring.cache.jcache.config=</span><br><span class="line"># jcache 缓存提供者配置</span><br><span class="line">spring.cache.jcache.provider=</span><br><span class="line"># 是否允许 Redis 缓存空值</span><br><span class="line">spring.cache.redis.cache-null-values=true</span><br><span class="line"># Redis 的键前缀</span><br><span class="line">spring.cache.redis.key-prefix=</span><br><span class="line"># 缓存超时时间戳，配置为0则不设置超时时间</span><br><span class="line">spring.cache.redis.time-to-live=0ms</span><br><span class="line"># 是否启用 Redis 的键前缀</span><br><span class="line">spring.cache.redis.use-key-prefix=true</span><br><span class="line"># 缓存类型，在默认的情况下，Spring 会自动根据上下文探测</span><br><span class="line">spring.cache.type=</span><br></pre></td></tr></table></figure><p><strong>用户实现类使用 Spring 缓存注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"redisCache"</span>, key = <span class="string">"'redis_user_' + #id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"redisCache"</span>, key = <span class="string">"'redis_user_' + #result.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"redisCache"</span>, condition = <span class="string">"#result != 'null'"</span>, key = <span class="string">"'redis_user_' + #id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUserName</span><span class="params">(Long id, String userName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此处调用 getUser 方法，该方法缓存注解失效</span></span><br><span class="line">        <span class="comment">// 所以这里还会执行 SQL，将查询到数据库最近数据</span></span><br><span class="line">        User user = <span class="keyword">this</span>.getUser(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(String userName, String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findUsers(userName, note);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"redisCache"</span>, key = <span class="string">"'redis_user_' + #id"</span>, beforeInvocation = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@CachePut 表示将方法结果返回存放到缓存中</li><li>@Cacheable 表示先从缓存中通过定义的键查询，如果可以查询到数据，则返回，否则执行方法，返回数据，并且将返回结果保存到缓存中</li><li>@CacheEvict 通过定义的键移除缓存，它有一个 Boolean 类型的配置项 beforeInvocation，表示在方法之前或者之后移除缓存，false代表方法之后将缓存移除</li></ul><h3 id="自定义缓存管理器"><a href="#自定义缓存管理器" class="headerlink" title="自定义缓存管理器"></a>自定义缓存管理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 禁用前缀</span><br><span class="line">spring.cache.redis.use-key-prefix=false</span><br><span class="line"># 允许保存空值</span><br><span class="line"># spring.cache.redis.cache-null-values=true</span><br><span class="line"># 自定义前缀</span><br><span class="line"># spring.cache.redis.key-prefix=</span><br><span class="line"># 定义超时时间，单位毫秒</span><br><span class="line">spring.cache.redis.time-to-live=600000</span><br></pre></td></tr></table></figure><p><strong>自定义缓存管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisConnectionFactory connectionFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"redisCacheManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">initRedisCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Redis 加锁的写入器</span></span><br><span class="line">    RedisCacheWriter writer = RedisCacheWriter.lockingRedisCacheWriter(connectionFactory);</span><br><span class="line">    <span class="comment">// 启动 Redis 序列化器</span></span><br><span class="line">    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">    <span class="comment">// 设置 JDK 序列化器</span></span><br><span class="line">    config = config.serializerValuesWith(SerializationPair.fromSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer()));</span><br><span class="line">    <span class="comment">// 禁用前缀</span></span><br><span class="line">    config = config.disableKeyProfix();</span><br><span class="line">    <span class="comment">// 设置 10min 超时</span></span><br><span class="line">    config = config.entryTtl(Duration.ofMinutes(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 创建缓存 Redis 管理器</span></span><br><span class="line">    RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager(writer, config);</span><br><span class="line">    <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先注入 RedisConnectionFactory 对象；</li><li>创建带锁的 RedisCacheWriter；</li><li>使用 RedisCacheConfiguration 对 RedisCacheWriter 属性进行配置（禁用前缀，设置超时时间为 10min）；</li><li>用 RedisCacheWriter 对象和 RedisCacheConfiguration 对象构建 RedisCacheManager 对象；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/08/SpringBoot学习笔记（Day06）/marion-michele-1464753-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/TaINhZO6diw?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Marion Michele&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day05）</title>
    <link href="https://www.chentyit.com/2019/05/07/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day05%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/07/SpringBoot学习笔记（Day05）/</id>
    <published>2019-05-07T00:30:22.000Z</published>
    <updated>2019-05-07T08:43:24.165Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/07/SpringBoot学习笔记（Day05）/ruud-luijten-1551202-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/zFvZ1r7YjGc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Ruud Luijten</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="spring-data-redis-项目介绍"><a href="#spring-data-redis-项目介绍" class="headerlink" title="spring-data-redis 项目介绍"></a>spring-data-redis 项目介绍</h2><h3 id="spring-data-redis-项目设计"><a href="#spring-data-redis-项目设计" class="headerlink" title="spring-data-redis 项目设计"></a>spring-data-redis 项目设计</h3><p>Spring 提供了一个 RedisConnectionFactory 接口，通过它可以生成一个 RedisConnection 接口对象，而 RedisConnection 是 Redis 底层接口的封装，如使用 Jedis，Spring 就会提供 RedisConnection 接口的实现类 JedisConnection 去封装原有的 Jedis；</p><p><img src="/2019/05/07/SpringBoot学习笔记（Day05）/RedisConnection关系图.jpg" alt="RedisConnection关系图"></p><h3 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h3><p>RedisTemplate 是一个强大的类，首先他会自动从 RedisConnectionFactory 工厂中获取连接，执行对应的 Redis 命令，在最后还会关闭 Redis 的连接；</p><h3 id="Spring-序列化器"><a href="#Spring-序列化器" class="headerlink" title="Spring 序列化器"></a>Spring 序列化器</h3><p>Spring 序列化器用于转储 Java 对象到 Redis 中，因为 Redis 是一种基于字符串存储的 NoSQL，对象无法存储到 Redis 中，只有通过序列化器转换为二进制字符串才能存储</p><p><img src="/2019/05/07/SpringBoot学习笔记（Day05）/Spring序列化器.jpg" alt="RedisConnection关系图"></p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">defaultSerializer</td><td style="text-align:left">默认序列化器</td><td style="text-align:left">如果没有配置，则使用 JdkSerializationRedisSerializer</td></tr><tr><td style="text-align:left">keySerializer</td><td style="text-align:left">Redis 键序列化器</td><td style="text-align:left">如果没有配置，则使用默认序列化器</td></tr><tr><td style="text-align:left">valueSerializer</td><td style="text-align:left">Redis 值序列化器</td><td style="text-align:left">如果没有配置，则使用默认序列化器</td></tr><tr><td style="text-align:left">hashKeySerializer</td><td style="text-align:left">Redis 散列结构 field 序列化器</td><td style="text-align:left">如果没有配置，则使用默认序列化器</td></tr><tr><td style="text-align:left">hashValueSerializer</td><td style="text-align:left">Redis 散列结构 value 序列化器</td><td style="text-align:left">如果没有配置，则使用默认序列化器</td></tr><tr><td style="text-align:left">stringSerializer</td><td style="text-align:left">字符串序列化器</td><td style="text-align:left">RedisTemplate 自动赋值为 StringRedisSerializer 对象</td></tr></tbody></table><h3 id="Spring-对-Redis-数据类型操作的封装"><a href="#Spring-对-Redis-数据类型操作的封装" class="headerlink" title="Spring 对 Redis 数据类型操作的封装"></a>Spring 对 Redis 数据类型操作的封装</h3><center>spring-data-redis 数据类型封装操作接口</center><table><thead><tr><th style="text-align:left">操作接口</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">GeoOperations</td><td>地理位置操作接口</td><td>使用不多</td></tr><tr><td style="text-align:left">HashOperations</td><td>散列操作接口</td><td></td></tr><tr><td style="text-align:left">HyperLogLogOperations</td><td>基数操作接口</td><td>使用不多</td></tr><tr><td style="text-align:left">ListOperations</td><td>列表（链表）操作接口</td><td></td></tr><tr><td style="text-align:left">SetOperations</td><td>集合操作接口</td><td></td></tr><tr><td style="text-align:left">ValueOperations</td><td>字符串操作接口</td><td></td></tr><tr><td style="text-align:left">ZSetOperations</td><td>有序集合操作接口</td></tr></tbody></table><p>都可以通过 RedisTemplate 得到，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取地理位置操作接口</span></span><br><span class="line">redisTemplate.opsForGeo();</span><br><span class="line"><span class="comment">// 获取散列操作接口</span></span><br><span class="line">redisTemplate.opsForHash();</span><br><span class="line"><span class="comment">// 获取基数操作接口</span></span><br><span class="line">redisTemplate.opsForHyperLogLog();</span><br><span class="line"><span class="comment">// 获取列表操作接口</span></span><br><span class="line">redisTemplate.opsForList();</span><br><span class="line"><span class="comment">// 获取集合操作接口</span></span><br><span class="line">redisTemplate.opsForSet();</span><br><span class="line"><span class="comment">// 获取字符串操作接口</span></span><br><span class="line">redisTemplate.opsForValue();</span><br><span class="line"><span class="comment">// 获取有序集合操作接口</span></span><br><span class="line">redisTemplate.opsForZSet();</span><br></pre></td></tr></table></figure><p>有事需要连续操作一个散列数据类型或者列表多次，这时 Spring 也提供支持，它提供了对应的 BoundXXXOperation 绑定接口：</p><table><thead><tr><th>接    口</th><th>说    明</th></tr></thead><tbody><tr><td>BoundGeoOperations</td><td>绑定一个地理位置数据类型的键操作，不常用</td></tr><tr><td>BoundHashOperations</td><td>绑定一个散列数据类型的键操作</td></tr><tr><td>BoundListOperations</td><td>绑定一个列表（链表）数据类型的键操作</td></tr><tr><td>BoundSetOperations</td><td>绑定一个集合数据类型的键操作</td></tr><tr><td>BoundValueOperations</td><td>绑定一个字符串集合数据类型的键操作</td></tr><tr><td>BoundZSetOperations</td><td>绑定一个有序集合数据类型的键操作</td></tr></tbody></table><p>RedisTemplate 对获取它们提供了对应的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取地理位置绑定键操作接口</span></span><br><span class="line">redisTemplate.boundGeoOps();</span><br><span class="line"><span class="comment">// 获取散列绑定键操作接口</span></span><br><span class="line">redisTemplate.boundHashOps();</span><br><span class="line"><span class="comment">// 获取列表（链表）绑定键操作接口</span></span><br><span class="line">redisTemplate.boundListOps();</span><br><span class="line"><span class="comment">// 获取集合绑定键操作接口</span></span><br><span class="line">redisTemplate.boundSetOps();</span><br><span class="line"><span class="comment">// 获取字符串绑定键操作接口</span></span><br><span class="line">redisTemplate.boundValueOps();</span><br><span class="line"><span class="comment">// 获取有序集合绑定键操作接口</span></span><br><span class="line">redisTemplate.boundZSetOps();</span><br></pre></td></tr></table></figure><h3 id="SessionCallback-和-RedisCallback-接口"><a href="#SessionCallback-和-RedisCallback-接口" class="headerlink" title="SessionCallback 和 RedisCallback 接口"></a>SessionCallback 和 RedisCallback 接口</h3><p>作用是让 RedisTemplate 进行回调，通过它们可以在同一条连接下执行多个 Redis 命令；</p><h2 id="在-Spring-Boot-中配置和使用-Redis"><a href="#在-Spring-Boot-中配置和使用-Redis" class="headerlink" title="在 Spring Boot 中配置和使用 Redis"></a>在 Spring Boot 中配置和使用 Redis</h2><h3 id="在-Spring-Boot-中配置-Redis"><a href="#在-Spring-Boot-中配置-Redis" class="headerlink" title="在 Spring Boot 中配置 Redis"></a>在 Spring Boot 中配置 Redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 配置连接池属性</span><br><span class="line">spring.redis.jedis.pool.min-idle=5</span><br><span class="line">spring.redis.jedis.pool.max-active=10</span><br><span class="line">spring.redis.jedis.pool.max-idle=10</span><br><span class="line">spring.redis.jedis.pool.max-wait=2000</span><br><span class="line"># 配置 Redis 服务器属性</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.host=192.168.11.154</span><br><span class="line"># 由于我的 Redis 服务器没有设置密码就没下下面的配置了</span><br><span class="line"># spring.redis.password</span><br><span class="line"># Redis 连接超时时间，单位毫秒</span><br><span class="line">spring.redis.timeout=1000</span><br></pre></td></tr></table></figure><p><strong>操作 Redis 字符串和散列数据类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/stringAndHash"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testStringAndHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"int_key"</span>, <span class="string">"1"</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"int"</span>, <span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">// 使用运算</span></span><br><span class="line">        stringRedisTemplate.opsForValue().increment(<span class="string">"int"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取底层 Jedis 连接</span></span><br><span class="line">        Jedis jedis = (Jedis) stringRedisTemplate.getConnectionFactory().getConnection().getNativeConnection();</span><br><span class="line">        <span class="comment">// 减1操作，这个命令 RedisTemplate 不支持，所以先获取底层连接再操作</span></span><br><span class="line">        jedis.decr(<span class="string">"int"</span>);</span><br><span class="line">        Map&lt;String, String&gt; hash = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hash.put(<span class="string">"field1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        hash.put(<span class="string">"field2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">        <span class="comment">// 存入一个散列数据类型</span></span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(<span class="string">"hash"</span>, hash);</span><br><span class="line">        <span class="comment">// 新增一个字段</span></span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">"hash"</span>, <span class="string">"field3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">        <span class="comment">// 绑定散列操作的key，这样可以连续对同一个散列数据类型进行操作</span></span><br><span class="line">        BoundHashOperations hashOps = stringRedisTemplate.boundHashOps(<span class="string">"hash"</span>);</span><br><span class="line">        <span class="comment">// 删除两个字段</span></span><br><span class="line">        hashOps.delete(<span class="string">"field1"</span>, <span class="string">"field2"</span>);</span><br><span class="line">        <span class="comment">// 新增一个字段</span></span><br><span class="line">        hashOps.put(<span class="string">"field5"</span>, <span class="string">"value5"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Spring 操作列表（链表）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 插入两个列表，注意它们在链表的顺序</span></span><br><span class="line">        <span class="comment">// 链表从左到右顺序为v10，v8，v6，v4，v2</span></span><br><span class="line">        stringRedisTemplate.opsForList().leftPushAll(</span><br><span class="line">                <span class="string">"list1"</span>, <span class="string">"v2"</span>, <span class="string">"v4"</span>, <span class="string">"v6"</span>, <span class="string">"v8"</span>, <span class="string">"v10"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 链表从左到右顺序为v1, v2, v3, v4, v5, v6</span></span><br><span class="line">        stringRedisTemplate.opsForList().rightPushAll(</span><br><span class="line">                <span class="string">"list2"</span>, <span class="string">"v1"</span>, <span class="string">"v2"</span>, <span class="string">"v3"</span>, <span class="string">"v4"</span>, <span class="string">"v5"</span>, <span class="string">"v6"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 绑定 list2 链表操作</span></span><br><span class="line">        BoundListOperations listOps = stringRedisTemplate.boundListOps(<span class="string">"list2"</span>);</span><br><span class="line">        <span class="comment">// 从右边弹出一个成员</span></span><br><span class="line">        Object result1 = listOps.rightPop();</span><br><span class="line">        <span class="comment">// 获取定位元素，Redis 从 0 开始计算，这里值为 v2</span></span><br><span class="line">        Object result2 = listOps.index(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 从左边插入链表</span></span><br><span class="line">        listOps.leftPush(<span class="string">"v0"</span>);</span><br><span class="line">        <span class="comment">// 求链表长度</span></span><br><span class="line">        Long size = listOps.size();</span><br><span class="line">        <span class="comment">// 求链表下标区间成员，整个链表下标范围为 0 到 size-1，这里不取最后一个元素</span></span><br><span class="line">        List elements = listOps.range(<span class="number">0</span>, size - <span class="number">2</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Spring 集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/set"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 请注意：这里 v1 重复两次，因为集合不允许重复，所以只是插入 5 个成员到集合中</span></span><br><span class="line">        stringRedisTemplate.opsForSet().add(</span><br><span class="line">                <span class="string">"set1"</span>, <span class="string">"v1"</span>, <span class="string">"v1"</span>, <span class="string">"v2"</span>, <span class="string">"v3"</span>, <span class="string">"v4"</span>, <span class="string">"v5"</span></span><br><span class="line">        );</span><br><span class="line">        stringRedisTemplate.opsForSet().add(</span><br><span class="line">                <span class="string">"set2"</span>, <span class="string">"v2"</span>, <span class="string">"v4"</span>, <span class="string">"v6"</span>, <span class="string">"v8"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 绑定 set1 集合操作</span></span><br><span class="line">        BoundSetOperations setOps = stringRedisTemplate.boundSetOps(<span class="string">"set1"</span>);</span><br><span class="line">        <span class="comment">// 增加两个元素</span></span><br><span class="line">        setOps.add(<span class="string">"v6"</span>, <span class="string">"v7"</span>);</span><br><span class="line">        <span class="comment">// 删除两个元素</span></span><br><span class="line">        setOps.remove(<span class="string">"v1"</span>, <span class="string">"v7"</span>);</span><br><span class="line">        <span class="comment">// 返回所有元素</span></span><br><span class="line">        Set set1 = setOps.members();</span><br><span class="line">        <span class="comment">// 求成员数</span></span><br><span class="line">        Long size = setOps.size();</span><br><span class="line">        <span class="comment">// 求交集</span></span><br><span class="line">        Set inter = setOps.intersect(<span class="string">"set2"</span>);</span><br><span class="line">        <span class="comment">// 求交集，并且用新集合 inter 保存</span></span><br><span class="line">        setOps.intersectAndStore(<span class="string">"set2"</span>, <span class="string">"inter"</span>);</span><br><span class="line">        <span class="comment">// 求差集</span></span><br><span class="line">        Set diff = setOps.diff(<span class="string">"set2"</span>);</span><br><span class="line">        <span class="comment">// 求差集，并且用新集合 diff 保存</span></span><br><span class="line">        setOps.diffAndStore(<span class="string">"set2"</span>, <span class="string">"diff"</span>);</span><br><span class="line">        <span class="comment">// 求并集</span></span><br><span class="line">        Set union = setOps.union(<span class="string">"set2"</span>);</span><br><span class="line">        <span class="comment">// 求并集，并且用新集合 union 保存</span></span><br><span class="line">        setOps.unionAndStore(<span class="string">"set2"</span>, <span class="string">"union"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作 Redis 有序集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/zset"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">testZSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTupleSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 分数</span></span><br><span class="line">            <span class="keyword">double</span> score = i * <span class="number">0.1</span>;</span><br><span class="line">            <span class="comment">// 创建一个 TypeTuple 对象，存入值和分数</span></span><br><span class="line">            ZSetOperations.TypedTuple&lt;String&gt; typedTuple = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">"value"</span> + i, score);</span><br><span class="line">            typedTupleSet.add(typedTuple);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往有序集合插入元素</span></span><br><span class="line">        stringRedisTemplate.opsForZSet().add(<span class="string">"zset1"</span>, typedTupleSet);</span><br><span class="line">        <span class="comment">// 绑定 zset1 有序集合操作</span></span><br><span class="line">        BoundZSetOperations&lt;String, String&gt; zsetOps = stringRedisTemplate.boundZSetOps(<span class="string">"zset1"</span>);</span><br><span class="line">        <span class="comment">// 增加一个元素</span></span><br><span class="line">        zsetOps.add(<span class="string">"value10"</span>, <span class="number">0.26</span>);</span><br><span class="line">        Set&lt;String&gt; setRange = zsetOps.range(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 按分数排序获取有序集合</span></span><br><span class="line">        Set&lt;String&gt; setScore = zsetOps.rangeByScore(<span class="number">0.2</span>, <span class="number">0.6</span>);</span><br><span class="line">        <span class="comment">// 定义值范围</span></span><br><span class="line">        Range range = <span class="keyword">new</span> Range();</span><br><span class="line">        range.gt(<span class="string">"value3"</span>);</span><br><span class="line">        range.lte(<span class="string">"value8"</span>);</span><br><span class="line">        <span class="comment">// 按值排序，请注意这个排序是按字符串排序</span></span><br><span class="line">        Set&lt;String&gt;  setLex = zsetOps.rangeByLex(range);</span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        zsetOps.remove(<span class="string">"value9"</span>, <span class="string">"value2"</span>);</span><br><span class="line">        <span class="comment">// 求分数</span></span><br><span class="line">        Double score = zsetOps.score(<span class="string">"value8"</span>);</span><br><span class="line">        <span class="comment">// 在下标区间下，按分数排序，同时返回 value 和 score</span></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; rangeSet = zsetOps.rangeWithScores(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 在分数区间下，按分数排序，同时返回 value 和 score</span></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; scoreSet = zsetOps.rangeByScoreWithScores(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 按从大到小排序</span></span><br><span class="line">        Set&lt;String&gt; reverseSet = zsetOps.reverseRange(<span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/07/SpringBoot学习笔记（Day05）/ruud-luijten-1551202-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/zFvZ1r7YjGc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruud Luijten&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day06）</title>
    <link href="https://www.chentyit.com/2019/05/06/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day06%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/06/Redis学习笔记（Day06）/</id>
    <published>2019-05-06T02:46:29.000Z</published>
    <updated>2019-05-19T01:11:56.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/06/Redis学习笔记（Day06）/sid-verma-1387706-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/Xvlc79bu9MA?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Sid Verma</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>所需 jar 包：</p><ul><li>commons-pool</li><li>jedis</li></ul><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.11.154"</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是在 Linux 上直接运行代码，而是在 Windows 上远程连接，就会报错，解决方案：</p><ol><li>注释配置文件的 bind 127.0.0.1</li><li>将保护模式后面的 yea 改为 no</li></ol><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"># 把这里的 bind 注释掉</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    &quot;bind&quot; directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line"># 把保护模式关掉或者添加密码 测试的话直接关掉 省得麻烦</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><h3 id="Jedis-操作数据"><a href="#Jedis-操作数据" class="headerlink" title="Jedis  操作数据"></a>Jedis  操作数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAPI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.11.154"</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">        jedis.set(<span class="string">"k2"</span>, <span class="string">"v2"</span>);</span><br><span class="line">        jedis.set(<span class="string">"k3"</span>, <span class="string">"v3"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"k1"</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; sets = jedis.keys(<span class="string">"*"</span>);</span><br><span class="line">        System.out.println(sets.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis-事务"><a href="#Jedis-事务" class="headerlink" title="Jedis 事务"></a>Jedis 事务</h3><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.11.154"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        Transaction transaction = jedis.multi();</span><br><span class="line">        transaction.set(<span class="string">"k44"</span>, <span class="string">"v44"</span>);</span><br><span class="line">        transaction.set(<span class="string">"k55"</span>, <span class="string">"v55"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transaction.exec();</span></span><br><span class="line">        transaction.discard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.11.154"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">int</span> balance;    <span class="comment">// 可用余额</span></span><br><span class="line">        <span class="keyword">int</span> debt;       <span class="comment">// 欠额</span></span><br><span class="line">        <span class="keyword">int</span> amtToSubtract = <span class="number">10</span>;  <span class="comment">// 实刷额度</span></span><br><span class="line"></span><br><span class="line">        jedis.watch(<span class="string">"balance"</span>);</span><br><span class="line">        balance = Integer.parseInt(jedis.get(<span class="string">"balance"</span>));</span><br><span class="line">        <span class="keyword">if</span> (balance &lt; amtToSubtract) &#123;</span><br><span class="line">            jedis.unwatch();</span><br><span class="line">            System.out.println(<span class="string">"modify"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"*******************transaction"</span>);</span><br><span class="line">            Transaction transaction = jedis.multi();</span><br><span class="line">            transaction.decrBy(<span class="string">"balance"</span>, amtToSubtract);</span><br><span class="line">            transaction.incrBy(<span class="string">"debt"</span>, amtToSubtract);</span><br><span class="line">            transaction.exec();</span><br><span class="line">            balance = Integer.parseInt(jedis.get(<span class="string">"balance"</span>));</span><br><span class="line">            debt = Integer.parseInt(jedis.get(<span class="string">"debt"</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"*************"</span> + balance);</span><br><span class="line">            System.out.println(<span class="string">"*************"</span> + debt);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * watch 命令就是标记一个键，如果标记了一个键</span></span><br><span class="line"><span class="comment">     * 在提交事务前，如果别比人修改过，那事务就会失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestTX testTX = <span class="keyword">new</span> TestTX();</span><br><span class="line">        <span class="keyword">boolean</span> retValue = testTX.transMethod();</span><br><span class="line">        System.out.println(<span class="string">"main retValue ----------- : "</span> + retValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JedisPool"><a href="#JedisPool" class="headerlink" title="JedisPool"></a>JedisPool</h3><ul><li>获取 Jedis 实例需要从 JedisPool 中获取</li><li>用完 Jedis 实例需要返还给 JedisPool</li><li>如果 Jedis 在使用过程中出错，则也需要还给 JedisPool</li></ul><p>演示代码：</p><p>JedisPoolUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line">                    JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">                    poolConfig.setMaxActive(<span class="number">1000</span>);</span><br><span class="line">                    poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    poolConfig.setMaxWait(<span class="number">100</span> * <span class="number">1000</span>);</span><br><span class="line">                    poolConfig.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                    jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">"192.168.11.154"</span>, <span class="number">6379</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jedisPool.returnResourceObject(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestPool.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JedisPool jedisPool = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"></span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            jedis.set(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JedisPoolUtil.release(jedisPool, jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>JedisPool 的配置参数大部分是由 JedisPoolConfig 的对应项来赋值的。</p><p><strong>maxActive</strong>：控制一个pool可分配多少个jedis实例，通过 pool.getResource() 来获取；如果赋值为 -1，则表示不限制；如果 pool 已经分配了 maxActive 个 jedis 实例，则此时 pool 的状态为 exhausted；</p><p><strong>maxIdle</strong>：控制一个 pool 最多有多少个状态为 idle（空闲）的 jedis 实例；</p><p>whenExhaustedAction：表示当 pool 中的 jedis 实例都被 allocated 完时，pool 要采取的操作；默认有三种：</p><ul><li>WHEN_EXHAUSTED_FAIL –&gt; 表示无 jedis 实例时，直接抛出 NoSuchElementException；</li><li>WHEN_EXHAUSTED_BLOCK –&gt; 则表示阻塞住，或者达到 maxWait 时抛出 JedisConnectionException；</li><li>WHEN_EXHAUSTED_GROW –&gt; 则表示新建一个 jedis 实例，也就说设置的 maxActive 无用；</li></ul><p><strong>maxWait</strong>：表示当borrow一个 jedis 实例时，最大的等待时间，如果超过等待时间，则直接抛 JedisConnectionException；</p><p><strong>testOnBorrow</strong>：获得一个 jedis 实例的时候是否检查连接可用性（ ping() ）；如果为true，则得到的 jedis 实例均是可用的；</p><p>testOnReturn：return 一个 jedis 实例给pool时，是否检查连接可用性（ping() ）；</p><p>testWhileIdle：如果为 true，表示有一个 idle object evitor 线程对 idle object 进行扫描，如果 validate 失败，此 object 会被从 pool 中 drop 掉；这一项只有在 timeBetweenEvictionRunsMillis 大于 0 时才有意义；</p><p>timeBetweenEvictionRunsMillis：表示 idle object evitor 两次扫描之间要 sleep 的毫秒数；</p><p>numTestsPerEvictionRun：表示 idle object evitor 每次扫描的最多的对象数；</p><p>minEvictableIdleTimeMillis：表示一个对象至少停留在 idle 状态的最短时间，然后才能被 idle object evitor 扫描并驱逐；这一项只有在 timeBetweenEvictionRunsMillis 大于0时才有意义；</p><p>softMinEvictableIdleTimeMillis：在 minEvictableIdleTimeMillis 基础上，加入了至少 minIdle 个对象已经在pool里面了。如果为 -1，evicted 不会根据 idle time 驱逐任何对象。如果 minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在 timeBetweenEvictionRunsMillis 大于 0 时才有意义；</p><p>lifo：borrowObject返回对象时，是采用 DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为 False，则表示 FIFO 队列；</p><p>==================================================================================================================<br>其中 JedisPoolConfig 对一些参数的默认设置如下：<br>testWhileIdle=true<br>minEvictableIdleTimeMills=60000<br>timeBetweenEvictionRunsMillis=30000<br>numTestsPerEvictionRun=-1</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/06/Redis学习笔记（Day06）/sid-verma-1387706-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/Xvlc79bu9MA?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sid Verma&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day05）</title>
    <link href="https://www.chentyit.com/2019/05/05/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day05%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/05/Redis学习笔记（Day05）/</id>
    <published>2019-05-05T00:26:02.000Z</published>
    <updated>2019-05-19T01:12:06.009Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/05/Redis学习笔记（Day05）/martin-adams-1557946-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/RCx7eaBL8Io?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Martin Adams</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的，所有命令都会序列化，<strong>按顺序地串行化执行而不会被其它命令插入，不许加塞</strong></p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>一个队列中，一次性，顺序性，排他性的执行一系列命令</p><h3 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><strong>Case1：DISCARD —— 取消事务，放弃事务块内的所有命令</strong></p><p><strong>Case2：EXEC —— 执行所有事务块内的命令</strong></p><p><strong>Case3：MULTI —— 标记一个事务块的开始</strong></p><p><strong>Case4：UNWATCH —— 取消 WATCH 命令对所有 key 的监视</strong></p><p><strong>Case5：WATCH —— 监视一个（或多个）key，如果在事务执行之前，这个（或这些）key 被其他命令所改动，那么事务将被打断</strong></p><ul><li><p><strong>悲观锁</strong></p><p> 悲观锁（Pessimistic Lock）， 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</p></li><li><p><strong>乐观锁</strong></p><p>乐观锁（Optimistic Lock）， 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，<strong>所以不会上锁</strong>，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，</p><p><strong>乐观锁策略：提交版本必须大于记录当前版本才能执行更新</strong></p></li><li><p><strong>CAS（Check And Set）</strong></p></li><li><p><strong>有加塞篡改</strong></p><p>监控了key，如果key被修改了，后面一个事务的执行失效</p></li></ul><p>一旦执行了 EXEC 之前加的监控锁都会被取消掉了</p><p>Watch 指令，类似乐观锁，事务提交时，如果 Key 的值已被别的客户端改变，比如某个 list 已被别的客户端 push / pop 过了，整个事务队列都不会被执行</p><p>通过 WATCH 命令在事务执行之前监控了多个 Keys，倘若在 WATCH 之后有任何 Key 的值发生了变化，EXEC 命令执行的事务都将被放弃，同时返回 Nullmulti-bulk 应答以通知调用者事务执行失败</p><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ol><li>开启：以MULTI开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由EXEC命令触发事务</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题</li><li>不保证原子性：redis 同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ol><h2 id="Redis-的发布订阅"><a href="#Redis-的发布订阅" class="headerlink" title="Redis 的发布订阅"></a>Redis 的发布订阅</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li><p>PSUBSCRIBE pattern [pattern …]</p><p>订阅一个或多个符合给定模式的频道</p></li><li><p>PUBSUB subcommand [argument [argument …]]</p><p>查看订阅与发布信息</p></li><li><p>PUBLISH channel message</p><p>将信息发送到指定的频道</p></li><li><p>PUNSUBSCRIBE [pattern [pattern …]]</p><p>退订所有给定模式的频道</p></li><li><p>SUBSCRIBE channel [channel …]</p><p>订阅给定的一个或多个频道信息</p></li><li><p>UNSUBSCRIBE [channel [channel …]]</p><p>指退订给定的频道</p></li></ul><h3 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h3><p><strong>先订阅后发布</strong>后才能收到消息</p><ol><li>可以一次性订阅多个，SUBSCRIBE c1 c2 c3</li><li>消息发布，PUBLISH c2 hello-redis</li><li>订阅多个，通配符<em>，PSUBSCRIBE new</em></li><li>收取消息，PUBLISH new1 redis2015</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/05/Redis学习笔记（Day05）/martin-adams-1557946-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/RCx7eaBL8Io?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Martin Adams&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day04）</title>
    <link href="https://www.chentyit.com/2019/05/04/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day04%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/04/Redis学习笔记（Day04）/</id>
    <published>2019-05-04T01:25:34.000Z</published>
    <updated>2019-05-19T01:12:12.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/04/Redis学习笔记（Day04）/berti-benbanaste-1550570-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/O6vaYviRDoo?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Berti Benbanaste</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里</p><p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p><p>RDB 的缺点是最后一次持久化后的数据可能丢失。</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><p>fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p><h4 id="rdb-保存的是dump-rdb文件"><a href="#rdb-保存的是dump-rdb文件" class="headerlink" title="rdb 保存的是dump.rdb文件"></a>rdb 保存的是dump.rdb文件</h4><h4 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h4><ul><li><p>配置文件中默认的快照配置</p><p>冷拷贝后重新使用（可以cp dump.rdb dump_new.rdb）</p></li><li><p>命令 save 或者是 bgsave</p><ul><li>save：save时只管保存，其它不管，全部阻塞</li><li>bgsave：Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过 lastsave 命令获取最后一次成功执行快照的时间</li></ul></li><li><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p></li></ul><h4 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h4><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可</p><p>CONFIG GET dir获取目录</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改</li><li>fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li></ul><h4 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h4><p>动态所有停止RDB保存规则的方法：redis-cli config set save “”</p><h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><h4 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h4><p><strong>以日志的形式来记录每个<em>写操作</em></strong>，将 Redis 执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h4 id="AOF-保存的是-appendonly-aof-文件"><a href="#AOF-保存的是-appendonly-aof-文件" class="headerlink" title="AOF 保存的是 appendonly.aof 文件"></a>AOF 保存的是 appendonly.aof 文件</h4><h4 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h4><h5 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h5><ol><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应目录(config get dir)</li><li>恢复：重启redis然后重新加载</li></ol><h5 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h5><ol><li>修改默认的appendonly no，改为yes</li><li>备份被写坏的AOF文件</li><li>redis-check-aof –fix进行修复</li><li>恢复：重启redis然后重新加载</li></ol><h4 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h4><ul><li><strong>是什么：</strong>AOF 采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令 bgrewriteaof</li><li><strong>重写原理：</strong>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写(也是先写临时文件最后再 rename)，遍历新进程的内存中数据，每条记录有一条的 Set 语句。重写 aof 文件的操作，并没有读取旧的 aof 文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似</li><li><strong>触发机制：</strong> <em>Redis 会记录上次重写时的 AOF 大小，默认配置是当AOF文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发</em></li></ul><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>每修改同步：appendfsync always——同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好</li><li>每秒同步：appendfsync everysec——异步操作，每秒记录   如果一秒内宕机，有数据丢失</li><li>不同步：appendfsync no——从不同步</li></ul><h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ul><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/04/Redis学习笔记（Day04）/berti-benbanaste-1550570-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/O6vaYviRDoo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Berti Benbanaste&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day03）</title>
    <link href="https://www.chentyit.com/2019/05/03/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day03%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/03/Redis学习笔记（Day03）/</id>
    <published>2019-05-03T02:55:45.000Z</published>
    <updated>2019-05-19T01:12:19.659Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/03/Redis学习笔记（Day03）/chi-liu-1552956-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/Bj_MIJ3vpT4?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Chi Liu</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Redis-配置文件"><a href="#Redis-配置文件" class="headerlink" title="Redis 配置文件"></a>Redis 配置文件</h2><h3 id="在哪"><a href="#在哪" class="headerlink" title="在哪"></a>在哪</h3><p>拷贝出来单独执行，原文件在 redis 解压文件目录下</p><h3 id="Units-单位"><a href="#Units-单位" class="headerlink" title="Units 单位"></a>Units 单位</h3><ol><li>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit</li><li>对大小写不敏感</li></ol><h3 id="INCLUDES-包含"><a href="#INCLUDES-包含" class="headerlink" title="INCLUDES 包含"></a>INCLUDES 包含</h3><p>和 Strust2 配置文件类似，可以通过 includes 包含，redis.conf 可以作为总闸，包含其他</p><h3 id="GENERAL-通用"><a href="#GENERAL-通用" class="headerlink" title="GENERAL 通用"></a>GENERAL 通用</h3><ul><li><p>Daemonlize</p><p>默认为 no，需要改成 yes</p></li><li><p>Pidfile</p><p>进程管道 ID 文件，运行起来如果没指定路径，就使用默认的路径</p></li><li><p>Port</p><p>配置的端口号</p></li><li><p>Tcp-backlog</p><p>设置 tcp 的 backlog，backlog其实是一个连接队列，backlog队列总和 = 未完成三次握手 + 已经完成三次握手队列</p><p>在高并发环境下，需要一个高 backlog 值来避免慢客户端连接问题，Linux 内核会将这个值减小到 /proc/sys/net/core/somaxconn 的值，所以需要确认增大 somaxconn 和 tcp_max_syn_backlog 两个值来达到想要的效果</p></li><li><p>Timeout</p></li><li><p>Bind</p></li><li><p>Tcp-keepalive</p><p>单位为秒，如果设置为 0，则不会进行 Keepalive 检测，建议设置成 60</p></li><li><p>Loglevel</p><p>日志级别：</p><ul><li>debug</li><li>verbose</li><li>notice</li><li>warning</li></ul></li><li><p>Logfile</p><p>日志名字</p></li><li><p>Syslog-enabled</p><p>是否把日志输出到 Syslog（默认关）</p></li><li><p>Syslog-ident</p><p>指定 Syslog 里的日志标志</p></li><li><p>Syslog-facility</p><p>指定 syslog 设备，只可以是 USER 或 LOCAL0 - LOCAL7（默认LOCAL0）</p></li><li><p>Databases</p><p>默认数据库的数量</p></li></ul><h3 id="SNAPSHOTTING-快照"><a href="#SNAPSHOTTING-快照" class="headerlink" title="SNAPSHOTTING 快照"></a>SNAPSHOTTING 快照</h3><ul><li>Save（save 秒钟 写操作次数）</li><li>stop-writes-on-bgsave-error（如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制）</li><li>rdbcompression（rdbcompression：对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis 会采用 LZF 算法进行压缩。如果你不想消耗 CPU 来进行压缩的话，可以设置为关闭此功能）</li><li>rdbchecksum（rdbchecksum：在存储快照后，还可以让 redis 使用 CRC64 算法来进行数据校验，但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能）</li><li>dbfilename（备份文件名称）</li><li>dir</li></ul><h3 id="REPLICATION-复制"><a href="#REPLICATION-复制" class="headerlink" title="REPLICATION 复制"></a>REPLICATION 复制</h3><h3 id="SECURITY-安全"><a href="#SECURITY-安全" class="headerlink" title="SECURITY 安全"></a>SECURITY 安全</h3><h3 id="LIMITS-限制"><a href="#LIMITS-限制" class="headerlink" title="LIMITS 限制"></a>LIMITS 限制</h3><ul><li><p>Maxclients</p></li><li><p>Maxmemory</p></li><li><p>Maxmemory-policy</p><ul><li>Volatile-lru -&gt; remove the key with an expire set using an LRU algorithm（使用 LRU 算法移除 key， 只对设置了过期时间的键）</li><li>Allkeys-lru -&gt; remove any key according to the LRU algorithm（使用 LRU 算法移除 key）</li><li>Volatile-random -&gt; remove a random key with an expire set（在过期集合中移除随机的 key，只对设置了过期时间的键）</li><li>Allkeys-random -&gt; remoce a random key, any key（移除随机的 key）</li><li>Volatile-ttl -&gt; remove the key with the nearest expire time(minor TTL)（移除那些 TTL 值最小的 key，即那些最近要过期的 key）</li><li>Noeviction -&gt; don’t expire at all, just return an error on write operations（不进行移除，针对写操作，只是返回错误信息）</li></ul></li><li><p>Maxmemory-samples</p><p>设置样本数量，LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个</p></li></ul><h3 id="APPEND-ONLY-MODE-追加"><a href="#APPEND-ONLY-MODE-追加" class="headerlink" title="APPEND ONLY MODE 追加"></a>APPEND ONLY MODE 追加</h3><ul><li>appendonly</li><li>appendfilename</li><li>appendfsync<ul><li>always：同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好</li><li>everysec：出厂默认推荐，异步操作，每秒记录，如果一秒内宕机，有数据丢失</li><li>no</li></ul></li><li>no-appendfsync-on-rewrite：重写时是否可以运用 Appendfsync，用默认 no 即可，保证数据安全性。</li><li>auto-aof-rewrite-min-size：设置重写的基准值</li><li>auto-aof-rewrite-percentage：设置重写的基准值</li></ul><h3 id="常见配置-redis-conf-介绍"><a href="#常见配置-redis-conf-介绍" class="headerlink" title="常见配置 redis.conf 介绍"></a>常见配置 redis.conf 介绍</h3><p>参数说明<br>redis.conf 配置项说明如下：</p><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br> daemonize no</li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br> pidfile /var/run/redis.pid</li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br> port 6379</li><li>绑定的主机地址<br> bind 127.0.0.1<br>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br> timeout 300</li><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br> loglevel verbose</li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br> logfile stdout</li><li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<br> databases 16</dbid></li><li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br> save <seconds> <changes><br> Redis默认配置文件中提供了三个条件：<br> save 900 1<br> save 300 10<br> save 60 10000<br> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</changes></seconds></p></li><li><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</p></li><li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li><li>指定本地数据库存放目录<br>dir ./</li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof <masterip> <masterport></masterport></masterip></li><li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth <master-password></master-password></li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭<br>requirepass foobared</password></li><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory <bytes></bytes></li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li><li>指定更新日志文件名，默认为appendonly.aof<br>  appendfilename appendonly.aof</li><li><p>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</p></li><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>  vm-enabled no</p></li><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>  vm-swap-file /tmp/redis.swap</li><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>  vm-max-memory 0</li><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>  vm-page-size 32</li><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>  vm-pages 134217728</li><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>  vm-max-threads 4</li><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/03/Redis学习笔记（Day03）/chi-liu-1552956-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/Bj_MIJ3vpT4?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chi Liu&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day02）</title>
    <link href="https://www.chentyit.com/2019/05/02/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day02%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/02/Redis学习笔记（Day02）/</id>
    <published>2019-05-02T00:05:13.000Z</published>
    <updated>2019-05-19T01:12:25.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/02/Redis学习笔记（Day02）/john-hoang-1553942-unsplash.jpg" alt="插图"></p><blockquote><p>Photo by <a href="https://unsplash.com/photos/sf7TIaIwbjs?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">John Hoang</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Redis：<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver（远程字典服务器）</p><p>是完全开源免费的，用 C 语言编写，遵循 BSD 协议，是一个高性能的（key / value）分布式内存数据库，基于内存运行并支持持久化的 NoSQL 数据库，是当前最热门的 NoSQL 数据库之一，也被称为数据结构服务器</p><p>特点：</p><ul><li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li><li>Redis 不仅仅支持简单的 key - value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储</li><li>Redis 支持数据的备份，即 master - slave 模式的数据备份</li></ul><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>内存存储和持久化：redis 支持异步将内存中的数据写到硬盘上，同时不影响继续服务</p><p>取最新 N 个数据的操作，如：可以将最新的10条评论的 ID 放在 Redis 的 List 集合里面</p><p>模拟类似于 HttpSession 这种需要设定过期时间的功能</p><p>发布、订阅消息系统</p><p>定时器、计数器</p><h2 id="Redis安装及启动"><a href="#Redis安装及启动" class="headerlink" title="Redis安装及启动"></a>Redis安装及启动</h2><p>将 tar.gz 包发送到 Linux 下，解压，进入目录，make &amp;&amp; make install，如果报没有 gcc 错误，就执行 <strong>yum install -y gcc</strong></p><p>安装完成之后可以在 /usr/local/bin 下面发现有以下命令</p><p><img src="/2019/05/02/Redis学习笔记（Day02）/Rediscmd.png" alt="插图"></p><p>将 <strong>redis</strong> 解压目录下的 redis.conf 复制到自定义目录中（我的是/myredis/）</p><p>启动 redis 服务器：redis-server /myredis/redis.conf</p><p>查看 redis 服务是否启动：ps -ef | grep redis</p><p>启动 redis-cli：redis-cli -p 6379（6379 为默认端口）</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li><p>单进程</p><p>单进程模型来处理客户端请求，对读写等事件的响应，是通过对 epoll 函数的包装来做到的，Redis 的实际处理速度完全依靠主进程的执行效率</p><p>Epoll 是 Linux 内核为处理大批量文件描述符二做了改进的 epoll，是 Linux 下多路复用 IO 接口 select / poll 的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统 CPU 利用率</p></li><li><p>默认 16 个数据库，类似数组下标从 0 开始，初始默认使用零号数据库</p></li><li>Select 命令切换数据库</li><li>Dbsize 查看当前数据库的 key 的数量</li><li>FLUSHDB：清空当前库</li><li>FLUSHALL：通杀全部库</li><li>统一密码管理，16 个库都是同样的密码，要么都连接，要么都连不上</li><li>Redis 索引都是从零开始</li><li>默认端口 6379</li></ul><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><h3 id="Redis-五大数据类型"><a href="#Redis-五大数据类型" class="headerlink" title="Redis 五大数据类型"></a>Redis 五大数据类型</h3><ul><li>String（字符串，最多可以是 512M）</li><li>Hash（哈希，类似于 Java 里的 Map）</li><li>List（列表）</li><li>Set（集合）</li><li>Zset（sorted set：有序集合 每个元素都会关联一个double类型的分数，分数可重复）</li></ul><h3 id="Redis-常见数据类型操作命令"><a href="#Redis-常见数据类型操作命令" class="headerlink" title="Redis 常见数据类型操作命令"></a>Redis 常见数据类型操作命令</h3><p><strong><a href="https://redis.io/commands" target="_blank" rel="noopener">https://redis.io/commands</a></strong></p><h3 id="Redis-键（key）"><a href="#Redis-键（key）" class="headerlink" title="Redis 键（key）"></a>Redis 键（key）</h3><ul><li>keys * –&gt; 查看当前数据库所有的 key</li><li>exists key的名字 –&gt; 判断某个 key 是否存在</li><li>move key名 db序号 –&gt; 将一个 key 值移动到指定的数据库中，当前数据库就没有了</li><li>expire key名 –&gt; 为给定的 key 设置过期时间</li><li>ttl key –&gt; 查看还有多少秒过期，-1 表示永不过期，-2 表示已过期</li><li>type key –&gt; 查看 key 是什么类型</li></ul><h3 id="Redis-字符串（String）"><a href="#Redis-字符串（String）" class="headerlink" title="Redis 字符串（String）"></a>Redis 字符串（String）</h3><ul><li><p>set / get / del / append / strlen</p></li><li><p>incr / decr / incrby / decrby，一定一要是数字才能进行加减（前面两个是递增或者递减，后面两个带值加减）</p></li><li><p>getrange / setrange</p><p>getrange：获取指定区间内的值，类似于 between …… and 的关系</p><p>setrange：设置指定区间内的值，格式是：setrange key值 具体值</p></li><li><p>setex（set with expire）键 秒 值 / setnx（set if not exist）</p></li><li><p>mset / mget / msetnx 批量设置 key-value</p></li><li><p>getset（先 get 再 set）</p></li></ul><h3 id="Redis-列表（List）"><a href="#Redis-列表（List）" class="headerlink" title="Redis 列表（List）"></a>Redis 列表（List）</h3><ul><li>lpush / rpush / lrange</li><li>lpop / rpop</li><li>lindex，按照索引下标获得元素（从上到下）</li><li>lrem list名 N value（从 list 中删除 N 个值为 value 的元素）</li><li>ltrim list名 index index（截取指定范围的值后再赋给 key）</li><li>rpoplpush 源列表 目的列表</li><li>linsert list名 before / after 值1 值2（在 list 中的值1前/后插入值2）</li></ul><h3 id="Redis-集合（Set）"><a href="#Redis-集合（Set）" class="headerlink" title="Redis 集合（Set）"></a>Redis 集合（Set）</h3><ul><li>sadd / smembers / sismember</li><li>scard（获取集合里面的元素个数）</li><li>srem key value （删除集合中元素）</li><li>srandmember key 某个整数（随机出几个数）</li><li>spop key （随机出栈）</li><li>smove key1 key2 在 key1 里的某个值（作用是将 key1 里的某个值赋给 key2）</li><li>数学集合类<ul><li>差集：sdiff</li><li>交集：sinter</li><li>并集：sunion</li></ul></li></ul><h3 id="Redis-哈希（Hash）"><a href="#Redis-哈希（Hash）" class="headerlink" title="Redis 哈希（Hash）"></a>Redis 哈希（Hash）</h3><p><strong>KV 模式不变，但是 V 是一个键值对</strong></p><ul><li>hset / hget / hmset / hmget / hgetall / hdel</li><li>hlen</li><li>hexist key（在 key 里面的某个值的 key）</li><li>hkeys / hvals</li><li>hincrby / hincrbyfloat</li><li>hsetnx</li></ul><h3 id="Redis-有序集合（Zset-——-sorted-set）"><a href="#Redis-有序集合（Zset-——-sorted-set）" class="headerlink" title="Redis 有序集合（Zset —— sorted set）"></a>Redis 有序集合（Zset —— sorted set）</h3><ul><li>zadd / zrange（zrange 最后可以带一个 withscores 顺便输出 key 值）</li><li>zrangebyscore key 开始score 结束score<ul><li>withscores</li><li>( 不包含</li><li>Limit i num 作用是返回限制（从 i 开始截取 num 个）</li></ul></li><li>zrem key 某个 score 下对应的 value 值（作用是删除元素）</li><li>zcard / zcount / key score区间 / zrank key values值（作用是获得下标值 / zscore key 对应值，获得分数）</li><li>zrevrank key values值（作用是逆序获得下标值）</li><li>zrevrange</li><li>zrevrangebyscore key 结束score 开始score</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/02/Redis学习笔记（Day02）/john-hoang-1553942-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/sf7TIaIwbjs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;John Hoang&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记（Day01）</title>
    <link href="https://www.chentyit.com/2019/05/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day01%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/01/Redis学习笔记（Day01）/</id>
    <published>2019-05-01T01:29:12.000Z</published>
    <updated>2019-05-19T01:12:30.572Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/01/Redis学习笔记（Day01）/kellen-riggin-1452245-unsplash.jpg" alt="插图"></p><blockquote><p>摄影：<a href="https://unsplash.com/photos/hlvtJ4JkVfc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Kellen Riggin</a>，来自<a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>NoSQL（NoSQL = Not Only SQL）泛指非关系型的数据库，这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展</p><h3 id="易扩展"><a href="#易扩展" class="headerlink" title="易扩展"></a>易扩展</h3><p>NoSQL 数据库种类繁多，共同德天是去掉关系数据库的关系型特性</p><p>数据之间无关系，非常容易扩展，在架构的层面带来了可扩展的能力</p><h3 id="大数据量高性能"><a href="#大数据量高性能" class="headerlink" title="大数据量高性能"></a>大数据量高性能</h3><p>具有非常高的读写性能，尤其是在大数据量下，同样表现优秀</p><h2 id="3V-3高"><a href="#3V-3高" class="headerlink" title="3V + 3高"></a>3V + 3高</h2><p>3V：</p><ul><li>海量 Volume</li><li>多样 Variety</li><li>实时 Velocity</li></ul><p>3高：</p><ul><li>高并发</li><li>高可扩</li><li>高性能</li></ul><h2 id="NoSQL-数据模型"><a href="#NoSQL-数据模型" class="headerlink" title="NoSQL 数据模型"></a>NoSQL 数据模型</h2><h3 id="聚合模型"><a href="#聚合模型" class="headerlink" title="聚合模型"></a>聚合模型</h3><ul><li>KV 键值对</li><li>BSON</li><li>列族</li><li>图形</li></ul><h2 id="NoSQL-数据库的四大分类"><a href="#NoSQL-数据库的四大分类" class="headerlink" title="NoSQL 数据库的四大分类"></a>NoSQL 数据库的四大分类</h2><p><strong>KV 键值</strong>：</p><ul><li>新浪</li><li>美团</li><li>阿里</li><li>百度</li></ul><p><strong>文档型数据库（BSON格式较多）</strong>：</p><ul><li>CouchDB</li><li>MongoDB：是一个基于分布式存储的数据库，由 C++ 语言编写，结余关系数据库和非关系数据库之间的产品</li></ul><p><strong>列存储数据库</strong>：</p><ul><li>Cassandra</li><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><p>不是放图形的，放的是关系，比如：朋友圈社交网络、广告推荐系统，社交网络、推荐系统等，专注于构建关系图谱</p><ul><li>Neo4j</li><li>InfoGrid</li></ul><p><strong>四者对比</strong></p><table><thead><tr><th>分类</th><th>Example 举例</th><th>典型应用场景</th><th>数据模型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>键值（key - value）</td><td>Tokyo，Cabinet/Tyrant，Redis，Voldemort，Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等</td><td>Key 指向 Value的键值对，通常用 hash table 来实现</td><td>查找熟读快</td><td>数据无机构化，通常只被当做字符串或者二进制数据</td></tr><tr><td>列存储数据库</td><td>Cassandra，HBase，Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对有限</td></tr><tr><td>文档型数据库</td><td>CouchDB，MongoDB</td><td>Web 应用（与 key - value 类似，value 是结构化的，不同的是数据库能够了解 value 的内容</td><td>key - value对应的键值对，value 为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法</td></tr><tr><td>图形（Graph）数据库</td><td>Noe4J，InfoGrid，Infinite Graph</td><td>社交网络，推荐系统，专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法，比如最短路径寻址，N 度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td></tr></tbody></table><h2 id="分布式数据库中-CAP-原理-CAP-BASE"><a href="#分布式数据库中-CAP-原理-CAP-BASE" class="headerlink" title="分布式数据库中 CAP 原理 CAP + BASE"></a>分布式数据库中 CAP 原理 CAP + BASE</h2><h3 id="传统的ACID"><a href="#传统的ACID" class="headerlink" title="传统的ACID"></a>传统的ACID</h3><ul><li>A（Atomicity）原子性</li><li>C（Consistency）一致性</li><li>I（Isolation）独立性</li><li>D（Durability）持久性</li></ul><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><ul><li>C（Consistency）强一致性</li><li>A（Availability）可用性</li><li>P（Partition tolerance）分区容错性</li></ul><p>CAP 理论的核心：一个分布式系统不可能同时很好满足一致性，可用性和分区容错性这三个需求，<strong>最多只能同时<em>较好的</em>满足两个</strong></p><p>根据 CAP 原理将 NoSQL 数据库分成了 满足 CA 原则，满足 CP 原则和满足 AP 原则三大类：</p><ul><li>CA – 单点集群：满足一致性，可用性的系统，通常在可扩展性上不太强大；（Oracle）</li><li>CP – 满足一致性，分区容错性的系统，通常性能不是特别高；（Redis，MongoDB）</li><li>AP – 满足可用性，分区容错性的系统，通常可能对一致性要求低一些（大多数网站架构选择）</li></ul><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>是为了结局关系数据库强一致性引起的问题而引起的可用性降低突出的解决方案</p><ul><li>BA（Basically Available）基本可用</li><li>S（Soft state）软状态</li><li>E（Eventually consistent）最终一致</li></ul><p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/01/Redis学习笔记（Day01）/kellen-riggin-1452245-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄影：&lt;a href=&quot;https://unsplash.com/photos/hlvtJ4JkVfc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kellen Riggin&lt;/a&gt;，来自&lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.chentyit.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://www.chentyit.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day04）</title>
    <link href="https://www.chentyit.com/2019/04/28/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day04%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/04/28/SpringBoot学习笔记（Day04）/</id>
    <published>2019-04-28T00:47:28.000Z</published>
    <updated>2019-05-01T01:28:14.202Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/28/SpringBoot学习笔记（Day04）/asoggetti-1486419-unsplash.jpg" alt="插图"></p><blockquote><p>摄影：<a href="https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">asoggetti</a>，来自<a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Spring-声明式事务的使用"><a href="#Spring-声明式事务的使用" class="headerlink" title="Spring 声明式事务的使用"></a>Spring 声明式事务的使用</h2><h3 id="Transactional-配置项"><a href="#Transactional-配置项" class="headerlink" title="@Transactional 配置项"></a>@Transactional 配置项</h3><p><strong>@Transactional 源码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Inherited</span><br><span class="line">@Documented</span><br><span class="line">public @interface Transactional &#123;</span><br><span class="line"></span><br><span class="line">    // 通过 bean name 指定事务管理器</span><br><span class="line">    @AliasFor(&quot;transactionManager&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    // 同 value 属性</span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String transactionManager() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    // 指定传播行为</span><br><span class="line">    Propagation propagation() default Propagation.REQUIRED;</span><br><span class="line"></span><br><span class="line">    // 指定隔离级别</span><br><span class="line">    Isolation isolation() default Isolation.DEFAULT;</span><br><span class="line"></span><br><span class="line">    // 指定超时时间</span><br><span class="line">    int timeout() default -1;</span><br><span class="line"></span><br><span class="line">    // 是否只读事务</span><br><span class="line">    boolean readOnly() default false;</span><br><span class="line"></span><br><span class="line">    // 方法在发生指定异常时回滚，默认是所有异常都回滚</span><br><span class="line">    Class&lt;? extends Throwable&gt;[] rollbackFor() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 方法在发生指定异常名称时回滚，默认是所有异常都回滚</span><br><span class="line">    String[] rollbackForClassName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 方法在发生指定异常时不回滚，默认是所有异常都回滚</span><br><span class="line">    Class&lt;? extends Throwable&gt;[] noRollbackFor() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 方法在发生指定异常名称时不回滚，默认是所有异常都回滚</span><br><span class="line">    String[] noRollbackForClassName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>value，transactionManager</strong> 属性是配置一个 Spring 的事务管理器；<br><strong>timeout</strong> 是事务可以允许存在的时间戳，单位为秒；<br><strong>readOnly</strong> 属性定义的是事务是否是只读事务；<br><strong>propagation</strong> 指的是传播行为；<br><strong>isolation</strong> 是隔离级别；</p><p>关于 @Transactional：<br>它可以放在接口上，也可以放在实现类上，推荐放在实现类上</p><h2 id="Spring-事务管理器"><a href="#Spring-事务管理器" class="headerlink" title="Spring 事务管理器"></a>Spring 事务管理器</h2><p><strong>PlatformTransactionManager 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事务，他还会设置数据属性</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(@Nullable TransactionDefinition var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getTransaction</strong> 方法的参数是一个事务定义器，依赖于配置的 @Transactional 的配置项生成的，提交和回滚事务也就可以通过 <strong>commit</strong> 和 <strong>rollback</strong> 方法执行</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="数据库事务的知识"><a href="#数据库事务的知识" class="headerlink" title="数据库事务的知识"></a>数据库事务的知识</h3><p>数据库事务具有以下4个基本特征（ACID）：  </p><ul><li>Atomoc（原子性）：事务中包含的操作被看作一个整体单元，这个业务单元中的操作要么全部成功，要么全部失败；</li><li>Consistency（一致性）：事务在完成时，必须使所有的数据都保持一直状态，在数据库中所有的修改都基于事务，保证了数据的完整性；</li><li>Isolation（隔离性）：为了压制丢失更新的产生，数据库定义了隔离级别的概念，可以在不同上程度压制丢失更新的发生；</li><li>Durability（持久性）：事务结束后，所有的数据会固化到一个地方，入保存到磁盘中，即使断电重启后也可以提供应用程序访问；</li></ul><h3 id="详解隔离级别"><a href="#详解隔离级别" class="headerlink" title="详解隔离级别"></a>详解隔离级别</h3><ul><li>未提交读（run uncommitted）：是最低的隔离级别，允许一个事务读取另一个事务没有提交的数据（比较危险，会出现脏读）</li><li>读写提交（read committed）：指一个事务只能读取另外一个事务已经提交的数据，不能读取未提交的数据</li><li>可重复读：克服读写提交中出现的不可重读的现象</li><li>串行化（Serializable）：是数据库最高的隔离级别，他会要求所有的 SQL，都会按照顺序执行，可以克服上述隔离级别出现的各种问题，能够保证数据的一致性</li></ul><p>在 Spring Boot 配置文件 application.properties 中配置隔离级别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 隔离级别数字配置的含义</span><br><span class="line"># -1    数据库默认隔离级别</span><br><span class="line"># 1     未提交读</span><br><span class="line"># 2     读写提交</span><br><span class="line"># 4     可重复读</span><br><span class="line"># 8     串行化</span><br><span class="line"># tomcat    数据源默认隔离级别</span><br><span class="line">spring.datasource.tomcat.default-transaction-isolation=2</span><br><span class="line"># dbcp2 数据库连接池默认隔离级别</span><br><span class="line"># spring.datasource.dbcp2.default-transaction-isolation=2</span><br></pre></td></tr></table></figure></p><h2 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h2><h3 id="传播行为的定义"><a href="#传播行为的定义" class="headerlink" title="传播行为的定义"></a>传播行为的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Propagation &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要事务，它是默认传播行为，如果当前存在事务，就沿用当前事务</span></span><br><span class="line"><span class="comment">     * 否则新建一个事务运行子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持事务，如果当前存在事务，就沿用当前事务</span></span><br><span class="line"><span class="comment">     * 如果不存在，则继续采用无事务的方式运行子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须使用事务，如果当前没有事务，则会抛出异常</span></span><br><span class="line"><span class="comment">     * 如果存在当前事务，就沿用当前事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无论当前事务是否存在，都会创建新事务运行方法</span></span><br><span class="line"><span class="comment">     * 这样新事物就可以拥有新的锁和隔离级别等特性，与当前事务相互独立</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持事务，当前存在事务时，将挂起事务，运行方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持事务，当前存在事务时，将挂起事务，运行方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在当前方法调用子方法时，如果子方法发生异常</span></span><br><span class="line"><span class="comment">     * 只回滚子方法执行过的 SQL，而不回滚当前方法的事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">    </span><br><span class="line">    Propagation(<span class="keyword">int</span> value) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/04/28/SpringBoot学习笔记（Day04）/asoggetti-1486419-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄影：&lt;a href=&quot;https://unsplash.com/photos/VJTmFSendQ0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;asoggetti&lt;/a&gt;，来自&lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
