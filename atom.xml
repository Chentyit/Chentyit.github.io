<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翼叶知秋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chentyit.com/"/>
  <updated>2019-09-08T11:18:46.630Z</updated>
  <id>https://www.chentyit.com/</id>
  
  <author>
    <name>Chen Tianyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy(一)</title>
    <link href="https://www.chentyit.com/2019/09/08/Scrapy-%E4%B8%80/"/>
    <id>https://www.chentyit.com/2019/09/08/Scrapy-一/</id>
    <published>2019-09-08T11:17:22.000Z</published>
    <updated>2019-09-08T11:18:46.630Z</updated>
    
    <content type="html"><![CDATA[<ul><li>介绍</li><li>使用</li><li>pipline</li><li>logging</li></ul><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Scrapy 是一个未来爬取网站数据，提取结构性数据而编写的应用框架</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject mySpider</span><br></pre></td></tr></table></figure><h3 id="创建爬取模块"><a href="#创建爬取模块" class="headerlink" title="创建爬取模块"></a>创建爬取模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider itcast "itcast.cn"</span><br></pre></td></tr></table></figure><h3 id="启动开始爬取"><a href="#启动开始爬取" class="headerlink" title="启动开始爬取"></a>启动开始爬取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl itcast</span><br></pre></td></tr></table></figure><p><strong>代码块：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    <span class="comment"># 爬虫名</span></span><br><span class="line">    name = <span class="string">'itcast'</span></span><br><span class="line">    <span class="comment"># 允许爬取的范围</span></span><br><span class="line">    allowed_domains = [<span class="string">'itcast.cn'</span>]</span><br><span class="line">    <span class="comment"># 最开始请求的 url 地址</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.itcast.cn/channel/teacher.shtml'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 处理 start_urls 地址对应的响应</span></span><br><span class="line">        <span class="comment"># ret1 = response.xpath("//div[@class='tea_con']//h3/text()").extract()</span></span><br><span class="line">        <span class="comment"># print(ret1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分组</span></span><br><span class="line">        li_list = response.xpath(<span class="string">"//div[@class='tea_con']//li"</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            item[<span class="string">"name"</span>] = li.xpath(<span class="string">".//h3/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">"title"</span>] = li.xpath(<span class="string">".//h4/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            print(item)</span><br></pre></td></tr></table></figure><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>pipeline 中保存数据</p><h2 id="pipline"><a href="#pipline" class="headerlink" title="pipline"></a>pipline</h2><p>pipline 可以有多个，原因：</p><ol><li>可能会有多个 Spider，不同的 pipline 处理不同的 item 的内容</li><li>一个 spider 的内容可能要做不同的操作，比如存入不同的数据库中</li></ol><p>注意：</p><ol><li>pipline 的权重越小，优先级越高</li><li>pipline 中 process_item 方法名不能修改为其他的名称</li></ol><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><h3 id="Scrapy-项目中使用"><a href="#Scrapy-项目中使用" class="headerlink" title="Scrapy 项目中使用"></a>Scrapy 项目中使用</h3><p><strong>在 setting.py 里面设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置日志级别</span><br><span class="line">LOG_LEVEL = &quot;WARNING&quot;</span><br><span class="line"></span><br><span class="line"># 设置日志保存路径</span><br><span class="line">LOG_FILE = &quot;./log.log&quot;</span><br></pre></td></tr></table></figure><p><strong>在代码中调用：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment"># 先调用 logging 模块</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 python 文件名加载到 logging 中</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'itcast'</span></span><br><span class="line">    allowed_domains = [<span class="string">'itcast.cn'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.itcast.cn/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            item[<span class="string">"come_from"</span>] = <span class="string">"itcast"</span></span><br><span class="line">            <span class="comment"># 将信息按照等级打印出来</span></span><br><span class="line">            logger.warning(item)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="在一般项目用使用"><a href="#在一般项目用使用" class="headerlink" title="在一般项目用使用"></a>在一般项目用使用</h3><p><strong><em>单独测试 logging 模块</em>：</strong></p><p><strong>log_a.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的输出样式</span></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    format=<span class="string">'%(levelname)s [%(filename)s] '</span></span><br><span class="line">                           <span class="string">'[%(lineno)d] : %(message)s'</span></span><br><span class="line">                           <span class="string">' - %(asctime)s'</span>, datefmt=<span class="string">'[%d/%b/%Y %H:%M:%S]'</span>)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logger.info(<span class="string">"this is a info log"</span>)</span><br><span class="line">    logger.info(<span class="string">"this is a info log 1"</span>)</span><br></pre></td></tr></table></figure><p>在 log_b.py 中调用 log_a.py 中的 logging</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> log_a <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logger.warning(<span class="string">"this is log_b 1"</span>)</span><br><span class="line">    logger.warning(<span class="string">"this is log_b 2"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;li&gt;pipline&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.chentyit.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://www.chentyit.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>HBase 安装</title>
    <link href="https://www.chentyit.com/2019/09/01/HBase-%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/09/01/HBase-安装/</id>
    <published>2019-09-01T03:45:26.000Z</published>
    <updated>2019-09-02T00:55:36.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-HBase-的安装包"><a href="#下载-HBase-的安装包" class="headerlink" title="下载 HBase 的安装包"></a>下载 HBase 的安装包</h2><p>下载的是 2.0.6 版本</p><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf hdfs-*** -C /usr/local</span><br></pre></td></tr></table></figure><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export HBASE_HOME="/usr/local/hbase-2.0.6"</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;HBASE_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="修改-conf-下的-hbase-env-sh"><a href="#修改-conf-下的-hbase-env-sh" class="headerlink" title="修改 /conf 下的 hbase-env.sh"></a>修改 /conf 下的 hbase-env.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk8</span><br><span class="line"><span class="meta">#</span> 使用自己的 Zookeeper 不使用 HBase 自带的 ZK</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure><h3 id="修改-conf-下的-hbase-site-xml"><a href="#修改-conf-下的-hbase-site-xml" class="headerlink" title="修改 /conf 下的 hbase-site.xml"></a>修改 /conf 下的 hbase-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不设置这个也可以，但是要在下面写上端口号，设置了也不会发生冲突 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata1:2181,bigdata2:2181,bigdata3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以不配置，如果要配置，需要和zookeeper配置文件zoo.cfg中的dataDir指定的路径相同 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/zookeeper/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置 HDFS 的命名空间  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：这里要和 hadoop 里面的 core-site.xml 里面配置的 HDFS 命名空间名称相同  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置为分布式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="把-hadoop-的配置文件-core-site-xml-和-hdfs-site-xml-复制到-hbase-的配置文件目录下"><a href="#把-hadoop-的配置文件-core-site-xml-和-hdfs-site-xml-复制到-hbase-的配置文件目录下" class="headerlink" title="把 hadoop 的配置文件 core-site.xml 和 hdfs-site.xml 复制到 hbase 的配置文件目录下"></a>把 hadoop 的配置文件 core-site.xml 和 hdfs-site.xml 复制到 hbase 的配置文件目录下</h3><p>网上大多数教程都没有这一步，但是加上也没有报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp hadoop-2.8.4/etc/hadoop/core-site.xml hbase-2.0.6/conf/</span><br><span class="line">cp hadoop-2.8.4/etc/hadoop/hdfs-site.xml hbase-2.0.6/conf/</span><br></pre></td></tr></table></figure><h3 id="修改-regionservers-文件"><a href="#修改-regionservers-文件" class="headerlink" title="修改 regionservers 文件"></a>修改 regionservers 文件</h3><p>在 regionservers 文件中添加节点（先把里面的 localhost 删掉）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim regionservers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加如下内容（按自己要求修改）</span><br><span class="line">bigdata1</span><br><span class="line">bigdata2</span><br><span class="line">bigdata3</span><br></pre></td></tr></table></figure><h3 id="添加并修改-backup-masters文件"><a href="#添加并修改-backup-masters文件" class="headerlink" title="添加并修改 backup-masters文件"></a>添加并修改 backup-masters文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim backup-masters</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加如下内容（按自己要求修改）</span><br><span class="line"><span class="meta">#</span> 这个是备用的 master 节点（防止当前 master 嗝屁后 HBase 集群也跟着嗝屁）</span><br><span class="line">bigdata6</span><br></pre></td></tr></table></figure><h2 id="将-HBase-文件全部分发到集群的其他节点"><a href="#将-HBase-文件全部分发到集群的其他节点" class="headerlink" title="将 HBase 文件全部分发到集群的其他节点"></a>将 HBase 文件全部分发到集群的其他节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /etc/local/hbase-*** hostname:/etc/local</span><br></pre></td></tr></table></figure><h2 id="同步时间（特别注意！！！）"><a href="#同步时间（特别注意！！！）" class="headerlink" title="同步时间（特别注意！！！）"></a>同步时间（<em>特别注意！！！</em>）</h2><p><strong>如果不同步时间，将无法启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 没有的话就用 yum 安装后再同步</span><br><span class="line">ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><h2 id="启动-Zookeeper-amp-HDFS-amp-YARN"><a href="#启动-Zookeeper-amp-HDFS-amp-YARN" class="headerlink" title="启动 Zookeeper &amp; HDFS &amp; YARN"></a>启动 Zookeeper &amp; HDFS &amp; YARN</h2><p>启动后检查一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><h2 id="启动-HBase"><a href="#启动-HBase" class="headerlink" title="启动 HBase"></a>启动 HBase</h2><p>(在集群的哪台机器启动，哪台就是当前的 Master)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure><h2 id="观察启动状态"><a href="#观察启动状态" class="headerlink" title="观察启动状态"></a>观察启动状态</h2><p>在浏览器输入 <a href="http://hostname:16010" target="_blank" rel="noopener">http://hostname:16010</a> 可以按到 HBase 的节点状态（hostname 是启动 Hbase 的那台机器名）</p><p><img src="/2019/09/01/HBase-安装/hbase_web.png" alt="hbase_web"></p><p>在命令行输入 jps 查看进程（HRegionServer 和 HMaster 是否启动）</p><p><img src="/2019/09/01/HBase-安装/hbase_jps.png" alt="hbase_jps"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载-HBase-的安装包&quot;&gt;&lt;a href=&quot;#下载-HBase-的安装包&quot; class=&quot;headerlink&quot; title=&quot;下载 HBase 的安装包&quot;&gt;&lt;/a&gt;下载 HBase 的安装包&lt;/h2&gt;&lt;p&gt;下载的是 2.0.6 版本&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="HBase" scheme="https://www.chentyit.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Flume 跨服务器拉取日志</title>
    <link href="https://www.chentyit.com/2019/08/25/Flume-%E8%B7%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%89%E5%8F%96%E6%97%A5%E5%BF%97/"/>
    <id>https://www.chentyit.com/2019/08/25/Flume-跨服务器拉取日志/</id>
    <published>2019-08-25T07:07:24.000Z</published>
    <updated>2019-08-25T07:09:14.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flume-跨服务器拉取日志"><a href="#Flume-跨服务器拉取日志" class="headerlink" title="Flume 跨服务器拉取日志"></a>Flume 跨服务器拉取日志</h2><h3 id="思路介绍"><a href="#思路介绍" class="headerlink" title="思路介绍"></a>思路介绍</h3><ol><li>在实际开发中，网站应该不会运行装有 Hadoop 以及相关服务的集群上，所以需要一台新的服务器来运行网站的环境以免发生环境冲突或者端口占用的错误</li><li>分服务器的 Nginx 生成日志文件 access.log（存放到任何目录）</li><li>分服务器的 Flume 监听 access.log 文件的变化，并将 access.log 文件里面的信息拉取下沉到汇总服务器</li><li>汇总服务器获取到分服务器下沉的日志信息，然后再一步下沉到 HDFS 中</li><li>如果以上思路成立就存在 Flume 汇总服务器以及 Flume 分服务器（我自己命名的），汇总服务器接收分服务器下沉过来的数据，然后再下沉到 HDFS 中，最后在用 MR + HIVE + Sqoop + MySQL 完成工作流</li></ol><h3 id="分服务器的-Flume-配置文件"><a href="#分服务器的-Flume-配置文件" class="headerlink" title="分服务器的 Flume 配置文件"></a>分服务器的 Flume 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /usr/local/flume-1.8.0/bigdata8/taildir_position.json</span><br><span class="line">a1.sources.r1.command =tail -f /test/log.txt</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /root/web/access.log</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = 192.168.11.37</span><br><span class="line">a1.sinks.k1.port =44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>bind sources and sink to channel </span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="汇总服务器的-Flume-配置文件"><a href="#汇总服务器的-Flume-配置文件" class="headerlink" title="汇总服务器的 Flume 配置文件"></a>汇总服务器的 Flume 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a2.sources = r2</span><br><span class="line">a2.channels = c2</span><br><span class="line">a2.sinks = k2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = 0.0.0.0</span><br><span class="line">a2.sources.r2.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 10000</span><br><span class="line">a2.channels.c2.byteCapacityBufferPercentage = 20</span><br><span class="line">a2.channels.c2.byteCapacity = 800000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>define sink</span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.channel = c1</span><br><span class="line">a2.sinks.k2.hdfs.path = /weblog/flume/events/%y-%m-%d/%H%M%S</span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = events-</span><br><span class="line"><span class="meta">#</span>一定要加上</span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line">a2.sinks.k2.hdfs.round = true</span><br><span class="line">a2.sinks.k2.hdfs.roundValue = 10</span><br><span class="line">a2.sinks.k2.hdfs.roundUnit = minute</span><br><span class="line"><span class="meta">#</span>生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br><span class="line">a2.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>bind sources and sink to channel </span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在分服务器中将下沉（sink）的 type 设置为 avro，并设置下沉的目标服务器的 IP 地址</p><p>在汇总服务器中将源（source）的 type 设置成为 arvo</p><p>启动的时候<strong>先启动汇总服务器再启动分服务器</strong></p><p>这里注意：<strong>不要在 a2.sources.r2.bind 后面写 localhost 要直接写符合 IPv4 格式的 IP 地址</strong>，我试过很多次就是这里出了问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flume-跨服务器拉取日志&quot;&gt;&lt;a href=&quot;#Flume-跨服务器拉取日志&quot; class=&quot;headerlink&quot; title=&quot;Flume 跨服务器拉取日志&quot;&gt;&lt;/a&gt;Flume 跨服务器拉取日志&lt;/h2&gt;&lt;h3 id=&quot;思路介绍&quot;&gt;&lt;a href=&quot;#思
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="Flume" scheme="https://www.chentyit.com/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Hive(一)</title>
    <link href="https://www.chentyit.com/2019/08/20/Hive-%E4%B8%80/"/>
    <id>https://www.chentyit.com/2019/08/20/Hive-一/</id>
    <published>2019-08-19T16:09:08.000Z</published>
    <updated>2019-08-21T02:45:38.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p><strong>Hive 数据仓库</strong>：用于存储数据，都是历史数据，不可变的数据，不能改，不能删，对于 hive 而言，增加的是文件</p><p><strong>关系型数据库</strong>：用于存储数据，注重业务逻辑，可以进行增删改查</p><p>hive 保存了元数据信息，是一个元数据管理工具，是一个驱动，hive 解析 sql 语句，将其翻译成为 MR 的运算程序，同时保存了与元数据信息</p><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="1-JDK-安装"><a href="#1-JDK-安装" class="headerlink" title="1. JDK 安装"></a>1. JDK 安装</h2><h2 id="2-Hadoop-安装"><a href="#2-Hadoop-安装" class="headerlink" title="2. Hadoop 安装"></a>2. Hadoop 安装</h2><h2 id="3-MySQL-安装"><a href="#3-MySQL-安装" class="headerlink" title="3. MySQL 安装"></a>3. MySQL 安装</h2><h2 id="4-开始安装-Hive"><a href="#4-开始安装-Hive" class="headerlink" title="4. 开始安装 Hive"></a>4. 开始安装 Hive</h2><ul><li><p>解压到 /usr/local</p></li><li><p>配置环境变量到 /etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME="/usr/local/hive1.2.2"</span><br></pre></td></tr></table></figure></li><li><p>配置元数据库信息</p><p>在 hive*/conf/ 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure><p>在 hive-site.xml 中添加以下文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://bigdata7:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Chentyit123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:java.io.tmpdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive1.2.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将 MySQL 的连接 jar 包拷贝到 $HIVE_HOME/lib 目录下</strong></p><p>这里如果数据库是 5.5 以上版本的 MySQL，选择版本高一点的 5.1.*.jar 连接包，如果是 8.0.0 的就直接使用 8 的连接包</p></li><li><p><strong>拷贝 hive 的 lib 目录中 jline.2.12.jar 的 jar 包替换掉 hadoop 中的包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/yarn/lib/jline-0.9.94.jar</span><br></pre></td></tr></table></figure></li><li><p>启动 Hive</p><ol><li><p>直接使用 hive 命令</p></li><li><p>先打开服务端，再打开客户端连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive --service hiveserver2&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">beeline -u jdbc:hive2://主机名:10000 -n root</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="Hive-命令"><a href="#Hive-命令" class="headerlink" title="Hive 命令"></a>Hive 命令</h1><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'chenty.*'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看某一个数据库的详细信息"><a href="#查看某一个数据库的详细信息" class="headerlink" title="查看某一个数据库的详细信息"></a>查看某一个数据库的详细信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> <span class="keyword">database</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="删除非空数据库"><a href="#删除非空数据库" class="headerlink" title="删除非空数据库"></a>删除非空数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> chentyit <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库时，指定数据库位置（这个位置是在-hdfs-上的）"><a href="#创建数据库时，指定数据库位置（这个位置是在-hdfs-上的）" class="headerlink" title="创建数据库时，指定数据库位置（这个位置是在 hdfs 上的）"></a>创建数据库时，指定数据库位置（这个位置是在 hdfs 上的）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_p location <span class="string">'/home/database/'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/chentyit_p.png" alt="chentyit_p"></p><h3 id="创建数据库的时候希望能够给数据库增加一些描述性东西"><a href="#创建数据库的时候希望能够给数据库增加一些描述性东西" class="headerlink" title="创建数据库的时候希望能够给数据库增加一些描述性东西"></a>创建数据库的时候希望能够给数据库增加一些描述性东西</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_c <span class="keyword">comment</span> <span class="string">'my database'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/chentyit_c.png" alt="chentyit_c"></p><h3 id="创建数据库的时候，需要为数据库增加属性信息，可以使用-with-dbproperties-信息"><a href="#创建数据库的时候，需要为数据库增加属性信息，可以使用-with-dbproperties-信息" class="headerlink" title="创建数据库的时候，需要为数据库增加属性信息，可以使用 with dbproperties 信息"></a>创建数据库的时候，需要为数据库增加属性信息，可以使用 with dbproperties 信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> chentyit_d <span class="keyword">with</span> dbproperties(<span class="string">'createor'</span>=<span class="string">'chenty'</span>,<span class="string">'date'</span>=<span class="string">'2019-08-19'</span>);</span><br></pre></td></tr></table></figure><h3 id="修改数据库的属性信息"><a href="#修改数据库的属性信息" class="headerlink" title="修改数据库的属性信息"></a>修改数据库的属性信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> chentyit_d <span class="keyword">set</span> dbproperties(<span class="string">'edited-by'</span>=<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h3 id="如果要使用自己已经存在的数据库"><a href="#如果要使用自己已经存在的数据库" class="headerlink" title="如果要使用自己已经存在的数据库"></a>如果要使用自己已经存在的数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chentyit;</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库下的所有表"><a href="#查看当前数据库下的所有表" class="headerlink" title="查看当前数据库下的所有表"></a>查看当前数据库下的所有表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h3 id="创建表（默认是内部表）"><a href="#创建表（默认是内部表）" class="headerlink" title="创建表（默认是内部表）"></a>创建表（默认是内部表）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><h3 id="创建一个表，该表和已有的某一个表的结构一样（复制表结构）"><a href="#创建一个表，该表和已有的某一个表的结构一样（复制表结构）" class="headerlink" title="创建一个表，该表和已有的某一个表的结构一样（复制表结构）"></a>创建一个表，该表和已有的某一个表的结构一样（复制表结构）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> emp <span class="keyword">like</span> emp1;</span><br></pre></td></tr></table></figure><h3 id="删除一个已经存在的表"><a href="#删除一个已经存在的表" class="headerlink" title="删除一个已经存在的表"></a>删除一个已经存在的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp1;</span><br></pre></td></tr></table></figure><h3 id="修改一个表明，重命名"><a href="#修改一个表明，重命名" class="headerlink" title="修改一个表明，重命名"></a>修改一个表明，重命名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">rename</span> <span class="keyword">to</span> emp_info;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/rename_table.png" alt="rename_table"></p><h3 id="将hdfs上面的文件信息导入到hive表中"><a href="#将hdfs上面的文件信息导入到hive表中" class="headerlink" title="将hdfs上面的文件信息导入到hive表中"></a>将hdfs上面的文件信息导入到hive表中</h3><p>/home/bigdata 代表文件在在 HDFS 上位置</p><p>使用改命令时一定要注意数据与数据之间在 txt 文件编辑的时候一定要 Tab 间隔</p><p>导入后 HDFS 里面的数据没了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">'/home/database'</span> <span class="keyword">into</span> <span class="keyword">table</span> emp_info;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/load_from_hdfs.png" alt="load_from_hdfs"></p><h3 id="给某一个表增加某一列的信息"><a href="#给某一个表增加某一列的信息" class="headerlink" title="给某一个表增加某一列的信息"></a>给某一个表增加某一列的信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">add</span> <span class="keyword">columns</span>(job <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><h3 id="修改某一个表的某一列的信息"><a href="#修改某一个表的某一列的信息" class="headerlink" title="修改某一个表的某一列的信息"></a>修改某一个表的某一列的信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">change</span> <span class="keyword">column</span> job cjob <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'job_id'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/20/Hive-一/alter_column.png" alt="alter_column"></p><h3 id="替换表中的某一个列"><a href="#替换表中的某一个列" class="headerlink" title="替换表中的某一个列"></a>替换表中的某一个列</h3><p>这里注意，这里的 replace 不是替换一列，而是把<strong>所有列</strong>重新<strong>改写</strong>成<strong>括号里面的新列</strong></p><p>举个例子：原列是（a, b, c) 用下列命令后就变成了 （job, dept）而 a，b，c 三列不见了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">replace</span> <span class="keyword">columns</span>(job <span class="built_in">int</span>, dept <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure><h3 id="修改表中某一列的属性"><a href="#修改表中某一列的属性" class="headerlink" title="修改表中某一列的属性"></a>修改表中某一列的属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_name <span class="keyword">set</span> tblproperties(<span class="string">'value'</span>=<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h3 id="Hive-成批向某一表插入数据"><a href="#Hive-成批向某一表插入数据" class="headerlink" title="Hive 成批向某一表插入数据"></a>Hive 成批向某一表插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> emp_info_b <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br></pre></td></tr></table></figure><h3 id="将查询结果保留到一个新表中去"><a href="#将查询结果保留到一个新表中去" class="headerlink" title="将查询结果保留到一个新表中去"></a>将查询结果保留到一个新表中去</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_info_c <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info_b;</span><br></pre></td></tr></table></figure><h3 id="将查询结果保存到指定的文件目录（可以是本地，也可以-HDFS）"><a href="#将查询结果保存到指定的文件目录（可以是本地，也可以-HDFS）" class="headerlink" title="将查询结果保存到指定的文件目录（可以是本地，也可以 HDFS）"></a>将查询结果保存到指定的文件目录（可以是本地，也可以 HDFS）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/home/hadoop/test'</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">directory</span> <span class="string">'/aaa/bbb/'</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp_info;</span><br></pre></td></tr></table></figure><h3 id="两表内连"><a href="#两表内连" class="headerlink" title="两表内连"></a>两表内连</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_info a <span class="keyword">join</span> emp_info b <span class="keyword">on</span> a.id = b.id;</span><br></pre></td></tr></table></figure><h3 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h3><p><strong>普通表和分区表区别：有大量数据增加的需要建分区表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(<span class="keyword">id</span> <span class="built_in">INT</span>, age <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="keyword">STRING</span>)</span><br><span class="line">partitioned <span class="keyword">by</span>(p_date <span class="keyword">STRING</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p>分区表加载数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'本地文件路径'</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> stu <span class="keyword">partition</span> (pubdate=<span class="string">'2010-08-22'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建一个带桶的表"><a href="#创建一个带桶的表" class="headerlink" title="创建一个带桶的表"></a>创建一个带桶的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bucket_stu (<span class="keyword">id</span> <span class="built_in">int</span> ,age <span class="built_in">int</span> ,<span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (p_date <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="keyword">id</span>) sorted <span class="keyword">by</span>(<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">3</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p><strong>分桶前要设置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.enforce.bucketing = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>向桶中添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> bucket_stu <span class="keyword">partition</span>(p_date=<span class="string">'0817'</span>) <span class="keyword">select</span> <span class="keyword">id</span>,age,<span class="keyword">name</span> <span class="keyword">from</span> stu <span class="keyword">where</span> p_date=<span class="string">'0817'</span>;</span><br></pre></td></tr></table></figure><h3 id="数据块抽样（tablesample-函数）"><a href="#数据块抽样（tablesample-函数）" class="headerlink" title="数据块抽样（tablesample() 函数）"></a>数据块抽样（tablesample() 函数）</h3><ol><li><p>tablesample(n percent) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(<span class="number">10</span> <span class="keyword">percent</span>);</span><br></pre></td></tr></table></figure></li><li><p>tablesample(n M) 指定抽样数据的大小，单位为M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(n M);</span><br></pre></td></tr></table></figure></li><li><p>tablesample(n rows) —— 默认map的数量是2 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> xxx_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">tablesample</span>(n <span class="keyword">rows</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="分桶抽样"><a href="#分桶抽样" class="headerlink" title="分桶抽样"></a>分桶抽样</h3><p>hive 中分桶其实就是根据某一个字段 Hash 取模，放入指定数据的桶中，比如将表 table_1 按照 ID 分成 100 个桶，其算法是 hash(id) % 100，这样，hash(id) % 100 = 0 的数据被放到第一个桶中，hash(id) % 100 = 1 的记录被放到第二个桶中。创建分桶表的关键语句为：CLUSTER BY 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TABLESAMPLE (BUCKET x OUT OF y [ON colname])</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_01 <span class="keyword">tablesample</span>(<span class="keyword">bucket</span> <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">10</span> <span class="keyword">on</span> <span class="keyword">rand</span>());</span><br></pre></td></tr></table></figure><p>其中 x 是要抽样的桶编号，桶编号从 1 开始，colname 表示抽样的列，y 表示桶的数量。 </p><h3 id="随机抽样（rand-函数）"><a href="#随机抽样（rand-函数）" class="headerlink" title="随机抽样（rand() 函数）"></a>随机抽样（rand() 函数）</h3><ol><li><p>使用 rand() 函数进行随机抽样，limit 关键字限制抽样返回的数据，其中 rand 函数前的 distribute 和 sort 关键字可以保证数据在 mapper 和 reducer 阶段是随机分布的（Map的个数由自己设置的个数决定）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">col</span>=xxx <span class="keyword">distribute</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">sort</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 order 关键词 (hive 会把 map 的个数设置回 1）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">col</span>=xxx <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hive&quot;&gt;&lt;a href=&quot;#Hive&quot; class=&quot;headerlink&quot; title=&quot;Hive&quot;&gt;&lt;/a&gt;Hive&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Hive 数据仓库&lt;/strong&gt;：用于存储数据，都是历史数据，不可变的数据，不能改，不能删，对于 hiv
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://www.chentyit.com/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Flume安装</title>
    <link href="https://www.chentyit.com/2019/08/18/Flume%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/08/18/Flume安装/</id>
    <published>2019-08-18T02:27:07.000Z</published>
    <updated>2019-08-18T02:29:39.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><h2 id="下载-flume-安装包"><a href="#下载-flume-安装包" class="headerlink" title="下载 flume 安装包"></a>下载 flume 安装包</h2><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><p>修改 conf 下的 flume-env.sh.template 复制一份到 flume-env.sh 并修改文件中的 JAVA_HOME 为 jdk 的真实路径</p><p>复制一份 flume-conf.properties.template 到 flume-conf.properties</p><h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><p>自行创建文件夹存放自己编写的配置文件</p><h2 id="net-logger-conf（本机运行）"><a href="#net-logger-conf（本机运行）" class="headerlink" title="net-logger.conf（本机运行）"></a>net-logger.conf（本机运行）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> example.conf: A single-node Flume configuration</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>启动 flume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file bigdata1/net-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>–conf-file 指定自定义配置文件（这个是单机启动）</p><p><strong>安装 telnet</strong></p><p>连接 flume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 44444</span><br></pre></td></tr></table></figure><p>就可以直接发送消息了，如果 flume 日志有打印对应的消息就是连接成功了</p><h3 id="dir-hdfs-conf（抓取日志到-hdfs）"><a href="#dir-hdfs-conf（抓取日志到-hdfs）" class="headerlink" title="dir-hdfs.conf（抓取日志到 hdfs）"></a>dir-hdfs.conf（抓取日志到 hdfs）</h3><p>配置路径同上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line"><span class="meta">#</span>记录偏移量</span><br><span class="line">a1.sources.r1.positionFile = /usr/local/flume1.8.0/iweb/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line">a1.sources.r1.filegroups.f1 = /root/iweb/test_log1/access.log</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.filegroups.f2 = /root/iweb/test_log2/access.log</span><br><span class="line">a1.sources.r1.headers.f2.headerKey1 = value2</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line">a1.channels.c1.byteCapacityBufferPercentage = 20</span><br><span class="line">a1.channels.c1.byteCapacity = 800000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H%M%S</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = events-</span><br><span class="line"><span class="meta">#</span>一定要加上</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line"><span class="meta">#</span>生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br></pre></td></tr></table></figure><p>创建 f1 和 f2 路径（除了最后一个文件）</p><p>启动 flume</p><p>重启一台终端连接到该主机，并向 f1 和 f2 路径下的 access.log（这是配置文件里面指定的，也可以自定义）写入数据</p><p>再开一台终端连接到主机，查看主机的日志文件（也是在上面的配置文件中配置）</p><p>每次写入都有一个偏移量，指定下一次读取文件的偏移位置，同时可以在 hdfs 的 web 页面进行查看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-JDK&quot;&gt;&lt;a href=&quot;#安装-JDK&quot; class=&quot;headerlink&quot; title=&quot;安装 JDK&quot;&gt;&lt;/a&gt;安装 JDK&lt;/h2&gt;&lt;h2 id=&quot;下载-flume-安装包&quot;&gt;&lt;a href=&quot;#下载-flume-安装包&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="Flume" scheme="https://www.chentyit.com/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装</title>
    <link href="https://www.chentyit.com/2019/08/17/Nginx%E5%AE%89%E8%A3%85/"/>
    <id>https://www.chentyit.com/2019/08/17/Nginx安装/</id>
    <published>2019-08-17T02:06:13.000Z</published>
    <updated>2019-08-17T02:25:07.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装必要的-C-等插件"><a href="#安装必要的-C-等插件" class="headerlink" title="安装必要的 C++ 等插件"></a>安装必要的 C++ 等插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ automake autoconf libtool make</span><br></pre></td></tr></table></figure><h2 id="安装-PCRE"><a href="#安装-PCRE" class="headerlink" title="安装 PCRE"></a>安装 PCRE</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pcre2-10.33.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/pcre2-10.33/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.8.1.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/nginx-1.8.1/</span><br><span class="line">./configure --prefix=/usr/local/nginx/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span> 启动需要到 Nginx 的目录下</span><br><span class="line">sbin/nginx -c conf/nginx.conf</span><br><span class="line"><span class="meta">#</span> 查看是否启动成功（80 端口启动)</span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    # index  index.html index.htm;</span><br><span class="line">    proxy_pass http://chentyit.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新加载一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">具体配置方式见官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装必要的-C-等插件&quot;&gt;&lt;a href=&quot;#安装必要的-C-等插件&quot; class=&quot;headerlink&quot; title=&quot;安装必要的 C++ 等插件&quot;&gt;&lt;/a&gt;安装必要的 C++ 等插件&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="网络" scheme="https://www.chentyit.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Nginx" scheme="https://www.chentyit.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop常见错误集</title>
    <link href="https://www.chentyit.com/2019/08/13/Hadoop%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    <id>https://www.chentyit.com/2019/08/13/Hadoop常见错误集/</id>
    <published>2019-08-13T04:40:21.000Z</published>
    <updated>2019-08-13T16:28:18.850Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg" alt="插图"></p><blockquote><p>摄影：<a href="https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Garrett Patz</a>，来自<a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><a id="more"></a><h2 id="Hadoop集群从节点出现错误（Connection-refused）"><a href="#Hadoop集群从节点出现错误（Connection-refused）" class="headerlink" title="Hadoop集群从节点出现错误（Connection refused）"></a>Hadoop集群从节点出现错误（Connection refused）</h2><p><img src="/2019/08/13/Hadoop常见错误集/Hadoop集群从节点出现错误.png" alt="Hadoop集群从节点出现错误"></p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Hadoop 集群 yarn-site.xml 配置错误：</p><p>默认情况下 yarn ResourceManager 相关服务IP地址指向的是0.0.0.0。</p><p>而在服务器中，0.0.0.0 指的是本机网络地址，那么 NodeManager 就会在本机找 ResourceManager 相关服务，而 slave 节点上并没有这些服务，这些服务在 ResourceManager Master 节点上。所以针对 Hadoop 集群配置 yare-site.xml 某些配置项不能使用默认配置。</p><p>注意：hadoop 伪分布式可以使用默认配置，因为所有服务都在本地运行</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>修改<strong>所有节点上</strong>yare-site.xml配置文件，在该文件中配置ResourceManager Master节点所在地址即可解决问题。详细配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoopMaster:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MR本地提交集群运行"><a href="#MR本地提交集群运行" class="headerlink" title="MR本地提交集群运行"></a>MR本地提交集群运行</h2><p><img src="/2019/08/13/Hadoop常见错误集/MR本地提交集群运行错误.png" alt="MR本地提交集群运行错误"></p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>无法加载 core-site.xml 配置文件，没法找到 hdfs://ns 的路径，直接指定默认本地路径</p><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>Maven 打包时没有将 XML 文件打包，所以运行程序时无法加载到 core-site.xml 文件</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在 pom.xml 文件的 <code>&lt;build&gt;&lt;/build&gt;</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再重新打包运行即可</p><h2 id="Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer"><a href="#Unable-to-initialize-MapOutputCollector-org-apache-hadoop-mapred-MapTask-MapOutputBuffer" class="headerlink" title="Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer"></a>Unable to initialize MapOutputCollector org.apache.hadoop.mapred.MapTask$MapOutputBuffer</h2><p><img src="/2019/08/13/Hadoop常见错误集/NoSuchMethodException.png" alt="NoSuchMethodException"></p><p>这个问题我花了很久时间，代码改了三次才运行成功</p><p>最后发现是因为 Mapper 和 Reducer 的传入值有问题，总结下来就是 Mapper 和 Reducer 的入参和出参的类型<strong>必须要使用 Hadoop 封装的类型，或者按照 Hadoop 要求封装的类型</strong>（自行封装的类，除了要实现 WritableComparable 接口，而且自定义类还必须要有<strong>无参构造方法</strong>），Hadoop 已封装类型如下：</p><p><img src="/2019/08/13/Hadoop常见错误集/Mapper和Reducer参数.png" alt="Mapper和Reducer参数"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/08/13/Hadoop常见错误集/garrett-patz-1504925-unsplash.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄影：&lt;a href=&quot;https://unsplash.com/photos/Ilu1Vv6EYds?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Garrett Patz&lt;/a&gt;，来自&lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://www.chentyit.com/categories/Hadoop/"/>
    
    
      <category term="开发问题解决" scheme="https://www.chentyit.com/tags/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题274（H指数）</title>
    <link href="https://www.chentyit.com/2019/07/27/LeetCode%E5%88%B7%E9%A2%98274%EF%BC%88H%E6%8C%87%E6%95%B0%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/27/LeetCode刷题274（H指数）/</id>
    <published>2019-07-27T07:30:26.000Z</published>
    <updated>2019-07-27T07:56:39.131Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。</span><br><span class="line"></span><br><span class="line">h 指数的定义: “h 代表“高引用次数”（high citations）</span><br><span class="line">一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。</span><br><span class="line">（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/h-index</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入: citations = [3,0,6,1,5]<br>输出: 3<br>解释: 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。由于研究者有 3 篇论文每篇至少被引用了 3 次，其余两篇论文每篇被引用不多于 3 次，所以她的 h 指数是 3。</p></blockquote><p><strong>思路（借鉴官网的题解）：</strong></p><ol><li><p>h 值意味着一个标准，将数组按照题目要求分成两个部分（我刚开始理解成这个标准是通过计算得到的，在阅读题解后发现，降序数组中，这种标准只是一个属性而已，也就是能通过数组规律直接找到）</p></li><li><p>将数组降序排列</p></li><li><p>找到 h 值，h 值就是 arr[i] == i 时的 值，将数值作图可以表示为（图片来源于<a href="https://pic.leetcode-cn.com/Figures/274_H_index.svg" target="_blank" rel="noopener">LeetCode 274题解</a>）：</p><p><img src="/2019/07/27/LeetCode刷题274（H指数）/274_H_index.png" alt="274_H_index"></p></li><li><p>h 值是 arr[i] &gt; i 的临界值，只要记录索引 i，就可以求出 h 值</p></li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序标准为降序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt; arr[i]) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[++index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">        qsort(citations, <span class="number">0</span>, citations.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录 h 值</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citations.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">            <span class="comment">// 即可求出 h 值</span></span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt; i) &#123;</span><br><span class="line">                h++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := arr[left]</span><br><span class="line">    index := left</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序标准为降序</span></span><br><span class="line">    <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; arr[i] &#123;</span><br><span class="line">            arr[index] = arr[i]</span><br><span class="line">            arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index] = value</span><br><span class="line"></span><br><span class="line">    qsort(arr, left, index - <span class="number">1</span>)</span><br><span class="line">    qsort(arr, index + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数组进行降序排序</span></span><br><span class="line">    qsort(citations, <span class="number">0</span>, <span class="built_in">len</span>(citations) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 h 值</span></span><br><span class="line">    num := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> citations &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要满足引用值 arr[i] 大于 i值</span></span><br><span class="line">        <span class="comment">// 即可求出 h 值</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; value &#123;</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h 指数的定义: “h 代表“高引用次数”（high citations）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/h-index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题1122（数组的相对排序）</title>
    <link href="https://www.chentyit.com/2019/07/25/LeetCode%E5%88%B7%E9%A2%981122%EF%BC%88%E6%95%B0%E7%BB%84%E7%9A%84%E7%9B%B8%E5%AF%B9%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/25/LeetCode刷题1122（数组的相对排序）/</id>
    <published>2019-07-25T14:01:06.000Z</published>
    <updated>2019-07-27T08:04:13.105Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给你两个数组，arr1 和 arr2，</span><br><span class="line"></span><br><span class="line">arr2 中的元素各不相同</span><br><span class="line">arr2 中的每个元素都出现在 arr1 中</span><br><span class="line">对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同</span><br><span class="line">未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/relative-sort-array</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入：arr1 = [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19], arr2 = [2, 1, 4, 3, 9, 6]<br>输出：[2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]</p></blockquote><p><strong>思路：</strong></p><ol><li>先将 arr2 中的元素存入到一个 Map 中，值为 key，下标索引为 index，作为排序的标准</li><li>将 arr1 分为两个部分，第一个部分包含 arr2 的元素，第二个部分不包含 arr2 的元素</li><li>将第一个部分按照 Map 中的规则进行排序，第二个部分按照升序排序</li><li>将两个部分的数组拼接起来</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用快速排序（我对快速排序情有独钟，但是之后会尝试一下归并排序）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@map</span> 这个是思路1中制定好的排序规则，用作排序条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(Integer[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 map 中取出对应 key 的 value</span></span><br><span class="line">            <span class="comment">// 获得该数值对应的序号</span></span><br><span class="line">            <span class="keyword">if</span> (map.get(value) &gt; map.get(arr[i])) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>, map);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] relativeSortArray(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个 Map 存放排序规则</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; numMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            numMap.put(arr2[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两个 list 存放 arr1 分割的两段数据</span></span><br><span class="line">        List&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; l2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numMap.containsKey(i)) &#123;</span><br><span class="line">                l1.add(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l2.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对第一段数据进行快速排序</span></span><br><span class="line">        Integer[] arrbefore = l1.toArray(<span class="keyword">new</span> Integer[l1.size()]);</span><br><span class="line">        qsort(arrbefore, <span class="number">0</span>, arrbefore.length - <span class="number">1</span>, numMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第二段数据放入数组中，进行简单选择排序</span></span><br><span class="line">        Integer[] arrafter = l2.toArray(<span class="keyword">new</span> Integer[l2.size()]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrafter.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arrafter.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrafter[i] &gt; arrafter[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> buf = arrafter[i];</span><br><span class="line">                    arrafter[i] = arrafter[j];</span><br><span class="line">                    arrafter[j] = buf;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新数组存放结果</span></span><br><span class="line">        <span class="keyword">int</span>[] arrResult = <span class="keyword">new</span> <span class="keyword">int</span>[arrbefore.length + arrafter.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存放第一部分的数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrbefore.length; i++) &#123;</span><br><span class="line">            arrResult[i] = arrbefore[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存放第二部分的数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrafter.length; i++) &#123;</span><br><span class="line">            arrResult[i + arrbefore.length] = arrafter[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用快速排序（我对快速排序情有独钟，但是之后会尝试一下归并排序）</span></span><br><span class="line"><span class="comment"> * @numMap 这个是思路1中制定好的排序规则，用作排序条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>, numMap <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := arr[left]</span><br><span class="line">    index := left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="comment">// 从 map 中取出对应 key 的 value</span></span><br><span class="line">        <span class="comment">// 获得该数值对应的序号</span></span><br><span class="line">        <span class="keyword">if</span> numMap[value] &gt; numMap[arr[i]] &#123;</span><br><span class="line">            arr[index] = arr[i]</span><br><span class="line">            arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index] = value</span><br><span class="line"></span><br><span class="line">    qsort(arr, left, index - <span class="number">1</span>, numMap)</span><br><span class="line">    qsort(arr, index + <span class="number">1</span>, right, numMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">relativeSortArray</span><span class="params">(arr1 []<span class="keyword">int</span>, arr2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 构建一个 Map 存放排序规则</span></span><br><span class="line">    numMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr2); i++ &#123;</span><br><span class="line">        numMap[arr2[i]] = i</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个数组存放 arr1 分割的两段数据</span></span><br><span class="line">    <span class="keyword">var</span> l1 []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> l2 []<span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置标志位</span></span><br><span class="line">    flag := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr1); i++ &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从 map 中找到对应的 key</span></span><br><span class="line">        <span class="comment">// 如果找到就存到 l1 中</span></span><br><span class="line">        <span class="comment">// 没找到就存到 l2 中</span></span><br><span class="line">        <span class="keyword">for</span> key, _ := <span class="keyword">range</span> numMap&#123;</span><br><span class="line">            <span class="keyword">if</span> arr1[i] == key &#123;</span><br><span class="line">                l1 = <span class="built_in">append</span>(l1, arr1[i])</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !flag &#123;</span><br><span class="line">            l2 = <span class="built_in">append</span>(l2, arr1[i])</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 l1 进行快速排序</span></span><br><span class="line">    qsort(l1, <span class="number">0</span>, <span class="built_in">len</span>(l1) - <span class="number">1</span>, numMap)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 l2 进行选择排序</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(l2) - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(l2); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> l2[i] &gt; l2[j] &#123;</span><br><span class="line">                l2[i], l2[j] = l2[j], l2[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个部分的数组（不得不说 golang 操作数组真的方便）</span></span><br><span class="line">    l1 = <span class="built_in">append</span>(l1, l2...)</span><br><span class="line">    <span class="keyword">return</span> l1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给你两个数组，arr1 和 arr2，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2 中的元素各不相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2 中的每个元素都出现在 arr1 中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/relative-sort-array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题1030（距离顺序排列矩阵单元格）</title>
    <link href="https://www.chentyit.com/2019/07/24/LeetCode%E5%88%B7%E9%A2%981030%EF%BC%88%E8%B7%9D%E7%A6%BB%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%88%97%E7%9F%A9%E9%98%B5%E5%8D%95%E5%85%83%E6%A0%BC%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/24/LeetCode刷题1030（距离顺序排列矩阵单元格）/</id>
    <published>2019-07-24T06:59:58.000Z</published>
    <updated>2019-07-27T08:04:08.020Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &lt;= r &lt; R 且 0 &lt;= c &lt; C。</span><br><span class="line"></span><br><span class="line">另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。</span><br><span class="line"></span><br><span class="line">返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，其中</span><br><span class="line">两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/matrix-cells-in-distance-order</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例1：</strong></p><blockquote><p>输入：R = 1, C = 2, r0 = 0, c0 = 0<br>输出：[[0,0],[0,1]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：R = 2, C = 2, r0 = 0, c0 = 1<br>输出：[[0,1],[0,0],[1,1],[1,0]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]<br>[[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：R = 2, C = 3, r0 = 1, c0 = 2<br>输出：[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]<br>解释：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]<br>其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]</p></blockquote><p><strong>思路：</strong></p><ol><li>用一个<strong>一位数组</strong>存下所有点</li><li>利用快速排序按照<strong>曼哈顿距离</strong>对所有的点进行排序</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 排序条件是各个点到目标点的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="comment">// 按照各个点到目标点的距离进行排序</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(value[<span class="number">0</span>] - r0) + Math.abs(value[<span class="number">1</span>] - c0) &gt;</span><br><span class="line">                    Math.abs(arr[i][<span class="number">0</span>] - r0) + Math.abs(arr[i][<span class="number">1</span>] - c0)) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>, r0, c0);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right, r0, c0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解题主要方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] allCellsDistOrder(<span class="keyword">int</span> R, <span class="keyword">int</span> C, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0) &#123;</span><br><span class="line">        <span class="comment">// 判断所传参数是否满足题目要求</span></span><br><span class="line">        <span class="keyword">if</span> ((R &gt; <span class="number">100</span>) || (R &lt; <span class="number">1</span>) || (C &gt; <span class="number">100</span>) || (C &lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用一个一位数组存放二维坐标</span></span><br><span class="line">        <span class="comment">// 实质上也是一个二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[R * C][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++) &#123;</span><br><span class="line">                <span class="comment">// 创建一个空间存放每个点的坐标</span></span><br><span class="line">                arr[i * C + j] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">                arr[i * C + j][<span class="number">0</span>] = i;</span><br><span class="line">                arr[i * C + j][<span class="number">1</span>] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行快速排序</span></span><br><span class="line">        qsort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, r0, c0);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * 排序条件是各个点到目标点的距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr [][]<span class="keyword">int</span>, left, right, r0, c0 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := arr[left]</span><br><span class="line">index := left</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">        <span class="comment">// 按照各个点到目标点的距离进行排序</span></span><br><span class="line"><span class="keyword">if</span> math.Abs(<span class="keyword">float64</span>(value[<span class="number">0</span>] - r0)) + math.Abs(<span class="keyword">float64</span>(value[<span class="number">1</span>] - c0)) &gt;</span><br><span class="line">math.Abs(<span class="keyword">float64</span>(arr[i][<span class="number">0</span>] - r0)) + math.Abs(<span class="keyword">float64</span>(arr[i][<span class="number">1</span>] - c0)) &#123;</span><br><span class="line">arr[index] = arr[i]</span><br><span class="line">arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = value</span><br><span class="line"></span><br><span class="line">qsort(arr, left, index - <span class="number">1</span>, r0, c0)</span><br><span class="line">qsort(arr, index + <span class="number">1</span>, right, r0, c0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解题主要方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">allCellsDistOrder</span><span class="params">(R <span class="keyword">int</span>, C <span class="keyword">int</span>, r0 <span class="keyword">int</span>, c0 <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断所传参数是否满足题目要求</span></span><br><span class="line">    <span class="keyword">if</span> R &gt; <span class="number">100</span> || R &lt; <span class="number">1</span> || C &gt; <span class="number">100</span> || C &lt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 利用一个一位数组存放二维坐标</span></span><br><span class="line"><span class="comment">// 实质上也是一个二维数组</span></span><br><span class="line">    result := <span class="built_in">make</span>([][]<span class="keyword">int</span>, R * C)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; R; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; C; j++ &#123;</span><br><span class="line">            <span class="comment">// 创建一个空间存放每个点的坐标</span></span><br><span class="line">            result[i * C + j] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">            result[i * C + j][<span class="number">0</span>] = i</span><br><span class="line">            result[i * C + j][<span class="number">1</span>] = j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行快速排序</span></span><br><span class="line">    qsort(result, <span class="number">0</span>, <span class="built_in">len</span>(result) - <span class="number">1</span>, r0, c0)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &amp;lt;= r &amp;lt; R 且 0 &amp;lt;= c &amp;lt; C。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，其中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/matrix-cells-in-distance-order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题976（三角形的最大周长）</title>
    <link href="https://www.chentyit.com/2019/07/23/LeetCode%E5%88%B7%E9%A2%98976%EF%BC%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%91%A8%E9%95%BF%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/23/LeetCode刷题976（三角形的最大周长）/</id>
    <published>2019-07-23T11:12:49.000Z</published>
    <updated>2019-07-27T08:03:36.489Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。</span><br><span class="line"></span><br><span class="line">如果不能形成任何面积不为零的三角形，返回 0。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/largest-perimeter-triangle/</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例1：</strong></p><blockquote><p>输入：[2,1,2]<br>输出：5</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：[1,2,1]<br>输出：0</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：[3,2,3,4]<br>输出：10</p></blockquote><p><strong>示例4：</strong></p><blockquote><p>输入：[3,6,2,3]<br>输出：8</p></blockquote><p><strong>思路：</strong></p><ol><li>理清楚三角形特点，两边之和大于第三边 <code>A1 + A2 &gt; A3</code>，两边之差小于第三边 <code>|A1 - A2| &lt; A3</code></li><li>根据思路1可以得到在有序数组中，某一元素大于前两项之和即可</li><li>排序得到有序数组（升序降序随意）</li><li>根据思路 1 和 2 得到最大周长</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用的是快速排序</span></span><br><span class="line"><span class="comment">     * 具体说明就不详细写了，单独起新博客写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = arr[left];</span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; arr[i]) &#123;</span><br><span class="line">                arr[index] = arr[i];</span><br><span class="line">                arr[i] = arr[index + <span class="number">1</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = value;</span><br><span class="line"></span><br><span class="line">        qsort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">        qsort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求出满足三角形条件的最大周长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestPerimeter</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断所给的数组长度是否满足 3 条边</span></span><br><span class="line">        <span class="keyword">if</span> (A.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 快速排序获得一个升序数组</span></span><br><span class="line">        qsort(A, <span class="number">0</span>, A.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设定一个最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 开始计算最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 计算出满足两边之和大于第三边的最大周长</span></span><br><span class="line">            <span class="keyword">if</span> ((A[i] &lt; (A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>])) &amp;&amp; (max &lt; A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>])) &#123;</span><br><span class="line">                max = A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最大周长</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用的是快速排序</span></span><br><span class="line"><span class="comment"> * 具体说明就不详细写了，单独起新博客写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value := arr[left]</span><br><span class="line">index := left</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> value &gt; arr[i] &#123;</span><br><span class="line">arr[index] = arr[i]</span><br><span class="line">arr[i] = arr[index + <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = value</span><br><span class="line"></span><br><span class="line">qsort(arr, left, index - <span class="number">1</span>)</span><br><span class="line">qsort(arr, index + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求出满足三角形条件的最大周长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestPerimeter</span><span class="params">(A []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断所给的数组长度是否满足 3 条边</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(A) &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 快速排序获得一个升序数组</span></span><br><span class="line">qsort(A, <span class="number">0</span>, <span class="built_in">len</span>(A) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 设定一个最大值</span></span><br><span class="line">max := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 开始计算最大值</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(A); i++ &#123;</span><br><span class="line">        <span class="comment">// 计算出满足两边之和大于第三边的最大周长</span></span><br><span class="line"><span class="keyword">if</span> (A[i] &lt; (A[i<span class="number">-1</span>] + A[i<span class="number">-2</span>])) &amp;&amp; (A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>] &gt; max) &#123;</span><br><span class="line">max = A[i] + A[i - <span class="number">1</span>] + A[i - <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回最大周长</span></span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果不能形成任何面积不为零的三角形，返回 0。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/largest-perimeter-triangle/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题922（按奇偶排序数组 II）</title>
    <link href="https://www.chentyit.com/2019/07/23/LeetCode%E5%88%B7%E9%A2%98922%EF%BC%88%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%20II%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/07/23/LeetCode刷题922（按奇偶排序数组 II）/</id>
    <published>2019-07-23T11:02:05.000Z</published>
    <updated>2019-07-27T08:03:30.910Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。</span><br><span class="line"></span><br><span class="line">对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。</span><br><span class="line"></span><br><span class="line">你可以返回任何满足上述条件的数组作为答案。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/sort-array-by-parity-ii</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例：</strong></p><blockquote><p>输入：[4, 2, 5, 7]<br>输出：[4, 5, 2, 7]<br>解释：[4, 7, 2, 5]，[2, 5, 4, 7]，[2, 7, 4, 5] 也会被接受。</p></blockquote><p><strong>思路：</strong></p><ol><li>设置奇偶指针指向奇偶位</li><li>如果满足奇偶数条件，指针加 2，不满足，两个指针位互换</li></ol><h2 id="Java-语言实现"><a href="#Java-语言实现" class="headerlink" title="Java 语言实现"></a>Java 语言实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sortArrayByParityII(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="comment">// 设置奇数指针</span></span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 设置偶数指针</span></span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 开始循环判断</span></span><br><span class="line">        <span class="keyword">while</span> (even &lt; A.length &amp;&amp; odd &lt; A.length) &#123;</span><br><span class="line">            <span class="comment">// 判断是否满足偶数条件</span></span><br><span class="line">            <span class="keyword">if</span> (A[even] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                even += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否满足奇数条件</span></span><br><span class="line">            <span class="keyword">if</span> (A[odd] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                odd += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不满足以上条件就交换两个指针的值</span></span><br><span class="line">            <span class="keyword">int</span> buf = A[even];</span><br><span class="line">            A[even] = A[odd];</span><br><span class="line">            A[odd] = buf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-语言实现"><a href="#Golang-语言实现" class="headerlink" title="Golang 语言实现"></a>Golang 语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArrayByParityII</span><span class="params">(A []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置奇数指针</span></span><br><span class="line">even := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 设置偶数指针</span></span><br><span class="line">odd := <span class="number">1</span></span><br><span class="line">    <span class="comment">// 开始循环判断</span></span><br><span class="line"><span class="keyword">for</span> even &lt; <span class="built_in">len</span>(A) &amp;&amp; odd &lt; <span class="built_in">len</span>(A) &#123;</span><br><span class="line">        <span class="comment">// 判断是否满足偶数条件</span></span><br><span class="line">        <span class="keyword">if</span> A[even]%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            even += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否满足奇数条件</span></span><br><span class="line">        <span class="keyword">if</span> A[odd]%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">            odd += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不满足以上条件就交换两个指针的值</span></span><br><span class="line">        A[even], A[odd] = A[odd], A[even]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以返回任何满足上述条件的数组作为答案。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：力扣（LeetCode）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://leetcode-cn.com/problems/sort-array-by-parity-ii&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.chentyit.com/categories/LeetCode/"/>
    
    
      <category term="排序" scheme="https://www.chentyit.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++复制构造函数</title>
    <link href="https://www.chentyit.com/2019/07/19/C-%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://www.chentyit.com/2019/07/19/C-复制构造函数/</id>
    <published>2019-07-19T10:49:26.000Z</published>
    <updated>2019-07-19T10:54:18.318Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> n) &#123;</span><br><span class="line">value = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(A other) &#123;</span><br><span class="line">value = other.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a = <span class="number">10</span>;</span><br><span class="line">A b = a;</span><br><span class="line">b.Print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上述代码中，复制构造函数 <code>A(A other)</code> 传入的是 A 的一个实例，由于是传值参数，把形参复制到实参会调用复制构造函数，如果允许复制构造函数传值，就会在复制构造函数内调用复制构造函数，就会形成永久递归，导致栈溢出</p><p><strong>修改方案：</strong>将 <code>A(A other)</code> 修改为 <code>A(const A&amp; other)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(A other) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = other.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.Print();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="https://www.chentyit.com/categories/C/"/>
    
    
      <category term="剑指Offer" scheme="https://www.chentyit.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>C++的sizeof函数</title>
    <link href="https://www.chentyit.com/2019/07/19/C-%E7%9A%84sizeoff%E5%87%BD%E6%95%B0/"/>
    <id>https://www.chentyit.com/2019/07/19/C-的sizeoff函数/</id>
    <published>2019-07-19T10:27:10.000Z</published>
    <updated>2019-07-19T10:46:40.740Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chen</span> &#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Chen a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>定义一个空类型，里面没有任何成员变量和成员函数，对该类型求 sizeof，得到的结果是多少？</strong></p><p>正确答案：1</p><blockquote><p>空类型的实例中不包含任何信息，sizeof 的结果本应该是 0，但声明类型的时候应该在内存中占有一定的空间，否则无法使用，占用大小由编译器决定，在 Visual Studio 中占 1 字节空间</p></blockquote><p><strong>如果在该类型中添加构造函数和析构函数，sizeof 的值是多少</strong></p><p>正确答案：1</p><blockquote><p>调用构造函数和析构函数只需要找到函数在内存中的地址就可以了，函数地址只与类型有关，与类型的实例无关，编译器不会为这两个函数添加信息，所以 sizeof 的值不会改变</p></blockquote><p><strong>如果把析构函数改成虚函数，sizeof 的值是多少</strong></p><p>正确答案：根据计算机来说（32 位机是 4，64 位机是 8）</p><blockquote><p>C++ 编译器中，类型中一旦有虚函数，就会为类型生成虚函数表，并且为每一个实例添加一个指向虚函数表的指针，在 32 位机中，一个指针占 4 字节空间，64 位机中，一个指针占 8 字节空间</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Chen&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Chen a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="https://www.chentyit.com/categories/C/"/>
    
    
      <category term="剑指Offer" scheme="https://www.chentyit.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>Go语言的Goroutine</title>
    <link href="https://www.chentyit.com/2019/07/06/Go%E8%AF%AD%E8%A8%80%E7%9A%84Goroutine/"/>
    <id>https://www.chentyit.com/2019/07/06/Go语言的Goroutine/</id>
    <published>2019-07-06T04:49:06.000Z</published>
    <updated>2019-07-06T06:16:04.784Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><ul><li><strong>并发：</strong>多线程程序在一个核的 CPU 上运行</li><li><strong>并行：</strong>多线程程序在多个核的 CPU 上运行</li></ul><h2 id="协程和线程"><a href="#协程和线程" class="headerlink" title="协程和线程"></a>协程和线程</h2><ul><li><strong>协程：</strong>独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的</li><li><strong>线程：</strong>一个线程上可以跑多个协程，协程是轻量级的线程</li></ul><h2 id="goroutine-调度模型"><a href="#goroutine-调度模型" class="headerlink" title="goroutine 调度模型"></a>goroutine 调度模型</h2><ul><li><strong>M：</strong>线程，OS线程抽象，代表着真正执行计算的资源，在绑定有效的P后，进入schedule循环；而schedule循环的机制大致是从Global队列、P的Local队列以及wait队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到M，如此反复。M并不保留G状态，这是G可以跨M调度的基础，M的数量是不定的</li><li><strong>P：</strong>上下文，表示逻辑处理器， 对G来说，P相当于CPU核，G只有绑定到P(在P的local runq中)才能被调度。对M来说，P提供了相关的执行环境(Context)，如内存分配状态(mcache)，任务队列(G)等，P的数量决定了系统内最大可并行的G的数量（前提：物理CPU核数 &gt;= P的数量），P的数量由用户设置的GOMAXPROCS决定，但是不论GOMAXPROCS设置为多大，P的数量最大为256</li><li><strong>G：</strong>Goroutine，每个Goroutine对应一个G结构体，G存储Goroutine的运行堆栈、状态以及任务函数，可重用。G并非执行体，每个G需要绑定到P才能被调度执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;并发和并行&quot;&gt;&lt;a href=&quot;#并发和并行&quot; class=&quot;headerlink&quot; title=&quot;并发和并行&quot;&gt;&lt;/a&gt;并发和并行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发：&lt;/strong&gt;多线程程序在一个核的 CPU
      
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言的Struct</title>
    <link href="https://www.chentyit.com/2019/07/02/Go%E8%AF%AD%E8%A8%80%E7%9A%84Struct/"/>
    <id>https://www.chentyit.com/2019/07/02/Go语言的Struct/</id>
    <published>2019-07-02T03:18:45.000Z</published>
    <updated>2019-07-02T08:56:36.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">score <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Struct-的定义"><a href="#Struct-的定义" class="headerlink" title="Struct 的定义"></a>Struct 的定义</h2><p><strong>struct 定义的三种方式：</strong></p><ol><li>var stu Student</li><li>var stu *Student = new (Student)</li><li>var stu *Student = &amp;Student{}</li></ol><p>其中 2 和 3 返回的都是指向结构体的指针，访问形式如下：</p><p>stu.Name 或者 (*stu).Name</p><h2 id="Struct-的初始化"><a href="#Struct-的初始化" class="headerlink" title="Struct 的初始化"></a>Struct 的初始化</h2><p>struct 的内存布局：struct 中的所有字段在内存是连续的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Student</span><br><span class="line">stu.Age = <span class="number">18</span></span><br><span class="line">stu.Name = <span class="string">"hua"</span></span><br><span class="line">stu.score = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 *Student = &amp;Student&#123;</span><br><span class="line">Name:<span class="string">"cty"</span>,</span><br><span class="line">Age:<span class="number">21</span>,</span><br><span class="line">score:<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = Student&#123;</span><br><span class="line">Name:<span class="string">"cty"</span>,</span><br><span class="line">Age:<span class="number">21</span>,</span><br><span class="line">score:<span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="built_in">new</span> (Student)</span><br><span class="line">stu3.Age = <span class="number">18</span></span><br><span class="line">stu3.Name = <span class="string">"hua"</span></span><br><span class="line">stu3.score = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">fmt.Println(stu)</span><br><span class="line">fmt.Println(*stu1)</span><br><span class="line">fmt.Println(stu2)</span><br><span class="line">fmt.Println(*stu3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;hua 18 80&#125;</span><br><span class="line">&#123;cty 21 100&#125;</span><br><span class="line">&#123;cty 21 100&#125;</span><br><span class="line">&#123;hua 18 80&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p><strong>golang 中的 struct 没有构造函数，一般可以使用工厂模式解决</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">Student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Student&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age:  age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>可以为 struct 中的每个字段写上一个 tag，这个tag 可以通过反射机制获取，最常用的就是 json 序列化和反序列化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"student_name"`</span></span><br><span class="line">Age   <span class="keyword">int</span>    <span class="string">`json:"student_age"`</span></span><br><span class="line">Score <span class="keyword">int</span>    <span class="string">`json:"student_score"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line">Name:  <span class="string">"sss"</span>,</span><br><span class="line">Age:   <span class="number">18</span>,</span><br><span class="line">Score: <span class="number">80</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := json.Marshal(stu)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json encode stu failed, err: "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;student_name&quot;:&quot;sss&quot;,&quot;student_age&quot;:18,&quot;student_score&quot;:80&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Student &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	score &lt;span class=&quot;keyword&quot;&gt;float32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言切片</title>
    <link href="https://www.chentyit.com/2019/07/01/Go%E8%AF%AD%E8%A8%80%E5%88%87%E7%89%87/"/>
    <id>https://www.chentyit.com/2019/07/01/Go语言切片/</id>
    <published>2019-07-01T03:48:39.000Z</published>
    <updated>2019-07-01T07:26:57.794Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSlice</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> arr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice = arr[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice1 := slice[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">fmt.Println(slice1)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice1))</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">slice2 := slice1[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice2)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>初学 Go 语言，疯狂踩坑，很多语法与 Java 不同，这是第一篇关于 Go 语言的学习笔记，开始记录一些学习中遇到的坑</p></blockquote><p>关于切片，在 Java，Python，JS 等语言中都有过类似的语法，但是人家那个叫做截取，就是截取一段新的数组出来，但是 GO 语言就是那个不一样的烟火，刚开始看的时候，就有点懵，今天终于搞懂了，就特地来记录一下，就拿上面这段代码举例，咱们先把运行结果贴出来，方便解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4 5]</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2]</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">[1 2 3 4 5]</span><br><span class="line">[2 3 4]</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>我每次都打印一下 arr 就是为了看看切片的时候有没有影响到原数组（很明显没有）</p><p>现在来看源代码中的 <code>slice = arr[1:]</code> 这里就生成了第一块切片，也就是 [2, 3, 4, 5]，长度为 4，容量为 4，这个就是初始的切片</p><p>然后用 <code>slice1 := slice[0:1]</code> 得到 slice1，仍然没有影响到原数组，得到的切片就是 [2]，长度为 1，容量为 4，因为这个切片是从一个容量为 4 的切片中切出来的，容量不变，只是截取需要的值就行</p><p>最后用 <code>slice2 := slice1[0:3]</code> 得到 slice2，这里就和上面的解释一样的了，我就不赘述了</p><p>原本我以为从数组里面切出来后的切片再切，容量也会跟着变，但看样子，只要最初的的那个切片容量定了，那再由这个切面切出来的其他切面的容量也是一样，虽然目前看起来没什么用，但以后肯定会有机会用到的</p><blockquote><p>关于自学笔记的博客我不太喜欢用太过专业的词汇来描述，简单能理解就好了，Go 语言不得不说在我放弃 C++ 学习 Java 后，唯一一个能让我觉得优雅的语言（仅个人主观喜好）</p></blockquote><p><strong>补充：</strong></p><p>切片创建的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br><span class="line"><span class="comment">// 或者使用数组创建</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testSlice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice = arr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice1 := slice[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slice2 := slice1[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.chentyit.com/categories/Go/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS查缺补漏01（面向对象）</title>
    <link href="https://www.chentyit.com/2019/05/31/JS%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/31/JS查缺补漏01（面向对象）/</id>
    <published>2019-05-31T08:00:03.000Z</published>
    <updated>2019-05-31T08:21:33.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p><strong>内建对象：</strong></p><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用</p><p><strong>宿主对象：</strong></p><p>由 JS 的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p><strong>自建对象：</strong></p><p>由开发人员自己创建的对象</p><p><strong>删除对象属性：</strong> delete 对象.属性名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;对象的分类&quot;&gt;&lt;a href=&quot;#对象的分类&quot; class=&quot;headerlink&quot; title=&quot;对象的分类&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.chentyit.com/categories/JavaScript/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://www.chentyit.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day14）</title>
    <link href="https://www.chentyit.com/2019/05/22/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day14%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/22/SpringBoot学习笔记（Day14）/</id>
    <published>2019-05-22T00:12:34.000Z</published>
    <updated>2019-05-23T07:25:59.971Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="异步线程池"><a href="#异步线程池" class="headerlink" title="异步线程池"></a>异步线程池</h2><h3 id="定义线程池和开启异步可用"><a href="#定义线程池和开启异步可用" class="headerlink" title="定义线程池和开启异步可用"></a>定义线程池和开启异步可用</h3><p><strong>AsyncConfigurer 接口源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getAsyncExecutor 方法返回的是一个自定义的线程池，提供空闲线程来执行异步任务</li><li>AsyncUncaughtExceptionHandler 处理异常处理器方法，自定义处理异常</li><li>@EnableAsync 如果 Java 配置文件标注它，Spring 就会开启异步可用</li><li>@Async 驱动 Spring 使用异步调用</li></ul><p><strong>使用 Java 配置定义线程池和启用异步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义线程池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义线程池</span></span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 线程池最大线程数</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 线程队列最大线程数</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @EnableAsync 代表开启 Spring 异步，就可以使用 @Async 驱动 Spring 使用异步</p><p><strong>异步服务接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟报表生成的异步方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span>  <span class="comment">// 声明使用异步调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印异步线程名称</span></span><br><span class="line">        System.out.println(<span class="string">"报表线程名称：【"</span> + Thread.currentThread().getName() + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步方法控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asyncPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求线程名称：【"</span> + Thread.currentThread() + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 调用异步服务</span></span><br><span class="line">        asyncService.generateReport();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"async"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台打印</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求线程名称：【Thread[http-nio-8080-exec-1,5,main]】</span><br><span class="line">报表线程名称：【ThreadPoolTaskExecutor-1】</span><br></pre></td></tr></table></figure><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><h3 id="JMS-实例-——-ActiveMQ"><a href="#JMS-实例-——-ActiveMQ" class="headerlink" title="JMS 实例 —— ActiveMQ"></a>JMS 实例 —— ActiveMQ</h3><p><strong>配置 ActiveMQ 和 JMS 信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ActiveMQ 地址</span><br><span class="line">spring.activemq.broker-url=tcp://localhost:61616</span><br><span class="line"># 配置用户名和密码</span><br><span class="line">spring.activemq.user=admin</span><br><span class="line">spring.activemq.password=admin</span><br><span class="line"># 是否使用发布订阅模式，默认为false，即用的是点对点的模式</span><br><span class="line">spring.jms.pub-sub-domain=true</span><br><span class="line"># 默认目的地址</span><br><span class="line">spring.jms.template.default-destination=activemq.default.destination</span><br><span class="line"># 是否启用连接池</span><br><span class="line">spring.activemq.pool.enabled=true</span><br><span class="line"># 连接池最大连接数</span><br><span class="line">spring.activemq.pool.max-connections=50</span><br></pre></td></tr></table></figure><p><strong>定义 ActiveMQ 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveMQ 服务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActiveMQ 服务实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">        jmsTemplate.convertAndSend(message);</span><br><span class="line">        <span class="comment">// 自定义发送地址</span></span><br><span class="line">        <span class="comment">// jmsTemplate.convertAndSend("your-destination", message);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;spring.jms.template.default-destination&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + message + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>convertAndSend 是一个发送消息的方法</p><ol><li>首先 convert 转换，默认情况下 JmsTemplate 会提供一个 SimpleMessageConverter 去提供转换规则</li><li>发送信息（已经在配置文件下设置好了就不用写了）</li></ol><p>如果要发送一个对象，就要让对象实现 Serializable 接口以便序列化</p><p><strong>ActiveMQ 发送 POJO 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActiveMqUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入由 Spring Boot 自动生产的 jmsTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String myDestination = <span class="string">"my-destination"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">        <span class="comment">// 使用自定义地址发送对象</span></span><br><span class="line">        jmsTemplate.convertAndSend(myDestination, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监控自定义地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = myDestination)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息：【"</span> + user + <span class="string">"】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 ActiveMQ 不信任 POJO 对象，所以要在配置文件中添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.packages.trusted=cn.chentyit.chapter13.pojo,java.lang</span><br><span class="line">spring.activemq.packages.trust-all=true</span><br></pre></td></tr></table></figure><ul><li>spring.activemq.packages.trusted 表示信任某个确定的包</li><li>spring.activemq.packages.trust-all 表示信任所有的包</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;异步线程池&quot;&gt;&lt;a href=&quot;#异步线程池&quot; class=&quot;headerlink&quot; title=&quot;异步线程池&quot;&gt;&lt;/a&gt;异步线程池&lt;/h2&gt;&lt;h3 id=&quot;定义线程池和开启异步可用&quot;&gt;&lt;a href=&quot;#定义线程池和开启异步可
      
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（Day13）</title>
    <link href="https://www.chentyit.com/2019/05/21/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Day13%EF%BC%89/"/>
    <id>https://www.chentyit.com/2019/05/21/SpringBoot学习笔记（Day13）/</id>
    <published>2019-05-20T23:58:53.000Z</published>
    <updated>2019-05-21T08:49:48.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/21/SpringBoot学习笔记（Day13）/小白.png" alt="插图"></p><a id="more"></a><h2 id="限制请求"><a href="#限制请求" class="headerlink" title="限制请求"></a>限制请求</h2><p>抽象类 WebSecurityConfigurerAdapter 提供了一个方法 configure(HttpSecurity)，通过它能够实现对于不同角色（用户）赋予不同权限的功能</p><p><strong>configure(HttpSecurity) 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只要通过验证就可以访问所有的请求</span></span><br><span class="line"><span class="comment">     * authorizeRequests 方法限定只对签名成功的用户请求</span></span><br><span class="line"><span class="comment">     * anyRequest 方法限定所有请求</span></span><br><span class="line"><span class="comment">     * authenticated 方法对所有签名成功的用户允许方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest())</span><br><span class="line">                    .authenticated()</span><br><span class="line">                    <span class="comment">// and 方法是连接词，formLogin 代表使用 Spring Security 默认的登录界面</span></span><br><span class="line">                    .and()).formLogin()</span><br><span class="line">        <span class="comment">// httpBasic 方法说明启用 HTTP 认证</span></span><br><span class="line">        .and()).httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>formLogin 方法配置了使用 Spring Security 的默认登录页面和 httpBasic 方法启用浏览器的 HTTP 基础认证方式</p><h3 id="配置请求路径访问权限"><a href="#配置请求路径访问权限" class="headerlink" title="配置请求路径访问权限"></a>配置请求路径访问权限</h3><p><strong>使用 Ant 风格配置限定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSecurityConfigurerAdapter 默认设定访问权限和登录方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 限定签名后的权限</span></span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">/* ============== 第一段 ============== */</span></span><br><span class="line">        authorizeRequests()</span><br><span class="line">        <span class="comment">// 限定 "/user/welcome" 请求赋予角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/welcome"</span>, <span class="string">"/user/details"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/" 先所有请求权限赋予角色 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/**"</span>).hasAnyAuthority(<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line">        <span class="comment">// 其他路径允许签名后访问</span></span><br><span class="line">        .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第二段 ============== */</span></span><br><span class="line">        <span class="comment">// and 代表连接词</span></span><br><span class="line">        <span class="comment">// 对于没有配置权限的其他请求允许匿名访问</span></span><br><span class="line">        .and().anonymous()</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============== 第三段 ============== */</span></span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启动 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>权限方法说明</center><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>access(String)</td><td>参数为SpEL，如果返回为 true 则允许访问</td></tr><tr><td>anonymous()</td><td>允许匿名访问</td></tr><tr><td>authorizeRequests()</td><td>限定通过签名的请求</td></tr><tr><td>anyRequest()</td><td>限定任意的请求</td></tr><tr><td>hasAnyRole(String…)</td><td>将访问权限赋予多个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>hasRole(String)</td><td>将访问权限赋予一个角色（角色会自动加入前缀 “ROLE_”</td></tr><tr><td>permitAll()</td><td>无条件允许访问</td></tr><tr><td>and()</td><td>连接词，并取消之前限定前提规则</td></tr><tr><td>httpBasic()</td><td>启用浏览器的 HTTP 基础验证</td></tr><tr><td>formLogin()</td><td>启用 Spring Security 默认的登录页面</td></tr><tr><td>not()</td><td>对其他方法的访问采取求反</td></tr><tr><td>fullyAuthenticated()</td><td>如果是完整验证（并非 Remember-me），则允许访问</td></tr><tr><td>denyAll()</td><td>无条件不允许任何访问</td></tr><tr><td>hasIpAddress(String)</td><td>如果是给定的 IP 地址则允许访问</td></tr><tr><td>rememberme()</td><td>用户通过 Remember-me 功能验证就允许访问</td></tr><tr><td>hasAuthority(String)</td><td>如果是给定的角色就允许访问（不加入前缀 “ROLE_”）</td></tr><tr><td>hasAnyAuthority(String…)</td><td>如果是给定的角色中的任意一个就允许访问（不加入前缀 “ROLE_” ）</td></tr></tbody></table><p><strong>Spring 表达式设置权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 使用 Spring 表达式限定只有角色 ROLE_USER 或者 ROLE_ADMIN</span></span><br><span class="line">        .antMatchers(<span class="string">"/user/**"</span>).access(<span class="string">"hasRole('USER') or hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 设置访问权限给角色 ROLE_ADMIN，要求是完整登录（非记住登录）</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN') &amp;&amp; isFullyAuthenticated()"</span>)</span><br><span class="line">        <span class="comment">// 限定 "/admin/welcome2" 访问权限给角色 ROLE_ADMIN，允许不完整登录</span></span><br><span class="line">        .antMatchers(<span class="string">"/admin/welcome2"</span>).access(<span class="string">"hasAnyAuthority('ROLE_ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 使用记住功能</span></span><br><span class="line">        .and().rememberMe()</span><br><span class="line">        <span class="comment">// 使用 Spring Security 默认的登录页面</span></span><br><span class="line">        .and().formLogin()</span><br><span class="line">        <span class="comment">// 启用 HTTP 基础验证</span></span><br><span class="line">        .and().httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>authentication()</td><td>用户认证对象</td></tr><tr><td>denyAll()</td><td>拒绝任何访问</td></tr><tr><td>hasAnyRole(String…)</td><td>当前用户是否存在参数中列明的对象属性</td></tr><tr><td>hasRole(String)</td><td>当前用户是否存在角色</td></tr><tr><td>hasIpAddress(String)</td><td>是否请求来自指定的 IP</td></tr><tr><td>isAnonymous()</td><td>是否匿名访问</td></tr><tr><td>isAuthenticated()</td><td>是否用户通过认证签名</td></tr><tr><td>isFullAuthenticated()</td><td>是否用户是完整验证，即非“记住我”功能通过的认证</td></tr><tr><td>isRememberMe()</td><td>是否是通过 “记住我” 功能通过的验证</td></tr><tr><td>permitAll()</td><td>无条件允许任何访问</td></tr><tr><td>principal()</td><td>用户的 principal 对象</td></tr></tbody></table><h2 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h2><h3 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h3><p><strong>Spring Boot 配置登录请求连接和 “记住我”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.</span><br><span class="line">        <span class="comment">// 访问 /admin 下的请求需要管理员权限</span></span><br><span class="line">        authorizeRequests().antMatchers(<span class="string">"/admin/**"</span>).access(<span class="string">"hasRole('ADMIN')"</span>)</span><br><span class="line">        <span class="comment">// 启用 remember me 功能</span></span><br><span class="line">        .and().rememberMe().tokenValiditySeconds(<span class="number">86400</span>).key(<span class="string">"remember-me-key"</span>)</span><br><span class="line">        <span class="comment">// 启用 HTTP Basic 功能</span></span><br><span class="line">        .and().httpBasic()</span><br><span class="line">        <span class="comment">// 通过签名后可以访问任何请求</span></span><br><span class="line">        .and().authorizeRequests().antMatchers(<span class="string">"/**"</span>).permitAll()</span><br><span class="line">        <span class="comment">// 设置登录页和默认的跳转路径</span></span><br><span class="line">        .and().formLogin().loginPage(<span class="string">"/login/page"</span>).defaultSuccessUrl(<span class="string">"/admin/welcome1"</span>)</span><br><span class="line">        <span class="comment">// 登出页面和默认跳转路径</span></span><br><span class="line">        .and().logout().logoutUrl(<span class="string">"/logout/page"</span>).logoutSuccessUrl(<span class="string">"/welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>remember 启用了 “记住我” 功能，有效期为 1 天</li><li>浏览器中将使用 Cookie 以键 “remember-mu-key” 进行保存，并且以 MD5 加密</li><li>loginPage 是指定登录路径为 “/login/page”</li><li>defaultSuccessUrl 方法是指定默认的跳转路径为 “/admin/welcome1”</li></ul><p><strong>新增映射关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是的 /login/page 映射为 login.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="comment">// 使得 /login/page 映射为 logout_welcome.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/login/page"</span>).setViewName(<span class="string">"logout_welcome"</span>);</span><br><span class="line">        <span class="comment">// 使得 /logout 映射为 logout.jsp</span></span><br><span class="line">        registry.addViewController(<span class="string">"/logout"</span>).setViewName(<span class="string">"logout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/05/21/SpringBoot学习笔记（Day13）/小白.png&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.chentyit.com/categories/Java/"/>
    
    
      <category term="自学笔记" scheme="https://www.chentyit.com/tags/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring框架" scheme="https://www.chentyit.com/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
