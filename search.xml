<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java多线程知识点（1-7）]]></title>
    <url>%2F2019%2F03%2F03%2FJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%881-7%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1. 在java中守护线程和本地线程的区别java中的线程分为两种：守护线程（Daemon）和用户线程（User） 任何线程都可以设置为守护线程和用户线程，通过方法Thread.setDaemon(boolean)；true则把该线程设置为守护线程，反之则为用户抛出异常。Thread.setDaemon()必须在Thread.start()之前调用，否则运行时会抛出异常 两者的区别：虚拟机（JVM）何时离开，Daemon是为其他线程提供服务，如果全部的UserThread已经撤离，Daemon没有可服务的线程，JVM撤离。也可以理解为守护线程是JVM自动创建的线程（但不一定），用户线程是程序创建的线程，守护线程就没有工作继续执行，当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开 扩展：Thread Dump打印出来的线程信息，含有daemon字样的线程即为守护进程，可能会有：服务守护进程、编译守护进程、windows下的监听Ctrl+break的守护进程、Finalizer守护进程、引用处理守护进程、GC守护进程 2. 线程与进程的区别进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。一个程序至少有一个进程，一个进程至少有一个线程 3. 多线程的上下文切换多线程会共同使用一组计算机的CPU，二线程数大于给程序分配的CPU数是，为了让各个线程都有执行的机会，就需要轮转使用CPU。不同的线程切换使用CPU发生的切换数据等就是上下文切换 4. 死锁与活锁的区别，死锁与饥饿的区别死锁：是指两个或两个以上的进程（或线程）在指定过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去 产生死锁的必要条件： 互斥条件：所谓互斥就是进程在某一时间内独占资源 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放 不剥夺条件：进程已获得资源，在未使用完之前不能强行剥夺 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系 活锁：任务或执行者没有阻塞，由于某些条件没有满足，导致一直重复尝试、失败、尝试、失败 活锁和死锁的区别：处于活锁的实体是在不断的改变状态，所谓的“活”，而处于是死锁的实体表现为等待，活锁可能自己解开，死锁不能 饥饿：一个或多个线程因为种种原因无法获得所需要的资源，导致一直无法执行的状态 Java中导致饥饿的原因： 高优先级线程吞噬所有低优先级线程的资源 线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在他之前持续对该同步块进行访问 线程在等待一个本身也处于永久等待完成的对象（比如调用这个对象的wait方法），因为其他线程总是被持续地获得唤醒 5. Java中用到的线程调度算法采用时间片轮转的方式，可以设置线程的优先级，会映射到下层的系统上面的优先级上，如非特别需要，尽量不要用，防止线程饥饿 6. 什么是线程组，为什么在Java中不推荐使用ThreadGroup类，可以把线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，组中还可以有线程，这样的组织结构类似于树，有安全隐患，推荐使用线程池 7. 为什么使用Executor框架每次执行任务创建线程 new Thread() 比较消耗性能，创建一个线程是比较耗时的、耗资源的 调用 new Thread() 创建的线程缺乏管理，被称为野线程，而且可以无限制的创建，线程之间的互相竞争会导致过多占用系统资源而导致系统瘫痪，还有线程之间的频繁交替也会消耗很多系统资源 直接使用 new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、定时定期执行、线程中断等都不便实现]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[白蛇缘起影评]]></title>
    <url>%2F2019%2F02%2F14%2F%E7%99%BD%E8%9B%87%E7%BC%98%E8%B5%B7%E5%BD%B1%E8%AF%84%2F</url>
    <content type="text"><![CDATA[这篇影评是我再三斟酌后决定发出来，只是为了表达我对于这部国漫单纯的喜爱，它并没有那么不堪（本文没有大篇幅去评价剧情，画面，台词等等，只是想表达一名该电影粉丝的想法） 先来说说看我这篇文章的三种人群，一类是《白蛇：缘起》这部动漫的粉丝，一类是《白蛇：缘起》的喷子，一类是持有保留意见的路人，我并不会去针对某一类人群说一些有失偏颇的话，这样做既没有意义，也违背了我这篇文章的初衷，但我之所以分开这三类人群，旨在希望各位能认真看完文章，它适合所有人 在农历新年之前，有两部电影都被我自己誉为我自己的打脸真香电影，一部是《海王》，另一部就是本文主题《白蛇：缘起》，在电影上映前，我都没抱着多大的期望值，但是观影后心中默认两字“牛逼”，对于看过不少科幻电影的我来说，《海王》是完全超乎我预料之外的好，很大程度归功于它的导演——温子仁，好了，回到我们的话题，相对于动漫，我看的就比较少了，日本动漫就看过《火影忍者》和《名侦探柯南》后者甚至只看过剧场版，而国漫相对多一些，比如《秦时明月》，画江湖系列的《侠岚》《风语咒》《灵主》《不良人》《换世门生》，还有《镇魂街》，有些估计也看过，想不起来了，虽然看过国漫，也挺喜欢，但一直处于喜欢的程度，并没有到达热爱，甚至成为自来水向身边的人疯狂安利，我看了四次《缘起》，每次看我都想不明白为什么我还愿意走进电影院再次观看，一点不觉得腻歪，知道最近我才觉得我找到了答案 在说答案之前，我想说说能让我四次走进电影院的一些原因，对于一场电影，看一遍基本就满足了，二刷就已经是热爱了，刷以上难免会觉得有点过分，甚至会让别人觉得看这么多次难道不觉的腻？我不是一个专业的影评人，没有丰富的词汇去描绘评论整个电影的剧情，但是作为一名观影者，我觉得我还是可以说一说自己的感受。《缘起》全程剧情十分紧凑，对于我来说，一个电影个情节衔接得好不好，可以用在你看电影时，有没有产生右划快进的欲望来恒定，这部电影完全没有，恐怕也正因为这个原因，在几次观影下来我发现了电影中很多地方剧情节奏太快不太符合逻辑。可是，整部电影的逻辑没有问题，四次《何须问》都让我身临其境，四次小白拉许宣魂魄都能触动到我，同样的剧情，能触动我四次的恐怕目前就只有《缘起》了。 但是仅仅只剧情触动的话，那我为我四刷的行为感到不值和奇怪了，接下来，我要说的仅仅代表我个人的观点：在我看来，无论是电影，电视剧，书，或者以任何媒介传播到我大脑里的信息都是可以分类的，但所有类别中有一类，是我认为最最重要的，很多人称之为情怀，我也认，但往往就是情怀能触碰到我内心深处最纯洁，单纯的向往，有同学跟我说过，现在社会变化太快了，有些东西已将变得不一样了，要试图适应，去改变自己。这句话没错，可是，任然有些东西在我心中，我愿意为它留下一方净土，希望在这净土上，能结出我期望的果实，在我没有找到合适的种子，我愿意继续守护它，我有过动摇，有过反思，我不能说这电影带给我什么珍贵的东西，可是剧情中许宣和小白的那种奋不顾身的爱情，的的确确触碰了我心中的这方净土，触及到了我自己对爱情的向往，就算这种爱情不存在，我也愿意相信它。可能会有人说我幼稚，什么都没经历，谈何如此这般，那我反问一句，你何尝没有为自己心中放弃的那一方净土感到后悔，惋惜，悲哀吗？人之初，我们本有着一片纯净的天地，逐渐成长，我们总是在用“无奈”来掩盖自己的妥协，用“放弃”掩盖自己的无能，用“现实”掩盖自己的退缩，这一片天地最终就留下了那一方可怜的土地，能不令人痛心。如果连最后这一点可怜的净土都没了，那我们还能找到自己最初所盼望的东西吗？我不想把“情怀”二字说的如何高大上，但至少，这玩意儿，能在你失落的时候给你一丝安慰，哪怕只有一丝光亮，你也会奋不顾身的往前跑，它不会为你指明任何方向，但是，至少在你行走的过程中，让你保持幸福感。 以上仅仅是我个人的观点，也是自己想了很久总结的话，所以在文章开头说了再三斟酌，并没想针对任何人，我仅仅想表达我为何爱这部电影之深，我也没有要故意抬杠捧高《缘起》的价值观，因为最终它只是一部电影，只是一个商业产物，一千个读者就有一千个哈姆雷特，我仅仅只是那千分之一，所以我尊重任何人的意见，就算是故意甚至恶意诋毁的人，我也愿意接纳，至少你们也是那“一千”中的一个。 全篇文章不长，恐怕还有些许矫情，看电影是我这个程序员业余最大的爱好之一了，我会愿意为自己喜欢的电影打call，好的电影我也会认认真真欣赏，如果有必要，我仍然会写成博客与诸位分享。]]></content>
      <categories>
        <category>观剧后感</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FirstBlog]]></title>
    <url>%2F2019%2F02%2F13%2FFirstBlog%2F</url>
    <content type="text"><![CDATA[FirstBlog第一篇文章这是三级标题 列表1 列表2 a 子列表 b 子列表 列表3 ZEALER 倾斜字体 加粗 println(&quot;Hello World&quot;); for (int i = 0; i &lt; 10; i++) { println(&quot;Hello World&quot;); } 引用文章 Markdown源码# FirstBlog ## 第一篇文章 ### 这是三级标题 - 列表1 - 列表2 a 子列表 b 子列表 - 列表3 --- --------------------- [ZEALER](http://www.zealer.com/) ![白色缘起](https://img1.doubanio.com/view/photo/l/public/p2540374727.webp) *倾斜字体* **加粗** `println(&quot;Hello World&quot;);`]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
